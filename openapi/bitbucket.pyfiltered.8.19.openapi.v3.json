{
  "openapi": "3.0.1",
  "info": {
    "title": "Bitbucket Data Center",
    "description": "This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to: \n\n - integrate Bitbucket with other applications;\n\n - create scripts that interact with Bitbucket; or\n\n - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend. \n\n You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).",
    "termsOfService": "https://www.atlassian.com/legal/software-license-agreement",
    "contact": {
      "name": "Bitbucket Data Center Jira Project",
      "url": "https://jira.atlassian.com/projects/BSERV/summary"
    },
    "version": "8.19"
  },
  "servers": [
    {
      "url": "http://{baseurl}/rest",
      "variables": {
        "baseurl": {
          "default": "example.com:7990",
          "description": "Address of your Bitbucket instance"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Authentication"
    },
    {
      "name": "Project"
    },
    {
      "name": "Pull Requests"
    },
    {
      "name": "Repository"
    }
  ],
  "paths": {
    "/access-tokens/latest/projects/{projectKey}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get project HTTP tokens",
        "description": "Get all access tokens associated with the given project.",
        "operationId": "getAllAccessTokens",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing a page of access tokens and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestAccessToken"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get access tokens for this project or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create project HTTP token",
        "description": "Create an access token for the project according to the given request.",
        "operationId": "createAccessToken_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the access token to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A response containing the raw access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRawAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the following error cases occurred (check the error message for more details).\n\n- The request does not contain a token name\n- The request does not contain a list of permissions, or the list of permissions is empty\n- One of the provided permission levels are unknown\n- The project already has the maximum number of tokens\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to create an access token for this project or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access-tokens/latest/projects/{projectKey}/repos/{repositorySlug}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get repository HTTP tokens",
        "description": "Get all access tokens associated with the given repository.",
        "operationId": "getAllAccessTokens_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing a page of access tokens and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestAccessToken"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get access tokens for this repository or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create repository HTTP token",
        "description": "Create an access token for the repository according to the given request.",
        "operationId": "createAccessToken_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the access token to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A response containing the raw access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRawAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the following error cases occurred (check the error message for more details).\n\n- The request does not contain a token name- The request does not contain a list of permissions, or the list of permissions is empty- One of the provided permission levels are unknown- The repository already has the maximum number of tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to create an access token for this repository or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access-tokens/latest/projects/{projectKey}/repos/{repositorySlug}/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get HTTP token by ID",
        "description": "Get the access token identified by the given ID.",
        "operationId": "getById_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing the access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAccessToken"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user or token does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update HTTP token",
        "description": "Modify an access token according to the given request. Any fields not specified will not be altered.",
        "operationId": "updateAccessToken_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the access token to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A response containing the updated access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided permission levels are unknown.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to update an access token on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete a HTTP token",
        "description": "Delete the access token identified by the given ID.",
        "operationId": "deleteById_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the token has been deleted."
          },
          "401": {
            "description": "The currently authenticated user is not permitted to delete an access token on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user or token does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access-tokens/latest/projects/{projectKey}/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get HTTP token by ID",
        "description": "Get the access token identified by the given ID.",
        "operationId": "getById",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing the access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAccessToken"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user or token does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update HTTP token",
        "description": "Modify an access token according to the given request. Any fields not specified will not be altered.",
        "operationId": "updateAccessToken",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the access token to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A response containing the updated access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided permission levels are unknown.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to update an access token on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete a HTTP token",
        "description": "Delete the access token identified by the given ID.",
        "operationId": "deleteById",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the token has been deleted."
          },
          "401": {
            "description": "The currently authenticated user is not permitted to delete an access token on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user or token does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access-tokens/latest/users/{userSlug}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get personal HTTP tokens",
        "description": "Get all access tokens associated with the given user.",
        "operationId": "getAllAccessTokens_2",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "The user slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing a page of access tokens and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestAccessToken"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create personal HTTP token",
        "description": "Create an access token for the user according to the given request.",
        "operationId": "createAccessToken_3",
        "parameters": [
          {
            "name": "userSlug",
            "in": "path",
            "description": "The user slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the access token to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A response containing the raw access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRawAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the following error cases occurred (check the error message for more details).\n\n- The request does not contain a token name\n- The request does not contain a list of permissions, or the list of permissions is empty\n- One of the provided permission levels are unknown\n- The user already has their maximum number of tokens\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to create an access token on behalf of this user or authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access-tokens/latest/users/{userSlug}/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get HTTP token by ID",
        "description": "Get the access token identified by the given ID.",
        "operationId": "getById_2",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userSlug",
            "in": "path",
            "description": "The user slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing the access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAccessToken"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get access tokens on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user or token does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update HTTP token",
        "description": "Modify an access token according to the given request. Any fields not specified will not be altered.",
        "operationId": "updateAccessToken_2",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userSlug",
            "in": "path",
            "description": "The user slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the access token to modify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A response containing the updated access token and associated details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAccessToken"
                }
              }
            }
          },
          "400": {
            "description": "One of the provided permission levels are unknown.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to update an access token on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete a HTTP token",
        "description": "Delete the access token identified by the given ID.",
        "operationId": "deleteById_2",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userSlug",
            "in": "path",
            "description": "The user slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the token has been deleted."
          },
          "401": {
            "description": "The currently authenticated user is not permitted to delete an access token on behalf of this user or authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified user or token does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch-utils/latest/projects/{projectKey}/repos/{repositorySlug}/branches": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Create branch",
        "description": " Creates a branch in the specified repository.\n\n\nThe authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource. If\nbranch permissions are set up in the repository, the authenticated user must also have access to the branch name\nthat is to be created.",
        "operationId": "createBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestBranchCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "JSON representation of the newly created branch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestBranch"
                }
              }
            }
          },
          "400": {
            "description": "The branch was not created because the request was invalid, e.g. the provided\nref name already existed in the repository, or was not a valid ref name in the\nrepository",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a branch. This could be due to insufficient repository permissions, or lack of branch permission for the provided ref name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The branch name overlapped with an existing branch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete branch",
        "description": " Deletes a branch in the specified repository.\n\n\n If the branch does not exist, this operation will not raise an error. In other words after calling this resource\n and receiving a 204 response the branch provided in the request is guaranteed to not exist in the specified\n repository any more, regardless of its existence beforehand.\n\n\n The optional 'endPoint' parameter of the request may contain a commit ID that the provided ref name is\n expected to point to. Should the ref point to a different commit ID, a 400 response will be returned with\n appropriate error details.\n\n\n The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource. If\n branch permissions are set up in the repository, the authenticated user must also have access to the branch name\n that is to be deleted.",
        "operationId": "deleteBranch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Branch delete request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestBranchDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "An empty response indicating that the branch no longer exists in the repository"
          },
          "400": {
            "description": "The branch was not deleted because the request was invalid, e.g. no ref name\nto delete was provided, or the provided ref name points to the default branch\nin the repository that cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete a\nbranch. This could be due to insufficient repository permissions, or lack of\nbranch permission for the provided ref name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch-utils/latest/projects/{projectKey}/repos/{repositorySlug}/branches/info/{commitId}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get branch",
        "description": "Gets the branch information associated with a single commit from a given repository.",
        "operationId": "findByCommit",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "maxLength": 40,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of branch refs associated with the commit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestMinimalRef"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The request has timed out processing the branch request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/condition": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Create default reviewer",
        "description": "Create a default reviewer pull request condition for the given project.",
        "operationId": "createPullRequestCondition",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details needed to create a default reviewer pull request condition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestDefaultReviewersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The default reviewer pull request condition that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestCondition"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/condition/{id}": {
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update the default reviewer",
        "description": "Update the default reviewer pull request condition for the given ID.",
        "operationId": "updatePullRequestCondition",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the pull request condition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new details for the default reviewer pull request condition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestDefaultReviewersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated default reviewer pull request condition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestCondition"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Remove default reviewer",
        "description": "Delete the default reviewer pull request condition associated with the given ID.",
        "operationId": "deletePullRequestCondition",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the pull request condition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the pull request condition was deleted."
          },
          "404": {
            "description": "An empty response indicating a pull request condition with the given ID could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/conditions": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get default reviewers",
        "description": "Return a page of default reviewer pull request conditions that have been configured for this project.",
        "operationId": "getPullRequestConditions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The default reviewer pull request conditions associated with the given project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestPullRequestCondition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Create default reviewers condition",
        "description": "Create a default reviewer pull request condition for the given repository.",
        "operationId": "createPullRequestCondition_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details needed to create a default reviewer pull request condition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestDefaultReviewersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The default reviewer pull request condition that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestCondition"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}": {
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update a default reviewer condition",
        "description": "Update the default reviewer pull request condition for the given ID.",
        "operationId": "updatePullRequestCondition_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the pull request condition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requiredApprovals": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "targetMatcher": {
                    "type": "object",
                    "properties": {
                      "displayId": {
                        "type": "string",
                        "example": "main"
                      },
                      "id": {
                        "type": "string",
                        "example": "refs/heads/main"
                      },
                      "type": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Branch"
                          },
                          "id": {
                            "type": "string",
                            "enum": [
                              "ANY_REF",
                              "BRANCH",
                              "PATTERN",
                              "MODEL_CATEGORY",
                              "MODEL_BRANCH"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "reviewers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RestApplicationUser"
                    }
                  },
                  "sourceMatcher": {
                    "type": "object",
                    "properties": {
                      "displayId": {
                        "type": "string",
                        "example": "main"
                      },
                      "id": {
                        "type": "string",
                        "example": "refs/heads/main"
                      },
                      "type": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Branch"
                          },
                          "id": {
                            "type": "string",
                            "enum": [
                              "ANY_REF",
                              "BRANCH",
                              "PATTERN",
                              "MODEL_CATEGORY",
                              "MODEL_BRANCH"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated default reviewer pull request condition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestCondition"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Delete a default reviewer condition",
        "description": "Delete the default reviewer pull request condition associated with the given ID.",
        "operationId": "deletePullRequestCondition_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the pull request condition was deleted"
          },
          "404": {
            "description": "An empty response indicating a pull request condition with the given ID could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/conditions": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get configured default reviewers",
        "description": "Return a page of default reviewer pull request conditions that have been configured for this repository.",
        "operationId": "getPullRequestConditions_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The default reviewer pull request conditions associated with the given repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestPullRequestCondition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/reviewers": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get required reviewers for PR creation",
        "description": "Return a set of users who are required reviewers for pull requests created from the given source repository and ref to the given target ref in this repository.",
        "operationId": "getReviewers",
        "parameters": [
          {
            "name": "targetRepoId",
            "in": "query",
            "description": "The ID of the repository in which the target ref exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceRepoId",
            "in": "query",
            "description": "The ID of the repository in which the source ref exists",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceRefId",
            "in": "query",
            "description": "The ID of the source ref",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetRefId",
            "in": "query",
            "description": "The ID of the target ref",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The default reviewer pull request conditions associated with the given repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestPullRequestCondition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrors"
                }
              }
            }
          }
        }
      }
    },
    "/git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Check PR rebase precondition",
        "description": "Checks preconditions to determine whether the pull request can be rebased.\n\nSome of the preconditions are:\n\n- The pull request is between Git repositories\n- The pull request is currently open\n- The pull request's {@link PullRequest#getFromRef \"from\" ref} is a <i>branch</i>\n   - In other words, the qualified ID for the \"from\" ref must start with <code>refs/heads/</code>\n   - Tags, and other non-standard refs, cannot be rebased\n- The current user has an e-mail address\n   - Pull requests cannot be rebased anonymously\n   - `git rebase` records the current user as the committer for the rebased commits, which        requires a name and e-mail address\n- The current user has <i>write</i> access to the {@link PullRequest#getFromRef \"from\" ref}'s repository\n   - Note that in order to <i>view</i> a pull request a user is only required to have <i>read</i>      access to the {@link PullRequest#getToRef toRef}'s repository, so just because a user can <i>see</i>      a pull request does not mean they can request a rebase\n\n\nThis list is not exhaustive, and the exact set of preconditions applied can be extended by third-party add-ons.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "canRebase",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rebaseability status of the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestRebaseability"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Rebase pull request",
        "description": "Rebases the specified pull request, rewriting the incoming commits to start from the tip commit of the pull request's target branch. <i>This operation alters the pull request's source branch and cannot be undone.</i>\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets <i>and</i> <strong>REPO_WRITE</strong> permission for the pull request's source repository to call this resource.",
        "operationId": "rebase",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The pull request rebase request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestRebaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The merged pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestRebaseResult"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request and/or to update its source branch.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Any of the following error cases occurred (check the error message for more details):\n\n- The rebase encountered conflicts.\n- The rebase discarded all of the incoming commits and would have left the pull request empty\n- A <tt>PreRepositoryHook</tt> vetoed the rebase.\n- The specified version is out of date.\n- The specified pull request is not open.\n- The target repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/git/latest/projects/{projectKey}/repos/{repositorySlug}/tags": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Create tag",
        "description": "Creates a tag in the specified repository.\n\nThe authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource.\n\n'LIGHTWEIGHT' and 'ANNOTATED' are the two type of tags that can be created. The 'startPoint' can either be a ref or a 'commit'.",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The create git tag request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestGitTagCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A JSON representation of the newly created tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestTag"
                }
              }
            }
          },
          "400": {
            "description": "The tag was not created because the request was invalid, e.g. the provided ref name already existed in the repository, or was not a valid ref name in the repository, or the start point is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a tag. This could be due to insufficient repository permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/git/latest/projects/{projectKey}/repos/{repositorySlug}/tags/{name}": {
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete tag",
        "description": "Deletes a tag in the specified repository.\n\nThe authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource.",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the tag to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the tag no longer exists in the repository."
          },
          "400": {
            "description": "The tag was not deleted because repository is either empty, or is not a git repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete a tag. This could be due to insufficient repository permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If the tag doesn't exist in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch-permissions/latest/projects/{projectKey}/repos/{repositorySlug}/restrictions": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Search for ref restrictions",
        "description": "Search for restrictions using the supplied parameters.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.",
        "operationId": "getRestrictions_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matcherType",
            "in": "query",
            "description": "Matcher type to filter on",
            "schema": {
              "type": "string",
              "enum": [
                "BRANCH",
                "PATTERN",
                "MODEL_CATEGORY",
                "MODEL_BRANCH"
              ]
            }
          },
          {
            "name": "matcherId",
            "in": "query",
            "description": "Matcher id to filter on. Requires the matcherType parameter to be specified also.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Types of restrictions to filter on.",
            "schema": {
              "type": "string",
              "enum": [
                "read-only",
                "no-deletes",
                "fast-forward-only",
                "pull-request-only"
              ]
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing a page of restrictions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRefRestriction"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get restrictions on the provided project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No restriction exists for the provided ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Create multiple ref restrictions",
        "description": "Allows creating multiple restrictions at once.",
        "operationId": "createRestrictions_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing a list of the details of the restrictions to create.",
          "content": {
            "application/vnd.atl.bitbucket.bulk+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestRestrictionRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response contains the ref restriction that was just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRefRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to perform this operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch-permissions/latest/projects/{projectKey}/repos/{repositorySlug}/restrictions/{id}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get a ref restriction",
        "description": "Returns a restriction as specified by a restriction id. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.",
        "operationId": "getRestriction_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The restriction id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing the restriction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRefRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get restrictions on the provided project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No restriction exists for the provided ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete a ref restriction",
        "description": "Deletes a restriction as specified by a restriction id.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.",
        "operationId": "deleteRestriction_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The restriction id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the operation was successful"
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to delete restrictions on the provided project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch-permissions/latest/projects/{projectKey}/restrictions": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Search for ref restrictions",
        "description": "Search for restrictions using the supplied parameters.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.",
        "operationId": "getRestrictions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matcherType",
            "in": "query",
            "description": "Matcher type to filter on",
            "schema": {
              "type": "string",
              "enum": [
                "BRANCH",
                "PATTERN",
                "MODEL_CATEGORY",
                "MODEL_BRANCH"
              ]
            }
          },
          {
            "name": "matcherId",
            "in": "query",
            "description": "Matcher id to filter on. Requires the matcherType parameter to be specified also.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Types of restrictions to filter on.",
            "schema": {
              "type": "string",
              "enum": [
                "read-only",
                "no-deletes",
                "fast-forward-only",
                "pull-request-only"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing a page of restrictions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRefRestriction"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get restrictions on the provided project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No restriction exists for the provided ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create multiple ref restrictions",
        "description": "Allows creating multiple restrictions at once.",
        "operationId": "createRestrictions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing a list of the details of the restrictions to create.",
          "content": {
            "application/vnd.atl.bitbucket.bulk+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestRestrictionRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response contains the ref restriction that was just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRefRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to perform this operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branch-permissions/latest/projects/{projectKey}/restrictions/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a ref restriction",
        "description": "Returns a restriction as specified by a restriction id.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.",
        "operationId": "getRestriction",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The restriction id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response containing the restriction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRefRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to get restrictions on the provided project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No restriction exists for the provided ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a ref restriction",
        "description": "Deletes a restriction as specified by a restriction id.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.",
        "operationId": "deleteRestriction",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The restriction id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the operation was successful"
          },
          "400": {
            "description": "The request has failed validation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not permitted to delete restrictions on the provided project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sync/latest/projects/{projectKey}/repos/{repositorySlug}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get synchronization status",
        "description": "Retrieves the synchronization status for the specified repository. In addition to listing refs which cannot be synchronized, if any, the status also provides the timestamp for the most recent synchronization and indicates whether synchronization is available and enabled. If \"?at\" is specified in the URL, the synchronization status for the specified ref is returned, rather than the complete repository status.\n\nThe authenticated user must have <b>REPO_READ</b> permission for the repository, or it must be public if the request is anonymous. Additionally, after synchronization is enabled for a repository, meaning synchronization was available at that time, permission changes and other actions can cause it to become unavailable. Even when synchronization is enabled, if it is no longer available for the repository it will not be performed.",
        "operationId": "getStatus",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "Retrieves the synchronization status for the specified ref within the repository, rather than for the entire repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Synchronization status for the specified repository, or specific ref within that repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRefSyncStatus"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository, or the repository is not public if the request is anonymous.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Disable synchronization",
        "description": "Enables or disables synchronization for the specified repository. When synchronization is enabled, branches within the repository are immediately synchronized and the status is updated with the outcome. That initial synchronization is performed before the REST request returns, allowing it to return the updated status.\n\nThe authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository. Anonymous users cannot manage synchronization, even on public repositories. Additionally, synchronization must be available for the specified repository. Synchronization is only available if:\n\n- The repository is a fork, since its origin is used as upstream\n- The owning user still has access to the fork's origin,  if the repository is a <i>personalfork</i>",
        "operationId": "setEnabled",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRefSyncStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated synchronization status for the repository, after enabling synchronization. 204 NO CONTENT is returned instead after disabling synchronization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRefSyncStatus"
                }
              }
            }
          },
          "204": {
            "description": "Synchronization has successfully been disabled. 200 OK, with updated status information, is returned instead after enabling synchronization."
          },
          "400": {
            "description": "The JSON payload for the request did not define the \"enabled\" property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to manage synchronization in the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sync/latest/projects/{projectKey}/repos/{repositorySlug}/synchronize": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Manual synchronization",
        "description": "Allows developers to apply a manual operation to bring a ref back in sync with upstream when it becomes out of sync due to conflicting changes. The following actions are supported:\n\n- <tt>MERGE</tt>: Merges in commits from the upstream ref. After applying this action, the   synchronized ref will be <tt>AHEAD</tt> (as it still includes commits that do not exist   upstream.\n   - This action is only supported for <tt>DIVERGED</tt> refs\n   - If a \"commitMessage\" is provided in the context, it will be used on the merge commit.      Otherwise a default message is used.\n- <tt>DISCARD</tt>: <i>Throws away</i> local changes in favour of those made upstream. This is a   <i>destructive</i> operation where commits in the local repository are lost.\n   - No context entries are supported for this action\n   - If the upstream ref has been deleted, the local ref is deleted as well\n   - Otherwise, the local ref is updated to reference the same commit as upstream, even if      the update is not fast-forward (similar to a forced push)\n\n\nThe authenticated user must have <b>REPO_WRITE</b> permission for the specified repository. Anonymous users cannot synchronize refs, even on public repositories. Additionally, synchronization must be <i>enabled</i> and <i>available</i> for the specified repository.",
        "operationId": "synchronize",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRefSyncRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested action was successfully performed, and has updated the ref's state, but the ref if is still not in sync with upstream. For example, after applying the <tt>MERGE</tt> action, the ref will still be <tt>AHEAD</tt> of upstream. If the action brings the ref in sync with upstream, 204 NO CONTENT is returned instead.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRejectedRef"
                }
              }
            }
          },
          "204": {
            "description": "The requested action was successfully performed and the ref is now in sync with upstream. If the action updates the ref but does not bring it in sync with upstream, 200 OK is returned instead."
          },
          "400": {
            "description": "The requested synchronization action was not understood.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update refs within the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Synchronization is not available or enabled for the specified repository, or the ref is already in sync with upstream.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "The requested synchronization action was understood by the server, but the mechanism to apply it has not been implemented.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}/reactions/{emoticon}": {
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "React to a comment",
        "description": "Add an emoticon reaction to a comment",
        "operationId": "react",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The commit id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoticon",
            "in": "path",
            "description": "The emoticon to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The added reaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestUserReaction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Remove a reaction from comment",
        "description": "Remove an emoticon reaction from a comment",
        "operationId": "unReact",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The commit id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoticon",
            "in": "path",
            "description": "The emoticon to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The added reaction"
          }
        }
      }
    },
    "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}": {
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "React to a PR comment",
        "description": "Add an emoticon reaction to a pull request comment",
        "operationId": "react_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoticon",
            "in": "path",
            "description": "The emoticon to add",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The added reaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestUserReaction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Remove a reaction from a PR comment",
        "description": "Remove an emoticon reaction from a pull request comment",
        "operationId": "unReact_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The comment id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emoticon",
            "in": "path",
            "description": "The emoticon to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The added reaction"
          }
        }
      }
    },
    "/ssh/latest/keys/{keyId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get SSH key for user by keyId",
        "description": "Retrieve an SSH key by keyId",
        "operationId": "getSshKey",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "the ID of the key to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An SSH key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshKey"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissionsto retrieve the SSH key. This is only possible when a<strong>keyId</strong> is explicitly supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No SSH key matches the supplied <strong>keyId</strong>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Remove SSH key",
        "description": "Delete an SSH key.",
        "operationId": "deleteSshKey",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "the id of the key to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The SSH key matching the supplied <strong>id</strong> was deleted or did not exist."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the SSH key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ssh/latest/keys": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get SSH keys for user",
        "description": "Retrieve a page of SSH keys.",
        "operationId": "getSshKeys",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "description": "the username of the user to retrieve the keys for. If no username is specified, the SSH keys will be retrieved for the current authenticated user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of SSH keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestSshKey"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissionsto retrieve the SSH keys. This is only possible when a<strong>user</strong> is explicitly supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user matches the supplied <strong>user</strong>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Add SSH key for user",
        "description": "Add a new SSH key to a supplied user.",
        "operationId": "addSshKey",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "the username of the user to add the SSH key for. If no username is specified, the SSH key will be added for the current authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshKey"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "algorithmType": {
                    "type": "string"
                  },
                  "bitLength": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "createdDate": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true
                  },
                  "expiryDays": {
                    "type": "integer",
                    "format": "int32",
                    "example": 30
                  },
                  "fingerprint": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 1
                  },
                  "label": {
                    "type": "string",
                    "example": "me@127.0.0.1"
                  },
                  "lastAuthenticated": {
                    "type": "string",
                    "readOnly": true,
                    "example": "1630041546434"
                  },
                  "text": {
                    "type": "string",
                    "example": "ssh-rsa AAAAB3... me@127.0.0.1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created SSH key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshKey"
                }
              }
            }
          },
          "400": {
            "description": "The SSH key was not created because the key was not a valid RSA/DSA/ECDSA/Ed25519 key of a supported length.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Either there is no authenticated user or the currently authenticated user has insufficient permissions to add an SSH key. The latter is only possible when a <strong>user</strong> is explicitly supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user matches the supplied <strong>user</strong>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The SSH key already exists on the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete all user SSH key",
        "description": "Delete all SSH keys for a supplied user.",
        "operationId": "deleteSshKeys",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "description": "the username of the user to delete the keys for. If no username is specified, the SSH keys will be deleted for the current authenticated user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The SSH keys matching the supplied <strong>user</strong> were deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the SSH keys. This is only possible when a <strong>user</strong> is explicitly supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user matches the supplied <strong>user</strong>",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/projects/{projectKey}/ssh": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get SSH key",
        "description": "Retrieves the access keys for the project identified in the URL.",
        "operationId": "getSshKeysForProject",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "If specified only SSH access keys with a label prefixed with the supplied string will be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "If specified only SSH access keys with at least the supplied permission will be returned Default is PROJECT_READ.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A single page of access keys associated with the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestSshAccessKey"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the access keys for this project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Add project SSH key",
        "description": "Register a new SSH key and grants access to the project identified in the URL.",
        "operationId": "addForProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestSshAccessKey"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created access key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshAccessKey"
                }
              }
            }
          },
          "400": {
            "description": "The current request contains invalid or missing values.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to add an access key to the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get repository SSH keys",
        "description": "Retrieves the access keys for the repository identified in the URL.",
        "operationId": "getForRepository",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "If specified only SSH access keys with a label prefixed with the supplied string will be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effective",
            "in": "query",
            "description": "Controls whether SSH access keys configured at the project level should be included in the results or not. When set to <code>true</code> all keys that have <em>access</em> to the repository (including project level keys) are included in the results. When set to <code>false</code>, only access keys configured for the specified <code>repository</code> are considered. Default is <code>false</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minimumPermission",
            "in": "query",
            "description": "If specified only SSH access keys with at least the supplied permission will be returned. Default is <code>Permission.REPO_READ</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A single page of access keys for the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestSshAccessKey"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the access keys for this repository",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Add repository SSH key",
        "description": "Register a new SSH key and grants access to the repository identified in the URL.",
        "operationId": "addForRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestSshAccessKey"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created access key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshAccessKey"
                }
              }
            }
          },
          "400": {
            "description": "The current request contains invalid or missing values.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to add an access key to the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh/{keyId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get repository SSH key",
        "description": "Retrieves the access key for the SSH key with id <code>keyId</code> on the repository identified in the URL.",
        "operationId": "getForRepository_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "The key id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The access key for the repository and SSH key with ID <code>keyId</code>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshAccessKey"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the access keys for this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or key does not exist or the key does not have access on the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke repository SSH key",
        "description": "Remove an existing access key for the repository identified in the URL. If the same SSH key is used as an access key for multiple projects or repositories, only the access to the repository identified in the URL will be revoked.",
        "operationId": "revokeForRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "The key id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The access key was deleted (or none was found matching the given id)."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to remove access keys for this repository",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/ssh/{keyId}": {
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke project SSH key",
        "description": "Remove an existing access key for the projects and repositories in the submitted entity. If the same SSH key is used as an access key for multiple projects or repositories not supplied, only the access to the projects or repositories identified will be revoked.",
        "operationId": "revokeMany",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "The identifier of the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projects": {
                    "$ref": "#/components/schemas/RestProject"
                  },
                  "repositories": {
                    "$ref": "#/components/schemas/RestRepository"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The access keys were deleted (or none was found matching the given id and repositories or projects)."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to remove access keys for one or more of the specified projects or repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "On or more of the specified repositories or projects does not exist or the key itself does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/projects/{projectKey}/ssh/{keyId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get project SSH key",
        "description": "Retrieves the access key for the SSH key with id <code>keyId</code> on the project identified in the URL.",
        "operationId": "getForProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "The key id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The access key for the repository and SSH key with ID <code>keyId</code>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshAccessKey"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the access keys for this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or key does not exist or the key does not have access on the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke project SSH key",
        "description": "Remove an existing access key for the project identified in the URL. If the same SSH key is used as an access key for multiple projects or repositories, only the access to the project identified in the URL will be revoked.",
        "operationId": "revokeForProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "The key id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The access key was deleted (or none was found matching the given id)."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to remove access keys for this project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/ssh/{keyId}/projects": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get project SSH keys",
        "description": "Retrieves all project-related access keys for the SSH key with id <code>keyId</code>. If the current user is not an admin any of the projects the key provides access to, none are returned.",
        "operationId": "getForProjects",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The SSH key with ID <code>keyId</code>.",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The specified key does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/ssh/{keyId}/repos": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get repository SSH key",
        "description": "Retrieves all repository-related access keys for the SSH key with id <code>keyId</code>. If the current user is not an admin of any of the projects the key provides access to, none are returned.",
        "operationId": "getForRepositories",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "The key id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withRestrictions",
            "in": "query",
            "description": "Include the readOnly field. The `readOnly` field is contextual for the user making the request. `readOnly` returns true if there is a restriction and the user does not have`PROJECT_ADMIN` access for the repository the key is associated with.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The SSH key with ID <code>keyId</code>.",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "The specified key does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/projects/{projectKey}/ssh/{keyId}/permission/{permission}": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update project SSH key permission",
        "description": "Updates the permission granted to the specified SSH key to the project identified in the URL.",
        "operationId": "updatePermission",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "The newly created access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The new permission to be granted to the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created access key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshAccessKey"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions on the project to edit its access keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh/{keyId}/permission/{permission}": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update repository SSH key permission",
        "description": "Updates the permission granted to the specified SSH key to the repository identified in the URL.",
        "operationId": "updatePermission_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyId",
            "in": "path",
            "description": "The newly created access key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The new permission to be granted to the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created access key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshAccessKey"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions on the repository to edit its access keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ssh/latest/settings": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get SSH settings",
        "description": "Gets the SSH settings from the upstream.",
        "operationId": "sshSettings",
        "responses": {
          "200": {
            "description": "The ssh settings from upstream",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSshSettings"
                }
              }
            }
          },
          "401": {
            "description": "The request was not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/admin/pull-requests/{scmId}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get merge strategies",
        "description": "Retrieve the merge strategies available for this instance. \n\nThe user must be authenticated to call this resource.",
        "operationId": "getMergeConfig",
        "parameters": [
          {
            "name": "scmId",
            "in": "path",
            "description": "the id of the scm to get strategies for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The merge configuration of this instance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestMergeConfig"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request repository does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update merge strategies",
        "description": "Update the pull request merge strategies for the context repository. \n\nThe authenticated user must have <strong>ADMIN</strong> permission to call this resource. \n\nOnly the strategies provided will be enabled, only one may be set to default \n\nThe commit message template will not be updated if not provided, and will be deleted if the `commitMessageTemplate` attribute is empty, i.e: `commitMessageTemplate: {}`.\n\nAn explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty `mergeConfig` attribute. i.e:\n```\n{ \n    \"mergeConfig\": {} \n} \n```\n\nUpon completion of this request, the effective configuration will be the default configuration.",
        "operationId": "setMergeConfig",
        "parameters": [
          {
            "name": "scmId",
            "in": "path",
            "description": "the id of the scm to get strategies for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "the settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The repository pull request merge strategies for the context repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestMergeConfig"
                }
              }
            }
          },
          "400": {
            "description": "The repository pull request merge strategies were not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to administrate thespecified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Setting or deleting merge configurations isn't supported on archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/hooks/{hookKey}/avatar": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get project avatar",
        "description": "Retrieve the avatar for the project matching the supplied <strong>moduleKey</strong>.",
        "operationId": "getAvatar",
        "parameters": [
          {
            "name": "hookKey",
            "in": "path",
            "description": "The complete module key of the hook module.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "(optional) Version used for HTTP caching only - any non-blank version will result in a large max-age Cache-Control header. Note that this does not affect the Last-Modified header.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The avatar of the project matching the supplied <strong>moduleKey</strong>.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/profile/recent/repos": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get recently accessed repositories",
        "description": "Retrieve a page of recently accessed repositories for the currently authenticated user. \n\nRepositories are ordered from most recently to least recently accessed. <p>Only authenticated users may call this resource.",
        "operationId": "getRepositoriesRecentlyAccessed",
        "parameters": [
          {
            "name": "permission",
            "in": "query",
            "description": "(optional) If specified, it must be a valid repository permission level name and will limit the resulting repository list to ones that the requesting user has the specified permission level to. If not specified, the default <code>REPO_READ</code> permission level will be assumed.",
            "schema": {
              "type": "string",
              "default": "REPO_READ"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of recently accessed repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepository"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The permission level is unknown or not related to repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get projects",
        "description": "Retrieve a page of projects. \n\nOnly projects for which the authenticated user has the <strong>PROJECT_VIEW</strong> permission will be returned.",
        "operationId": "getProjects",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "Permission to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of projects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestProject"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The permission level is unknown or not related to projects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new project",
        "description": "Create a new project. \n\nTo include a custom avatar for the project, the project definition should contain an additional attribute with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in the following format: <pre>    data:(content type, e.g. image/png);base64,(data) </pre>If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid, <em>project creation will fail</em>. \n\nThe authenticated user must have <strong>PROJECT_CREATE</strong> permission to call this resource.",
        "operationId": "createProject",
        "requestBody": {
          "description": "The project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestProject"
                }
              }
            }
          },
          "400": {
            "description": "The currently authenticated user has insufficient permissions to update the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The project key or name is already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a project",
        "description": "Retrieve the project matching the supplied <strong>projectKey</strong>. \n\nThe authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this resource.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project matching the supplied <strong>projectKey</strong>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestProject"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update project",
        "description": "Update the project matching the <strong>projectKey</strong> supplied in the resource path. \n\nTo include a custom avatar for the updated project, the project definition should contain an additional attribute with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in the following format: \n```    data:(content type, e.g. image/png);base64,(data)```\n\nIf the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid, <em>project creation will fail</em>. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project parameters to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated project. The project's key <strong>was not</strong> updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestProject"
                }
              }
            }
          },
          "201": {
            "description": "The updated project. The project's key <strong>was</strong> updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestProject"
                }
              }
            }
          },
          "400": {
            "description": "The project was not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete project",
        "description": "Delete the project matching the supplied <strong>projectKey</strong>. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The project matching the supplied <strong>projectKey</strong> was deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The project can not be deleted as it contains repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/avatar.png": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get avatar for project",
        "description": "Retrieve the avatar for the project matching the supplied <strong>projectKey</strong>. \n\nThe authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this resource.",
        "operationId": "getProjectAvatar",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "s",
            "in": "query",
            "description": "The desired size of the image. The server will return an image as close as possible to the specified size.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The avatar of the project matching the supplied <strong>projectKey</strong>.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update project avatar",
        "description": "Update the avatar for the project matching the supplied <strong>projectKey</strong>. \n\nThis resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'. \n\nThere are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and <strong>JPEG</strong> are preferred due to the file size limit. \n\nThis resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the value <code>no-check</code>. \n\nAn example <a href=\"http://curl.haxx.se/\">curl</a> request to upload an image name 'avatar.png' would be: ```curl -X POST -u username:password -H \"X-Atlassian-Token: no-check\" http://example.com/rest/api/1.0/projects/STASH/avatar.png -F avatar=@avatar.png ```\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "uploadAvatar",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The mutlipart form data containing the file.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExampleAvatarMultipartFormData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The avatar was uploaded successfully.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/hook-scripts": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get configured hook scripts",
        "description": "Return a page of hook scripts configured for the specified project. \n\nThis endpoint requires **PROJECT_ADMIN** permission.",
        "operationId": "getConfigurations",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of hook scripts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestHookScriptConfig"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/hook-scripts/{scriptId}": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Create/update a hook script",
        "description": "Creates/updates the hook script configuration for the provided hook script and project. \n\nThis endpoint requires **PROJECT_ADMIN** permission.",
        "operationId": "setConfiguration",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The ID of the hook script",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The hook triggers for which the hook script should be run",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestHookScriptTriggers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated hook script.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHookScriptConfig"
                }
              }
            }
          },
          "400": {
            "description": "The hook script was not created/updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project key supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Remove a hook script",
        "description": "Removes the hook script from the set of hook scripts configured to run in all repositories under the project. \n\nThis endpoint requires **PROJECT_ADMIN** permission.",
        "operationId": "removeConfiguration",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The ID of the hook script",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The hook script was successfully deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project key or hook script ID supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Revoke project permissions",
        "description": "Revoke all permissions for the specified project for the given groups and users.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.\n\nIn addition, a user may not revoke a group's permission if their own permission would be revoked as a result, nor may they revoke their own permission unless they have a global permission that already implies that permission.",
        "operationId": "revokePermissions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The names of the users",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The names of the groups",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All project permissions were revoked from the users and groups for the specified project."
          },
          "400": {
            "description": "No permissions were revoked because the request was invalid. No users or groups were provided.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specifiedspecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist, or one or more of the users or groups provided does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The action was disallowed as it would revoke the currently authenticated user's permission on the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions/groups": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get groups with permission to project",
        "description": "Retrieve a page of groups that have been granted at least one permission for the specified project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.",
        "operationId": "getGroupsWithAnyPermission_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "If specified only group names containing the supplied string will be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of groups and their highest permissions for the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestPermittedGroup"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not a project administrator for the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update group project permission",
        "description": "Promote or demote a group's permission level for the specified project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource. In addition, a user may not demote a group's permission level if theirown permission level would be reduced as a result.",
        "operationId": "setPermissionForGroups_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The names of the groups",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "The permission to grant.See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. Available project permissions are:\n\n- PROJECT_READ\n- PROJECT_WRITE\n- PROJECT_ADMIN\n\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The requested permission was granted."
          },
          "400": {
            "description": "The request was malformed or the specified permission does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specifiedspecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The action was disallowed as it would reduce the currently authenticated user'spermission level.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Revoke group project permission",
        "description": " Revoke all permissions for the specified project for a group.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.\n\nIn addition, a user may not revoke a group's permissions if it will reduce their own permission level.",
        "operationId": "revokePermissionsForGroup_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the group",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All project permissions were revoked from the group for the specified project."
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specifiedspecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": " The action was disallowed as it would reduce the currently authenticated user'spermission level.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions/groups/none": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get groups without project permission",
        "description": "Retrieve a page of groups that have no granted permissions for the specified project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher",
        "operationId": "getGroupsWithoutAnyPermission_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "If specified only group names containing the supplied string will be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "202": {
            "description": "A page of groups that have not been granted any permissions for the specifiedproject.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestDetailedGroup"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not a project administrator for thespecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions/search": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Search project permissions",
        "description": "Search direct and implied permissions of principals (users and groups). This endpoint returns a superset of the results returned by the /users and /groups endpoints because it allows filtering by global permissions too.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.",
        "operationId": "searchPermissions",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "Permissions to filter by. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. This parameter can be specified multiple times to filter by more than one permission, and can contain global and project permissions.\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "Name of the user or group to filter the name of",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of entity (user or group)Valid entity types are:\n\n- USER- GROUP",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json;charset=UTF-8": {}
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions/users": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get users with permission to project",
        "description": "Retrieve a page of users that have been granted at least one permission for the specified project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.",
        "operationId": "getUsersWithAnyPermission_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "If specified only user names containing the supplied string will be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of users and their highest permissions for the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestPermittedUser"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not a project administrator for thespecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update user project permission",
        "description": "Promote or demote a user's permission level for the specified project.\n\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource. In addition, a user may not reduce their own permission level unless they have a global permission that already implies that permission.",
        "operationId": "setPermissionForUsers_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The names of the users",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "The permission to grant.See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. Available project permissions are:\n\n- PROJECT_READ\n- PROJECT_WRITE\n- PROJECT_ADMIN\n\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The requested permission was granted."
          },
          "400": {
            "description": "The request was malformed or the specified permission does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specifiedspecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The action was disallowed as it would reduce the currently authenticated user'spermission level.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Revoke user project permission",
        "description": "Revoke all permissions for the specified project for a user.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.\n\nIn addition, a user may not revoke their own project permissions if they do not have a higher global permission.",
        "operationId": "revokePermissionsForUser_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All project permissions were revoked from the user for the specified project."
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specifiedspecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": " The action was disallowed as it would reduce the currently authenticated user'spermission level.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions/users/none": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get users without project permission",
        "description": "Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.",
        "operationId": "getUsersWithoutPermission",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "If specified only user names containing the supplied string will be returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of users that have not been granted any permissions for the specified project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestApplicationUser"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not a project administrator for thespecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/permissions/{permission}/all": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Check default project permission",
        "description": "Check whether the specified permission is the default permission (granted to all users) for a project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.",
        "operationId": "hasAllUserPermission",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to grant. Available project permissions are:\n\n- PROJECT_READ\n- PROJECT_WRITE\n- PROJECT_ADMIN\n\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A simple entity indicating whether the specified permission is the defaultpermission for this project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPermitted"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed or the specified permission does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specifiedspecified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The action was disallowed as it would reduce the currently authenticated user'spermission level.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Grant project permission",
        "description": "Grant or revoke a project permission to all users, i.e. set the default permission.\n\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher\nglobal permission to call this resource.",
        "operationId": "modifyAllUserPermission",
        "parameters": [
          {
            "name": "allow",
            "in": "query",
            "description": "<em>true</em> to grant the specified permission to all users, or <em>false</em> to revoke it",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "path",
            "description": "The permission to grant. Available project permissions are:\n\n- PROJECT_READ\n- PROJECT_WRITE\n- PROJECT_ADMIN\n\n\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The requested permission was successfully granted or revoked."
          },
          "400": {
            "description": "The request was malformed or the specified permission does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user is not an administrator for the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repositories for project",
        "description": "Retrieve repositories from the project corresponding to the supplied <strong>projectKey</strong>. \n\nThe authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.",
        "operationId": "getRepositories",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "The repositories matching the supplied <strong>projectKey</strong>.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepository"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create repository",
        "description": "Create a new repository. Requires an existing project in which this repository will be created. The only parameters which will be used are name and scmId. \n\nThe authenticated user must have <strong>REPO_CREATE</strong> permission or higher, for the context project to call this resource.",
        "operationId": "createRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The repository",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRepository"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepository"
                }
              }
            }
          },
          "400": {
            "description": "The repository was not created due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A repository with same name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository",
        "description": "Retrieve the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository which matches the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepository"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update repository",
        "description": "Update the repository matching the <strong>repositorySlug</strong> supplied in the resource path. \n\nThe repository's slug is derived from its name. If the name changes the slug may also change. \n\nThis resource can be used to change the repository's default branch by specifying a new default branch in the request. For example: <code>\"defaultBranch\":\"main\"</code>\n\nThis resource can be used to move the repository to a different project by specifying a new project in the request. For example: <code>\"project\":{\"key\":\"NEW_KEY\"}</code>\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "updateRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated repository.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRepository"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The updated repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepository"
                }
              }
            }
          },
          "400": {
            "description": "The repository was not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update a repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Cannot archive repository because it has open pull requests.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A repository with the same name as the target already exists, or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Fork repository",
        "description": "Create a new repository forked from an existing repository. \n\nThe JSON body for this <code>POST</code> is not required to contain <i>any</i> properties. Even the name may be omitted. The following properties will be used, if provided: \n\n- <code>\"name\":\"Fork name\"</code> - Specifies the forked repository's name \n  - Defaults to the name of the origin repository if not specified\n- <code>\"defaultBranch\":\"main\"</code> - Specifies the forked repository's default branch\n  - Defaults to the origin repository's default branch if not specified\n- <code>\"project\":{\"key\":\"TARGET_KEY\"}</code> - Specifies the forked repository's target project by key\n  - Defaults to the current user's personal project if not specified\n\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository and <strong>PROJECT_ADMIN</strong> on the target project to call this resource. Note that users <i>always</i> have <b>PROJECT_ADMIN</b> permission on their personal projects.",
        "operationId": "forkRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The rest fork.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRepository"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created fork.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepository"
                }
              }
            }
          },
          "400": {
            "description": "A validation error prevented the fork from being created. Possible validation errors include: The name or slug for the fork collides with another repository in the target project; an SCM type was specified in the JSON body; a project was specified in the JSON body without a \"key\" property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a fork.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist, or, if a target project was specified, the target project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete repository",
        "description": "Schedule the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> to be deleted. \n\nThe authenticated user must have sufficient permissions specified by the repository delete policy to call this resource. The default permission required is <strong>REPO_ADMIN</strong> permission.",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The repository has been scheduled for deletion.",
            "content": {
              "application/json": {}
            }
          },
          "204": {
            "description": "No repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> was found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/archive": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Stream archive of repository",
        "description": "Streams an archive of the repository's contents at the requested commit. If no `at=` commit is requested, an archive of the default branch is streamed.\n\nThe <code>filename=</code> query parameter may be used to specify the exact filename to include in the \"Content-Disposition\" header. If an explicit filename is not provided, one will be automatically generated based on what is being archived. Its format depends on the at= value: \n\n- No <code>at=</code> commit:     &lt;slug&gt;-&lt;default-branch-name&gt;@&lt;commit&gt;.&lt;format&gt;;     e.g. example-master@43c2f8a0fe8.zip\n- <code>at=</code>sha: &lt;slug&gt;-&lt;at&gt;.&lt;format&gt;; e.g.     example-09bcbb00100cfbb5310fb6834a1d5ce6cac253e9.tar.gz\n- <code>at=</code>branchOrTag: &lt;slug&gt;-&lt;branchOrTag&gt;@&lt;commit&gt;.&lt;format&gt;;     e.g. example-feature@bbb225f16e1.tar \n\n    - If the branch or tag is qualified (e.g. refs/heads/master, the short name         (master) will be included in the filename\n    - If the branch or tag's <i>short name</i> includes slashes (e.g. release/4.6),         they will be converted to hyphens in the filename (release-4.5)\n\n\n\n\nArchives may be requested in the following formats by adding the <code>format=</code> query parameter: \n\n- zip: A zip file using standard compression (Default)\n- tar: An uncompressed tarball\n- tar.gz or tgz: A GZip-compressed tarball\n\n\nThe contents of the archive may be filtered by using the <code>path=</code> query parameter to specify paths to include. <code>path=</code> may be specified multiple times to include multiple paths. \n\nThe <code>prefix=</code> query parameter may be used to define a directory (or multiple directories) where the archive's contents should be placed. If the prefix does not end with /, one will be added automatically. The prefix is <i>always</i> treated as a directory; it is not possible to use it to prepend characters to the entries in the archive. \n\nArchives of public repositories may be streamed by any authenticated or anonymous user. Streaming archives for non-public repositories requires an <i>authenticated user</i> with at least <b>REPO_READ</b> permission.",
        "operationId": "getArchive",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Paths to include in the streamed archive; may be repeated to include multiple paths",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "A filename to include the \"Content-Disposition\" header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit to stream an archive of; if not supplied, an archive of the default branch is streamed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "in": "query",
            "description": "A prefix to apply to all entries in the streamed archive; if the supplied prefix does not end with a trailing /, one will be added automatically",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format to stream the archive in; must be one of: zip, tar, tar.gz or tgz",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An archive or the requested commit, in zip, tar or gzipped-tar format.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The requested format is not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist or does not contain the at commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get an attachment",
        "description": "Retrieve the attachment.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment.\n\nRange requests (see IETF RFC7233) are supported. However only a single range issupported. If multiple ranges are passed the ranges will be ignored and the entire content will be returned in the response.",
        "operationId": "getAttachment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the attachment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the attachment",
            "content": {
              "application/json": {}
            }
          },
          "206": {
            "description": "the requested range of bytes from the attachment",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "the user is currently not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The attachment does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete an attachment",
        "description": "Delete an attachment.\n\nThe user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the attachment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the attachment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The attachment does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}/metadata": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get attachment metadata",
        "description": "Retrieve the attachment metadata.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment that has the attachment metadata.",
        "operationId": "getAttachmentMetadata",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the attachment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The attachment metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAttachmentMetadata"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the attachment metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The attachment or the attachment metadata does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Save attachment metadata",
        "description": "Save attachment metadata.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment that has the attachment metadata.",
        "operationId": "saveAttachmentMetadata",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the attachment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The attachment metadata can be any valid JSON content",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "any valid JSON content"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The attachment metadata",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The supplied content is not valid JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to save theattachment metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or the attachment does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete attachment metadata",
        "description": "Delete attachment metadata.\n\nThe user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "deleteAttachmentMetadata",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the attachment ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete theattachment metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The attachment or the attachment metadata does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/branches": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Find branches",
        "description": "Retrieve the branches matching the supplied <strong>filterText</strong> param. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getBranches",
        "parameters": [
          {
            "name": "boostMatches",
            "in": "query",
            "description": "Controls whether exact and prefix matches will be boosted to the top",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)",
            "schema": {
              "type": "string",
              "enum": [
                "ALPHABETICAL",
                "MODIFICATION"
              ]
            }
          },
          {
            "name": "details",
            "in": "query",
            "description": "Whether to retrieve plugin-provided metadata about each branch",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "The text to match on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "base",
            "in": "query",
            "description": "Base branch or tag to compare each branch to (for the metadata providers that uses that information",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "The branches matching the supplied <strong>filterText</strong>.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestBranch"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Create branch",
        "description": "Creates a branch using the information provided in the RestCreateBranchRequest request \n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this resource.",
        "operationId": "createBranchForRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request to create a branch containing a <strong>name</strong>, <strong>startPoint</strong>, and optionally a <strong>message</strong>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestCreateBranchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created branch.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestBranch"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to write to the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/browse": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get file content at revision",
        "description": "Retrieve a page of content for a file path at a specified revision. \n\nResponses from this endpoint vary widely depending on the query parameters. The example JSON is for a request that does not use size, type, blame or noContent. \n\n1. size will return a response like {\"size\":10000}\n2. type will return a response like {\"type\":\"FILE\"}, where possible values are    \"DIRECTORY\", \"FILE\" and \"SUBMODULE\"\n3. blame <i>without</i> noContent will include blame for the lines of    content returned on the page\n4. blame <i>with</i> noContent will omit file contents and only return    blame for the requested lines\n5. noContent without blame is ignored and does nothing\n\n\nThe various parameters are \"processed\" in the above order. That means ?size=true&amp;type=truewill return a size response, not a type one; the type parameter will be ignored. \n\nThe blame and noContent query parameters are handled differently from size and type. For blame and noContent, the <i>presence</i> of the parameter implies \"true\" if no value is specified; size and and type both require an explicit=true or they're treated as \"false\". \n\n- ?blame is the same as ?blame=true\n- ?blame&amp;noContent is the same as ?blame=true&amp;noContent=true\n- ?size is the same as ?size=false\n- ?type is the same as ?type=false\n\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getContent",
        "parameters": [
          {
            "name": "noContent",
            "in": "query",
            "description": "If blame&amp;noContent only the blame is retrieved instead of the contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit ID or ref to retrieve the content for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "If true only the size will be returned for the file path instead of the contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blame",
            "in": "query",
            "description": "If present and not equal to 'false', the blame will be returned for the file as well",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "If true only the type will be returned for the file path instead of the contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of contents from a file.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The path parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/browse/{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get file content",
        "description": "Retrieve a page of content for a file path at a specified revision. \n\nResponses from this endpoint vary widely depending on the query parameters. The example JSON is for a request that does not use size, type, blame or noContent. \n\n1. size will return a response like {\"size\":10000}\n2. type will return a response like {\"type\":\"FILE\"}, where possible values are    \"DIRECTORY\", \"FILE\" and \"SUBMODULE\"\n3. blame <i>without</i> noContent will include blame for the lines of    content returned on the page\n4. blame <i>with</i> noContent will omit file contents and only return    blame for the requested lines\n5. noContent without blame is ignored and does nothing\n\n\nThe various parameters are \"processed\" in the above order. That means ?size=true&amp;type=truewill return a size response, not a type one; the type parameter will be ignored. \n\nThe blame and noContent query parameters are handled differently from size and type. For blame and noContent, the <i>presence</i> of the parameter implies \"true\" if no value is specified; size and and type both require an explicit=true or they're treated as \"false\". \n\n- ?blame is the same as ?blame=true\n- ?blame&amp;noContent is the same as ?blame=true&amp;noContent=true\n- ?size is the same as ?size=false\n- ?type is the same as ?type=false\n\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getContent_1",
        "parameters": [
          {
            "name": "noContent",
            "in": "query",
            "description": "If blame&amp;noContent only the blame is retrieved instead of the contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "The file path to retrieve content from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit ID or ref to retrieve the content for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "If true only the size will be returned for the file path instead of the contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blame",
            "in": "query",
            "description": "If present and not equal to 'false', the blame will be returned for the file as well",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "If true only the type will be returned for the file path instead of the contents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of contents from a file.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The path or until parameters were not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Edit file",
        "description": "Update the content of path, on the given repository and branch. \n\nThis resource accepts PUT multipart form data, containing the file in a form-field named content. \n\nAn example <a href=\"http://curl.haxx.se/\">curl</a> request to update 'README.md' would be:\n\n```curl -X PUT -u username:password -F content=@README.md  -F 'message=Updated using file-edit REST API' -F branch=master -F  sourceCommitId=5636641a50b  http://example.com/rest/api/latest/projects/PROJECT_1/repos/repo_1/browse/README.md ```\n\n- branch:  the branch on which the path should be modified or created\n- content: the full content of the file at path \n- message: the message associated with this change, to be used as the commit message. Or null if the default message should be used.\n- sourceCommitId: the commit ID of the file before it was edited, used to identify if content has changed. Or null if this is a new file\n\n\nThe file can be updated or created on a new branch. In this case, the sourceBranch parameter should be provided to identify the starting point for the new branch and the branch parameter identifies the branch to create the new commit on.",
        "operationId": "editFile",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The path of the file that is to be modified or created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The multipart form data containing the file",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExampleMultipartFormData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created commit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestCommit"
                }
              }
            }
          },
          "400": {
            "description": "There are validation errors, e.g. The branch or content parameters were not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user does not have write permission for the given repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The request was authenticated using a project or repository access token, which does not have a valid user associated with it",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The file already exists when trying to create a file, or the given content does not modify the file, or the file has changed since the given sourceCommitId, or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/changes": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get changes made in commit",
        "description": "Retrieve a page of changes made in a specified commit. \n\n<strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not possible to request subsequent content when that cap is exceeded. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getChanges_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The commit to retrieve changes for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The commit to which <code>until</code> should be compared to produce a page of changes. If not specified the commit's first parent is assumed (if one exists)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestChange"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The until parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or the since or until parameters supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get commits",
        "description": "Retrieve a page of commits from a given starting commit or \"between\" two commits. If no explicit commit is specified, the tip of the repository's default branch is assumed. commits may be identified by branch or tag name or by ID. A path may be supplied to restrict the returned commits to only those which affect that path. \n\nThe authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.",
        "operationId": "getCommits",
        "parameters": [
          {
            "name": "avatarScheme",
            "in": "query",
            "description": "The desired scheme for the avatar URL. If the parameter is not present URLs will use the same scheme as this request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "An optional path to filter commits by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withCounts",
            "in": "query",
            "description": "Optionally include the total number of commits and total number of unique authors",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "followRenames",
            "in": "query",
            "description": "If <code>true</code>, the commit history of the specified file will be followed past renames. Only valid for a path to a single file.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The commit ID (SHA1) or ref (inclusively) to retrieve commits before",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatarSize",
            "in": "query",
            "description": "If present the service adds avatar URLs for commit authors. Should be an integer specifying the desired size in pixels. If the parameter is not present, avatar URLs will not be set",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The commit ID or ref (exclusively) to retrieve commits after",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merges",
            "in": "query",
            "description": "If present, controls how merge commits should be filtered. Can be either <code>exclude</code>, to exclude merge commits, <code>include</code>, to include both merge commits and non-merge commits or <code>only</code>, to only return merge commits.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreMissing",
            "in": "query",
            "description": "<code>true</code> to ignore missing commits, <code>false</code> otherwise",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of commits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestCommit"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One of the supplied commit IDs or refs was invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get commit by ID",
        "description": "Retrieve a single commit <i>identified by its ID</i>. In general, that ID is a SHA1. <u>From 2.11, ref names like \"refs/heads/master\" are no longer accepted by this resource.</u>\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getCommit",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "An optional path to filter the commit by. If supplied the details returned <i>may not</i> be for the specified commit. Instead, starting from the specified commit, they will be the details for the first commit affecting the specified path.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The commit ID to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A commit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestCommit"
                }
              }
            }
          },
          "400": {
            "description": "The supplied commit ID was invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/changes": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get changes in commit",
        "description": "Retrieve a page of changes made in a specified commit. \n\n <strong>Note:</strong> The implementation will apply a hard cap (<code>page.max.changes</code>) and it is not possible to request subsequent content when that cap is exceeded. \n\n The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getChanges",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The commit to retrieve changes for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "<code>true</code> to apply comment counts in the changes (the default); otherwise, <code>false</code> to stream changes without comment counts",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The commit to which <code>until</code> should be compared to produce a page of changes. If not specified the commit's first parent is assumed (if one exists)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestChange"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The until parameter was not supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or the since or until parameters supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Search for commit comments",
        "description": "Retrieves the commit discussion comments that match the specified search criteria.\n\nIt is possible to retrieve commit discussion comments that are anchored to a range of commits by providing the sinceId that the comments anchored from.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.",
        "operationId": "getComments",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path to the file on which comments were made",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "For a merge commit, a parent can be provided to specify which diff the comments are on. For a commit range, a sinceId can be provided to specify where the comments are anchored from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of comments that match the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestComment"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, or commit. The missing entity will be specified in the error details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Add a new commit comment",
        "description": "Add a new comment.\n\nComments can be added in a few places by setting different attributes:\n\nGeneral commit comment:\n\n```{\n      \"text\": \"An insightful general comment on a commit.\"\n}\n\n</pre>\nReply to a comment:\n<pre>{\n      \"text\": \"A measured reply.\",\n      \"parent\": {\n          \"id\": 1\n      }\n}\n</pre>\nGeneral file comment:\n<pre>{\n      \"text\": \"An insightful general comment on a file.\",\n      \"anchor\": {\n          \"diffType\": \"COMMIT\",\n          \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n          \"path\": \"path/to/file\",\n          \"srcPath\": \"path/to/file\",\n          \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n      }\n}\n</pre>\nFile line comment:\n<pre>{\n      \"text\": \"A pithy comment on a particular line within a file.\",\n      \"anchor\": {\n          \"diffType\": \"COMMIT\",\n          \"line\": 1,\n          \"lineType\": \"CONTEXT\",\n          \"fileType\": \"FROM\",\n          \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\",\n          \"path\": \"path/to/file\",\n          \"srcPath\": \"path/to/file\",\n          \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\n      }\n}\n```\n\nNote: general file comments are an experimental feature and may change in the near future!\n\nFor file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. Finally diffType refers to the type of diff the comment was added on.\n\nFor line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be:- 'ADDED' - for an added line;</li>- 'REMOVED' - for a removed line; or</li>- 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are:- 'FROM' - the source file of the diff</li>- 'TO' - the destination file of the diff</li>If the current user is not a participant the user is added as one and updated to watch the commit.\n\nThe authenticated user must have REPO_READ permission for the repository that the commit is in to call this resource.",
        "operationId": "createComment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "For a merge commit, a parent can be provided to specify which diff the comments should be on. For a commit range, a sinceId can be provided to specify where the comments should be anchored from.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "the comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "400": {
            "description": "The comment was not created due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the commit, create a comment or watch the commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, commit or parent comment. The missing entity will be specified in the error details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Adding, deleting, or editing comments isn't supported on archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get a commit comment",
        "description": "Retrieves a commit discussion comment.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.",
        "operationId": "getComment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the comment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, commit or comment. The missing entity will be specified in the error details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Update a commit comment",
        "description": "Update a comment, with the following restrictions:\n\n- only the author of the comment may update the <i>text</i> of the comment\n- only the author of the comment or repository admins and above may update the other   fields of a comment\n\n\n<strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The comment to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly updated comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "400": {
            "description": "The comment was not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the commit, update the comment or watch the commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, commit or comment. The missing entity will be specified in the error details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The comment version supplied does not match the current version or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete a commit comment",
        "description": "Delete a commit comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users. Comments which have replies <i>may not be deleted</i>, regardless of the user's granted permissions.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "the comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The expected version of the comment. This must match the server's version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the 'version' attribute in the returned JSON structure.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successful"
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository or commit. The missing entity will be specified in the error details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The comment has replies, the version supplied does not match the comment's current version or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff/{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get diff between revisions",
        "description": "Retrieve the diff between two provided revisions.\n\nTo stream a raw text representation of the diff, this endpoint can be called with the request header 'Accept: text/plain'. \n\nNote:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event that the cap is reached, the diff will be cut short and one or more {@code truncated} flags will be set to true on the \"segments\", \"hunks\" and \"diffs\" properties, as well as the top-level object, in the returned JSON response.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamDiff",
        "parameters": [
          {
            "name": "srcPath",
            "in": "query",
            "description": "The source path for the file, if it was copied, moved or renamed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatarSize",
            "in": "query",
            "description": "If present the service adds avatar URLs for comment authors where the provided value specifies the desired avatar size in pixels. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Text used to filter files and lines (optional). Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatarScheme",
            "in": "query",
            "description": "The security scheme for avatar URLs. If the scheme is not present then it is inherited from the request. It can be set to \"https\" to force the use of secure URLs. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "The path to the file which should be diffed (optional)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "The number of context lines to include around added/removed lines in the diff.Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autoSrcPath",
            "in": "query",
            "description": "<code>true</code> to automatically try to find the source path when it's not provided, <code>false</code> otherwise. Requires the path to be provided.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "Optional whitespace flag which can be set to ignore-all",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "<code>true</code> to embed comments in the diff (the default); otherwise <code>false</code> to stream the diff without comments. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The base revision to diff from. If omitted the parent revision of the until revision is used",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A diff between two revisions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestDiff"
                }
              }
            }
          },
          "400": {
            "description": "The until parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/merge-base": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get the common ancestor between two commits",
        "description": "Returns the best common ancestor between two commits.\n\nIf more than one best common ancestor exists, only one will be returned. It is unspecified which will be returned.",
        "operationId": "getMergeBase",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otherCommitId",
            "in": "query",
            "description": "The other commit id to calculate the merge-base on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The common ancestor of the two given commits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestCommit"
                }
              }
            }
          },
          "204": {
            "description": "No common parent between the two commits exist"
          },
          "400": {
            "description": "The supplied commit ID(s) was/were invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project, repository, or commit(s) does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get repository pull requests containing commit",
        "description": "Retrieve a page of pull requests in the current repository that contain the given commit.\n\nThe user must be authenticated and have access to the specified repository to call this resource.",
        "operationId": "getPullRequests",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "the commit ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Return a page of pull requests in the current repository containing the given commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestPullRequest"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request repository does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/watch": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Watch commit",
        "description": "Add the authenticated user as a watcher for the specified commit.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit to call this resource.",
        "operationId": "watch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is now watching the commit."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project, repository or commit does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Stop watching commit",
        "description": "Remove the authenticated user as a watcher for the specified commit.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit to call this resource.",
        "operationId": "unwatch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitId",
            "in": "path",
            "description": "The <i>full ID</i> of the commit within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is no longer watching the commit."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project, repository or commit does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/changes": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Compare commits",
        "description": "Gets the file changes available in the <code> from</code> commit but not in the <code> to</code> commit.\n\n\nIf either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.",
        "operationId": "streamChanges",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromRepo",
            "in": "query",
            "description": "an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of changes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestChange"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The source repository,target repository, or commit does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/commits": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get accessible commits",
        "description": "Gets the commits accessible from the <code>from</code> commit but not in the <code>to</code> commit.\n\nIf either the <code>from</code> or <code>to</code> commit are not specified, they will be replaced by the default branch of their containing repository.",
        "operationId": "streamCommits",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromRepo",
            "in": "query",
            "description": "an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of commits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestCommit"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The source repository,target repository, or commit does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/diff{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get diff between commits",
        "description": "Gets a diff of the changes available in the <code>from</code> commit but not in the <code> to</code> commit.\n\nIf either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.",
        "operationId": "streamDiff_1",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "the path to the file to diff (optional)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "an optional number of context lines to include around each added or removed lines in the diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromRepo",
            "in": "query",
            "description": "an optional parameter specifying the source repository containing the source commit if that commit is not present in the current repository; the repository can be specified by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "source path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "the source commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "the target commit (can be a partial/full commit ID or qualified/unqualified ref name)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "an optional whitespace flag which can be set to <code>ignore-all</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "The diff of the changes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestDiff"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The source repository,target repository, or commit does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/contributing": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository contributing guidelines",
        "description": "Retrieves the contributing guidelines for the repository, if they've been defined. \n\nThis checks the repository for a CONTRIBUTING file, optionally with an md or txt extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending <code>?markup</code> to the URL will stream an HTML-rendered version instead. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamContributing",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "A specific commit or ref to retrieve the guidelines at, or the default branch if not specified",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "markup",
            "in": "query",
            "description": "If present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than <code>\"true\"</code>, the content is streamed without markup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmlEscape",
            "in": "query",
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the <code>markup.render.html.escape</code> property, which is <code>true</code> by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeHeadingId",
            "in": "query",
            "description": "(Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the <code>markup.render.headerids</code> property, which is false by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hardwrap",
            "in": "query",
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code> property, which is <code>true</code> by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contributing guidelines for the repository.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/default-branch": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository default branch",
        "description": "Retrieves the repository's <i>configured</i> default branch. \n\nEvery repository has a <i>configured</i> default branch, but that branch may not actually <i>exist</i> in the repository. For example, a newly-created repository will have a configured default branch even though no branches have been pushed yet. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "getDefaultBranch_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The configured default branch for the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestMinimalRef"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist, or its configured default branch does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update default branch for repository",
        "description": "Update the default branch of a repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "setDefaultBranch_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The branch to set as default",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestBranch"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The default branch was updated."
          },
          "401": {
            "description": "The authenticated user does not have permission to modify the default branch.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/diff": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get raw diff for path",
        "description": "Stream the raw diff between two provided revisions. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamRawDiff",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "The number of context lines to include around added/removed lines in the diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "The source path for the file, if it was copied, moved or renamed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The target revision to diff to (required)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "Optional whitespace flag which can be set to <code>ignore-all</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The base revision to diff from. If omitted the parent revision of the until revision is used",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A raw diff between two revisions.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The path parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/diff/{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get raw diff for path",
        "description": "Stream the raw diff between two provided revisions. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamRawDiff_1",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The path to the file which should be diffed (required)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "The number of context lines to include around added/removed lines in the diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "The source path for the file, if it was copied, moved or renamed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The target revision to diff to (required)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "Optional whitespace flag which can be set to <code>ignore-all</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The base revision to diff from. If omitted the parent revision of the until revision is used",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A raw diff between two revisions.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The until parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/files": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get files in directory",
        "description": "Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files from any sub-directory of the specified directory will be returned. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamFiles",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit ID or ref (e.g. a branch or tag) to list the files at. If not specified the default branch will be used instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of files.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FileListResource"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The path parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The path requested does not exist at the supplied commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/files/{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get files in directory",
        "description": "Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files from any sub-directory of the specified directory will be returned. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamFiles_1",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The directory to list files for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit ID or ref (e.g. a branch or tag) to list the files at. If not specified the default branch will be used instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of files.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FileListResource"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The path requested is not a directory at the supplied commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The path requested does not exist at the supplied commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/forks": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository forks",
        "description": "Retrieve repositories which have been forked from this one. Unlike #getRelatedRepositories(Repository, PageRequest) related repositories, this only looks at a given repository's direct forks. If those forks have themselves been the origin of more forks, such \"grandchildren\" repositories will not be retrieved. \n\nOnly repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even if other repositories have been forked from this one.",
        "operationId": "getForkedRepositories",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of repositories related to the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepository"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/hook-scripts": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get hook scripts",
        "description": "Return a page of hook scripts configured for the specified repository. \n\nThis endpoint requires **REPO_ADMIN** permission.",
        "operationId": "getConfigurations_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of hook scripts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestHookScriptConfig"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/hook-scripts/{scriptId}": {
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Create/update a hook script",
        "description": "Creates/updates the hook script configuration for the provided hook script and repository. \n\nThis endpoint requires **REPO_ADMIN** permission.",
        "operationId": "setConfiguration_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The ID of the hook script",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The hook triggers for which the hook script should be run",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestHookScriptTriggers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated hook script.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestHookScriptConfig"
                }
              }
            }
          },
          "400": {
            "description": "The hook script was not created/updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository slug supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Remove a hook script",
        "description": "Removes the hook script from the set of hook scripts configured to run in the repository. \n\nThis endpoint requires **REPO_ADMIN** permission.",
        "operationId": "removeConfiguration_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scriptId",
            "in": "path",
            "description": "The ID of the hook script",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The hook script was successfully deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository slug or hook script ID supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/labels": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get repository labels",
        "description": "Get all labels applied to the given repository. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository.",
        "operationId": "getAllLabelsForRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The applied label.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestLabel"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the labels.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Add repository label",
        "description": "Applies a label to the repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "addLabel",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The label to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestLabel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The applied label.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestLabel"
                }
              }
            }
          },
          "400": {
            "description": "A validation error prevented the label from being created or applied. Possible validation errors include: The name of the label contains uppercase characters, the name is smaller than 3 characters or longer than 50 characters, the label contains other characters than a-z 0-9 and - or the label is already applied to the given repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to apply a label.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/labels/{labelName}": {
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Remove repository label",
        "description": "Remove label that is applied to the given repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.",
        "operationId": "removeLabel",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "labelName",
            "in": "path",
            "description": "The label to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response indicating that the label is no longer associated to the repository."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to remove the label.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/last-modified": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Stream files",
        "description": "Streams files from the repository's root with the last commit to modify each file. Commit modifications are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.\n\nUnless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.",
        "operationId": "stream",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit to use as the starting point when listing files and calculating modifications",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A map of files to the last commit that modified them, and the latest commit to the repository (by nature, any commit to a repository modifies its root).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleFiles"
                }
              }
            }
          },
          "400": {
            "description": "No <code>at</code> commit was specified. When streaming modifications, an explicit starting commit must be supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist or does not contain the <code>at</code> commit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/last-modified/{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Stream files with last modified commit in path",
        "description": "Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.\n\nUnless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.",
        "operationId": "stream_1",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The path within the repository whose files should be streamed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "The commit to use as the starting point when listing files and calculating modifications",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A map of files to the last commit that modified them, and the latest commit to update the requested path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleFiles"
                }
              }
            }
          },
          "400": {
            "description": "No <code>at</code> commit was specified. When streaming modifications, an explicit starting commit must be supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist or does not contain the <code>at</code> commit, or the <code>at</code> commit does not contain the requested path.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/license": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository license",
        "description": "Retrieves the license for the repository, if it's been defined. \n\nThis checks the repository for a <pre>LICENSE</pre> file, optionally with an <pre>md</pre> or <pre>txt</pre>extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending <pre>?markup</pre> to the URL will stream an HTML-rendered version instead. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamLicense",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "A specific commit or ref to retrieve the guidelines at, or the default branch if not specified",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "markup",
            "in": "query",
            "description": "If present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than <code>\"true\"</code>, the content is streamed without markup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmlEscape",
            "in": "query",
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the <code>markup.render.html.escape</code> property, which is <code>true</code> by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeHeadingId",
            "in": "query",
            "description": "(Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the <code>markup.render.headerids</code> property, which is false by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hardwrap",
            "in": "query",
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code> property, which is <code>true</code> by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The license for the repository.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/participants": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Search pull request participants",
        "description": "Retrieve a page of participant users for all the pull requests to or from the specified repository. \n\nOptionally clients can specify following filters.",
        "operationId": "search",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "(optional) Return only users, whose username, name or email address <i>contain</i> the filter value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "(optional) The role associated with the pull request participant. This must be one of AUTHOR, REVIEWER, or PARTICIPANT",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "(optional), Defaults to <strong>INCOMING</strong>) the direction relative to the specified repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of users that match the search criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestApplicationUser"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/patch": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get patch content at revision",
        "description": "Retrieve the patch content for a repository at a specified revision. \n\nCache headers are added to the response (only if full commit hashes are used, not in the case of short hashes). \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamPatch",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The target revision from which to generate the patch (required)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allAncestors",
            "in": "query",
            "description": "indicates whether or not to generate a patch which includes all the ancestors of the 'until' revision. If true, the value provided by 'since' is ignored.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The base revision from which to generate the patch. This is only applicable when 'allAncestors' is false. If omitted the patch will represent one single commit, the 'until'.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The patch contents from a repository.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The until parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull requests for repository",
        "description": "Retrieve a page of pull requests to or from the specified repository. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.  Optionally clients can specify PR participant filters. Each filter has a mandatory username.N parameter, and the optional role.N and approved.N parameters. \n\n- username.N - the \"root\" of a single participant filter, where \"N\" is a natural number   starting from 1. This allows clients to specify multiple participant filters, by providing consecutive   filters as username.1, username.2 etc. Note that the filters numbering has to start   with 1 and be continuous for all filters to be processed. The total allowed number of participant   filters is 10 and all filters exceeding that limit will be dropped.\n- role.N(optional) the role associated with username.N.   This must be one of AUTHOR, REVIEWER, or PARTICIPANT\n- approved.N (optional) the approved status associated with username.N.   That is whether username.N has approved the PR. Either true, or false\n",
        "operationId": "getPage",
        "parameters": [
          {
            "name": "withAttributes",
            "in": "query",
            "description": "(optional) defaults to true, whether to return additional pull request attributes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "(optional) a <i>fully-qualified</i> branch ID to find pull requests to or from, such as refs/heads/master",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withProperties",
            "in": "query",
            "description": "(optional) defaults to true, whether to return additional pull request properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "(optional) If specified, only pull requests matching the supplied draft status will be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "(optional) If specified, only pull requests where the title or description contains the supplied string will be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "(optional, defaults to <strong>OPEN</strong>). Supply <strong>ALL</strong> to return pull request in any state. If a state is supplied only pull requests in the specified state will be returned. Either <strong>OPEN</strong>, <strong>DECLINED</strong> or <strong>MERGED</strong>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "(optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either <strong>OLDEST</strong> (as in: \"oldest first\") or <strong>NEWEST</strong>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "(optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of pull requests that match the search criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestPullRequest"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Create pull request",
        "description": "Create a new pull request from a source branch or tag to a target branch. The source and target may be in the same repository, or different ones. (Note that different repositories must belong to the same <code>Repository#getHierarchyId()</code> hierarchy.) \n\nThe <code>fromRef</code> may be a branch or a tag. The <code>toRef</code> is required to be a branch. Tags are not allowed as targets because tags are intended to be immutable and should not be changed after they are created. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the <code>fromRef</code> and <code>toRef</code> repositories to call this resource.",
        "operationId": "create",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The pull request data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequest"
                }
              }
            }
          },
          "400": {
            "description": "The pull request entity supplied in the request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a pull request between the two specified repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "One of the specified repositories or branches does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "One of the following error cases occurred (check the error message for more details): \n\n- There was a problem resolving one or more reviewers.\n- The specified branches were the same.\n- The <em>to</em> branch is already up-to-date with all the commits on the     <em>from</em> branch.\n- A pull request between the two branches already exists.\n- The <em>to</em> repository is archived.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request",
        "description": "Retrieve a pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequest"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update pull request metadata",
        "description": "Update the title, description, reviewers, destination branch or draft status of an existing pull request. \n\n**Note:** the <em>reviewers</em> list may be updated using this resource. However the <em>author</em> and <em>participants</em> list may not. \n\nThe authenticated user must either: \n\n- be the author of the pull request and have the <strong>REPO_READ</strong> permission for the repository that this pull request targets; or\n- have the <strong>REPO_WRITE</strong> permission for the repository that this pull request targets\n\n\nto call this resource.",
        "operationId": "update",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated pull request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequest"
                }
              }
            }
          },
          "400": {
            "description": "One of the following error cases occurred (check the error message for more details): \n\n- The request tried to modify the <em>author</em> or <em>participants</em>.\n- The pull request's version attribute was not specified.\n- A reviewer's username was not specified.\n- The toRef ID value was incorrectly left blank\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "One of the specified repositories or branches does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "One of the following error cases occurred (check the error message for more details): \n\n- The specified version is out of date.\n- One of the reviewers could not be added to the pull request.\n- If updating the destination branch:    - There is already an open pull request with an identical to branch\n   - The from and new to branch <i>are</i> the same\n   - The new destination branch up-to-date is up-to-date with all of                 changes from the from branch, resulting in a pull request with                 nothing to merge            \n- The <em>to</em> repository is archived.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Delete pull request",
        "description": "Deletes a pull request. \n\nTo call this resource, users must be authenticated and have permission to view the pull request. Additionally, they must: \n\n- be the pull request author, if the system is configured to allow authors to delete their own   pull requests (this is the default) OR \n- have repository administrator permission for the repository the pull request is targeting\n\n\nA body containing the version of the pull request must be provided with this request. \n\n`{ \"version\": 1 }`",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A body containing the version of the pull request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The pull request was deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Deleting pull requests isn't supported on archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.diff": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Stream raw pull request diff",
        "description": "Streams the raw diff for a pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "streamRawDiff_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "The number of context lines to include around added/removed lines in the diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "optional whitespace flag which can be set to <code>ignore-all</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A raw diff for the specified pull request.",
            "content": {
              "text/plain": {}
            }
          },
          "400": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "text/html": {}
            }
          },
          "404": {
            "description": "The pull request does not exist.",
            "content": {
              "text/html": {}
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.patch": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Stream pull request as patch",
        "description": "Streams a patch representing a pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "streamPatch_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A patch representing the specified pull request.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to access the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request activity",
        "description": "Retrieve a page of activity associated with a pull request. \n\nActivity items include comments, approvals, rescopes (i.e. adding and removing of commits), merges and more. \n\nDifferent types of activity items may be introduced in newer versions of Stash or by user installed plugins, so clients should be flexible enough to handle unexpected entity shapes in the returned page. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromType",
            "in": "query",
            "description": "(required if <strong>fromId</strong> is present) the type of the activity item specified by <strong>fromId</strong> (either <strong>COMMENT</strong> or <strong>ACTIVITY</strong>)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromId",
            "in": "query",
            "description": "(optional) the ID of the activity item to use as the first item in the returned page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of activity relating to the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestPullRequestActivity"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get auto-merge request for pull request",
        "description": "Returns an auto-merge request for the pull request, if requested.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getAutoMergeRequest",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The auto-merge request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoMergeRequest"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Auto-merge pull request",
        "description": "Requests the system to try merging the pull request if auto-merge was requested on it.\n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "tryAutoMerge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The result of trying to auto-merge the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoMergeProcessingResult"
                }
              }
            }
          },
          "400": {
            "description": "An auto-merge request was not submitted for this pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to modify the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The auto-merge setting is not enabled for the repository that this pull request targets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Cancel auto-merge for pull request",
        "description": "Cancels a request to auto-merge the pull request, if the pull request was not merged yet.\n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "cancelAutoMerge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The auto-merge request was cancelled."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to modify the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The specified pull request is not open.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Search pull request comments",
        "description": "Gets comments matching the given set of field values for the specified pull request. (Note this does <b>not</b> perform any kind of searching for comments by their text). \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getComments_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "If true only the count of the comments by state will be returned (and not the body of the comments).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "(optional). If supplied, only comments with a state in the given list will be returned. The state can be OPEN or RESOLVED.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of Comments from the supplied pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestComment"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Add new blocker comment",
        "description": "Add a new blocker comment. \n\nComments can be added in a few places by setting different attributes: \n\nGeneral pull request blocker comment: \n```\n\n{ \n     \"text\": \"A task on a pull request.\" \n}\n```\n\nBlocker reply to a comment: \n\n```\n\n{\n     \"text\": \"This reply is a task.\", \n     \"parent\": { \n         \"id\": 1 \n     } \n} \n```\n\nGeneral blocker file comment:\n\n```\n\n{\n     \"text\": \"A blocker comment on a file.\", \n     \"anchor\": { \n         \"diffType\": \"RANGE\", \n         \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n         \"path\": \"path/to/file\", \n         \"srcPath\": \"path/to/file\", \n         \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n     } \n } \n```\n\nBlocker file line comment: \n\n```\n\n{ \n     \"text\": \"A task on a particular line within a file.\", \n     \"anchor\": { \n         \"diffType\": \"COMMIT\", \n         \"line\": 1, \n         \"lineType\": \"CONTEXT\", \n         \"fileType\": \"FROM\", \n         \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n         \"path\": \"path/to/file\", \n         \"srcPath\": \"path/to/file\", \n         \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n     } \n } \n```\n\nFor file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to 'EFFECTIVE'. In any other cases the diffType is REQUIRED. \n\nFor line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be: \n\n- 'ADDED' - for an added line;\n- 'REMOVED' - for a removed line; or\n- 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.\n \n\n'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are: \n\n- 'FROM' - the source file of the diff\n - 'TO' - the destination file of the diff\n\n\nIf the current user is not a participant the user is added as a watcher of the pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "createComment_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The comment to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "400": {
            "description": "The comment was not created due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request, create a comment or watch the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or parent comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The new created name already exists or adding, deleting, or editing comments isn't supported on archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request comment",
        "description": "Retrieves a pull request comment.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getComment_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update pull request comment",
        "description": "Update a comment, with the following restrictions: \n\n- only the author of the comment may update the <i>text</i> of the comment\n- only the author of the comment, the author of the pull request or repository admins and above may update   the other fields of a comment\n\n\nConvert a comment to a task or vice versa. \n\nComments can be converted to tasks by setting the 'severity' attribute to 'BLOCKER': \n```\n\n{ \n\"severity\": \"BLOCKER\" \n}\n\n```\n\nTasks can be converted to comments by setting the 'severity' attribute to 'NORMAL': ```\n\n{ \n\"severity\": \"NORMAL\" \n}\n\n```\n\nResolve a blocker comment. \n\nBlocker comments can be resolved by setting the 'state' attribute to 'RESOLVED': ```\n\n{ \n\"state\": \"RESOLVED\" \n} \n```\n\n<strong>Note:</strong> the supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "updateComment_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The comment to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly updated comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "400": {
            "description": "The comment was not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request, update a comment or watch the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The comment version supplied does not match the current version or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Delete pull request comment",
        "description": "Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "deleteComment_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The expected version of the comment. This must match the server's version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the 'version' attribute in the returned JSON structure.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The comment has replies, the version supplied does not match the current version or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Gets pull request changes",
        "description": "Gets changes for the specified PullRequest.\n\nIf the changeScope query parameter is set to 'UNREVIEWED', the application will attempt to stream unreviewed changes based on the lastReviewedCommit of the current user, which are the changes between the lastReviewedCommit and the latest commit of the source branch. The current user is considered to <i>not</i> have any unreviewed changes for the pull request when the lastReviewedCommit is either null (everything is unreviewed, so all changes are streamed), equal to the latest commit of the source branch (everything is reviewed), or no longer on the source branch (the source branch has been rebased). In these cases, the application will fall back to streaming all changes (the default), which is the effective diff for the pull request. The type of changes streamed can be determined by the changeScope parameter included in the properties map of the response. \n\nNote: This resource is currently <i>not paged</i>. The server will return at most one page. The server will truncate the number of changes to either the request's page limit or an internal maximum, whichever is smaller. The start parameter of the page request is also ignored. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "streamChanges_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sinceId",
            "in": "query",
            "description": "The since commit hash to stream changes for a RANGE arbitrary change scope",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changeScope",
            "in": "query",
            "description": "UNREVIEWED to stream the unreviewed changes for the current user (if they exist); RANGE to stream changes between two arbitrary commits (requires 'sinceId' and 'untilId'); otherwise ALL to stream all changes (the default)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "untilId",
            "in": "query",
            "description": "The until commit hash to stream changes for a RANGE arbitrary change scope",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "true to apply comment counts in the changes (the default); otherwise, false to stream changes without comment counts",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of unreviewed Changes for the current user from the supplied pull request, including the unreviewedCommits in the properties map.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestChange"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request comments for path",
        "description": "Gets comments for the specified pull request and path. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getComments_2",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path to stream comments for a given path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromHash",
            "in": "query",
            "description": "The from commit hash to stream comments for a RANGE or COMMIT arbitrary change scope",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anchorState",
            "in": "query",
            "description": "ACTIVE to stream the active comments; ORPHANED to stream the orphaned comments; ALL to stream both the active and the orphaned comments;",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "diffType",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "toHash",
            "in": "query",
            "description": "The to commit hash to stream comments for a RANGE or COMMIT arbitrary change scope",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "diffTypes",
            "in": "query",
            "description": "EFFECTIVE to stream the comments related to the effective diff of the pull request; RANGE to stream comments related to a commit range between two arbitrary commits (requires 'fromHash' and 'toHash'); COMMIT to stream comments related to a commit between two arbitrary commits (requires 'fromHash' and 'toHash')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "(optional). If supplied, only comments with a state in the given list will be returned. The state can be OPEN or RESOLVED.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of Comments from the supplied pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestComment"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Add pull request comment",
        "description": "Add a new comment. \n\nComments can be added in a few places by setting different attributes: </p>General pull request comment: \n <pre> { \n   \"text\": \"An insightful general comment on a pull request.\" \n } \n </pre> Reply to a comment:  <pre> { \n   \"text\": \"A measured reply.\", \n   \"parent\": { \n      \"id\": 1 \n    } \n } \n </pre> General file comment:  <pre> { \n   \"text\": \"An insightful general comment on a file.\", \n   \"anchor\": { \n      \"diffType\": \"RANGE\", \n      \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n      \"path\": \"path/to/file\", \n      \"srcPath\": \"path/to/file\", \n      \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n   } \n } \n </pre> File line comment:  <pre> { \n   \"text\": \"A pithy comment on a particular line within a file.\", \n   \"anchor\": { \n      \"diffType\": \"COMMIT\", \n      \"line\": 1, \n      \"lineType\": \"CONTEXT\", \n      \"fileType\": \"FROM\", \n      \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n      \"path\": \"path/to/file\", \n      \"srcPath\": \"path/to/file\", \n      \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n    } \n } \n </pre> \n\n Add a new task. \n\nTasks are just comments with the attribute 'severity' set to 'BLOCKER': \n\nGeneral pull request task:  <pre> { \n   \"text\": \"A task on a pull request.\", \n   \"severity\": \"BLOCKER\" \n } \n </pre> \n\n Add a pending comment.  \n\nPending comments are just comments with the attribute 'state' set to 'PENDING': \n\nPending comment: <pre> { \n   \"text\": \"This is a pending comment\", \n   \"state\": \"PENDING\" \n } \n </pre> \n\nFor file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to 'EFFECTIVE'. In any other cases the diffType is REQUIRED. \n\nFor line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be: \n\n- 'ADDED' - for an added line;\n- 'REMOVED' - for a removed line; or\n- 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.\n</ul>'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are: \n\n- 'FROM' - the source file of the diff\n- 'TO' - the destination file of the diff\n</ul>If the current user is not a participant the user is added as a watcher of the pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "createComment_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The comment to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "400": {
            "description": "The comment was not created due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request, create a comment or watch the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or parent comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Adding, deleting, or editing comments isn't supported on archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get a pull request comment",
        "description": "Retrieves a pull request comment. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getComment_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update pull request comment",
        "description": "Update a comment, with the following restrictions: \n\n- only the author of the comment may update the <i>text</i> of the comment\n- only the author of the comment, the author of the pull request or repository admins and above may update the other fields of a comment\n</ul> \n\nConvert a comment to a task or vice versa. \n\nComments can be converted to tasks by setting the 'severity' attribute to 'BLOCKER': \n <pre> { \n \"severity\": \"BLOCKER\" \n } \n </pre>\n\nTasks can be converted to comments by setting the 'severity' attribute to 'NORMAL':  <pre> { \n \"severity\": \"NORMAL\" \n } \n </pre>\n\nResolve a task. \n\nTasks can be resolved by setting the 'state' attribute to 'RESOLVED':  <pre> { \n \"state\": \"RESOLVED\" \n } \n </pre>\n\n<strong>Note:</strong> the supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "updateComment_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly updated comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestComment"
                }
              }
            }
          },
          "400": {
            "description": "The comment was not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request, update a comment or watch the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The comment version supplied does not match the current version or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Delete a pull request comment",
        "description": "Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "deleteComment_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The expected version of the comment. This must match the server's version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the 'version' attribute in the returned JSON structure.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The comment has replies, the version supplied does not match the current version or the repository is archived.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/apply-suggestion": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Apply pull request suggestion",
        "description": "Apply a suggestion contained within a comment.",
        "operationId": "applySuggestion",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A request containing other parameters required to apply a suggestion - The given versions/hashes must match the server's version/hashes or the suggestion application will fail (in order to avoid applying the suggestion to the wrong place",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestApplySuggestionRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "An empty response indicating the suggestion has been applied."
          },
          "400": {
            "description": "The suggestion was not applied due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to apply the suggestion.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied project, repository, pull request or parent comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "There was an error applying the suggestion to the source branch. It must be applied manually.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commit-message-suggestion": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get commit message suggestion",
        "description": "Retrieve a suggested commit message for the given Pull Request.",
        "operationId": "getCommitMessageSuggestion",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request to generate the suggestion for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The suggested commit message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestCommitMessageSuggestion"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request commits",
        "description": "Retrieve commits for the specified pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "getCommits_1",
        "parameters": [
          {
            "name": "avatarScheme",
            "in": "query",
            "description": "The desired scheme for the avatar URL. If the parameter is not present URLs will use the same scheme as this request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withCounts",
            "in": "query",
            "description": "If set to true, the service will add \"authorCount\" and \"totalCount\" at the end of the page. \"authorCount\" is the number of different authors and \"totalCount\" is the total number of commits.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "ID of the pullrequest, part of the path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatarSize",
            "in": "query",
            "description": "If present the service adds avatar URLs for commit authors. Should be an integer specifying the desired size in pixels. If the parameter is not present, avatar URLs will not be setCOMMIT to stream comments related to a commit between two arbitrary commits (requires 'fromHash' and 'toHash')",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of commits from the supplied pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestCommit"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Decline pull request",
        "description": "Decline a pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "decline",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pullrequest ID provided by the path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body holder",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestDeclineRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The pull request was declined.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequest"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The pull request is not OPEN or has been updated since the version specified by the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Stream a diff within a pull request",
        "description": "Streams a diff within a pull request. \n\nIf the specified file has been copied, moved or renamed, the <code>srcPath</code> must also be specified to produce the correct diff. \n\nTo stream a raw text representation of the diff, this endpoint can be called with the request header 'Accept: text/plain'. \n\nNote: This RESTful endpoint is currently <i>not paged</i>. The server will internally apply a hard cap to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "streamDiff_2",
        "parameters": [
          {
            "name": "avatarScheme",
            "in": "query",
            "description": "The security scheme for avatar URLs. If the scheme is not present then it is inherited from the request. It can be set to \"https\" to force the use of secure URLs. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "description": "The path to the file which should be diffed (optional)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contextLines",
            "in": "query",
            "description": "The number of context lines to include around added/removed lines in the diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sinceId",
            "in": "query",
            "description": "The since commit hash to stream a diff between two arbitrary hashes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcPath",
            "in": "query",
            "description": "The previous path to the file, if the file has been copied, moved or renamed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "diffType",
            "in": "query",
            "description": "The type of diff being requested. When withComments is true this works as a hint to the system to attach the correct set of comments to the diff. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "untilId",
            "in": "query",
            "description": "The until commit hash to stream a diff between two arbitrary hashes",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "whitespace",
            "in": "query",
            "description": "Optional whitespace flag which can be set to <code>ignore-all</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withComments",
            "in": "query",
            "description": "<code>true</code> to embed comments in the diff (the default); otherwise, <code>false</code> to stream the diff without comments. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "avatarSize",
            "in": "query",
            "description": "If present the service adds avatar URLs for comment authors where the provided value specifies the desired avatar size in pixels. Not applicable if streaming raw diff",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of differences from a pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestDiff"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "If the request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Test if pull request can be merged",
        "description": "Test whether a pull request can be merged. \n\nA pull request may not be merged if: \n\n- there are conflicts that need to be manually resolved before merging; and/or\n- one or more merge checks have vetoed the merge.\n\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "canMerge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The mergeability status of the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestMergeability"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The specified pull request is not open.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Merge pull request",
        "description": "Merge the specified pull request immediately or set the pull request to auto-merge when all the merge checks pass by setting <strong>autoMerge</strong> field in the request body.\n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "merge",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body holder",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestMergeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The merged pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequest"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to merge the specified pull request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The auto-merge setting is not enabled for the repository that this pull request targets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "One of the following error cases occurred (check the error message for more details): \n\n- The pull request has conflicts.\n- A merge check vetoed the merge.\n- The specified version is out of date.\n- The specified pull request is not open.\n- The <em>to</em> repository is archived.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge-base": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get the common ancestor between the latest commits of the source and target branches of the pull request",
        "description": "Returns the best common ancestor between the latest commits of the source and target branches of the pull request.\n\nIf more than one best common ancestor exists, only one will be returned. It is unspecified which will be returned.",
        "operationId": "getMergeBase_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The common ancestor of the latest commits in the source and target branches of this pull request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestCommit"
                }
              }
            }
          },
          "204": {
            "description": "No common parent between exist"
          },
          "404": {
            "description": "The project, repository, or pull request does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request participants",
        "description": "Retrieves a page of the participants for a given pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "listParticipants",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the participants in this pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestPullRequestParticipant"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Assign pull request participant role",
        "description": "Assigns a participant to an explicit role in pull request. Currently only the REVIEWER role may be assigned. \n\nIf the user is not yet a participant in the pull request, they are made one and assigned the supplied role. \n\nIf the user is already a participant in the pull request, their previous role is replaced with the supplied role unless they are already assigned the AUTHOR role which cannot be changed and will result in a Bad Request (400) response code. \n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "assignParticipantRole",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The participant to be added to the pull request, includes the user and their role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestAssignParticipantRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the participants in this pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestParticipant"
                }
              }
            }
          },
          "400": {
            "description": "The request does not have the username and role, or is attempting an invalid assignment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Adding reviewers isn't supported on archived repositories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}": {
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Change pull request status",
        "description": "Change the current user's status for a pull request. Implicitly adds the user as a participant if they are not already. If the current user is the author, this method will fail. \n\nThe possible values for {@code status} are <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong> (which is referred to as \"Requested changes\" in the frontend from 8.10 onward), or <strong>APPROVED</strong>. \n\nIf the new {@code status} is <strong>NEEDS_WORK</strong> or <strong>APPROVED</strong> then the {@code lastReviewedCommit} for the participant will be updated to the latest commit of the source branch of the pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userSlug",
            "in": "path",
            "description": "The slug for the user changing their status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. Note: This parameter is deprecated. Use last reviewed commit in request body instead",
            "deprecated": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The participant representing the status to set, includes the status of the participant and last reviewed commit. If last reviewed commit is provided, it will be used to update the participant status. The operation will fail if the latest commit of the pull request does not match the provided last reviewed commit. If last reviewed commit is not provided, the latest commit of the pull request will be used for the update by default.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestAssignStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Details of the new participant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestParticipant"
                }
              }
            }
          },
          "400": {
            "description": "The specified status was invalid or the currently authenticated user is the author of the PR and cannot have its status updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The pull request is not open, or has been updated since the last reviewed commit specified by the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Unassign pull request participant",
        "description": "Unassigns a participant from the REVIEWER role they may have been given in a pull request. \n\nIf the participant has no explicit role this method has no effect. \n\nAfterwards, the user will still remain a participant in the pull request but their role will be reduced to PARTICIPANT. This is because once made a participant of a pull request, a user will forever remain a participant. Only their role may be altered. \n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "unassignParticipantRole",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userSlug",
            "in": "path",
            "description": "The slug for the user being unassigned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The update completed."
          },
          "400": {
            "description": "The request does not have the username.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Removing reviewers isn't supported on archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Re-open pull request",
        "description": "Re-open a declined pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "reopen",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The ID of the pull request within the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The body holder",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestReopenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The merged pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequest"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to reopen the specified pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "One of the following error cases occurred (check the error message for more details): \n\n- The pull request is not in a declined state.\n- The specified version is out of date.\n- The <em>to</em> repository is archived.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get pull request comment thread",
        "description": "Get the <code>CommentThread</code> threads which have <code>Comment</code> comments that have a <code>CommentState#PENDING</code> pending state and are part of the pull request review for the authenticated user.",
        "operationId": "getReview",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of Comments from the supplied pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestComment"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository or pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Complete pull request review",
        "description": "Complete a review on a pull request.",
        "operationId": "finishReview",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The current version of the pull request. If the server's version isn't the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the 'version' attribute in the returned JSON structure. Note: This parameter is deprecated. Use last reviewed commit in request body instead",
            "deprecated": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The REST request which contains comment text, last reviewed commit and participant status. If last reviewed commit is provided, it will be used to update the participant status. The operation will fail if the latest commit of the pull request does not match the provided last reviewed commit. If last reviewed commit is not provided, the latest commit of the pull request will be used for the update by default.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestFinishReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Getting back the number of published comments and completing the review on a pull request.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The request is invalid when there is no request body provided, or the participant status in the request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request, update a comment or watch the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "There is no pull request review for the user to finish.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The pull request has been updated since the last reviewed commit specified by the request, or reviews cannot be made on pull requests in archived repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Discard pull request review",
        "description": "Discard a pull request review for the authenticated user. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "discardReview",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The pull request review has been discarded."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to discard the the pull request review",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified pull request or repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Watch pull request",
        "description": "Add the authenticated user as a watcher for the specified pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "watch_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is now watching the pull request."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Stop watching pull request",
        "description": "Remove the authenticated user as a watcher for the specified pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.",
        "operationId": "unwatch_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pullRequestId",
            "in": "path",
            "description": "The pull request ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is no longer watching the pull request."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the pull request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or pull request does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/raw/{path}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get raw content of a file at revision",
        "description": "Retrieve the raw content for a file path at a specified revision. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamFileContentRaw",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The file path to retrieve content from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "A specific commit or ref to retrieve the raw content at, or the default branch if not specified",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "markup",
            "in": "query",
            "description": "If present or \"true\", triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than \"true\", the content is streamed without markup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmlEscape",
            "in": "query",
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the markup.render.html.escape property, which is true by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeHeadingId",
            "in": "query",
            "description": "(Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the markup.render.headerids property, which is false by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hardwrap",
            "in": "query",
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the markup.render.hardwrap property, which is true by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The raw contents from a file.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "The path parameter was not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/readme": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository readme",
        "description": "Retrieves the README for the repository, if it's been defined. \n\nThis checks the repository for a <pre>README</pre> file, optionally with an <pre>md</pre> or <pre>txt</pre>extension, and, if found, streams it. By default, the <i>raw content</i> of the file is streamed. Appending <pre>?markup</pre> to the URL will stream an HTML-rendered version instead. Note that, when streaming HTML, relative URLs in the README will not work if applied relative to this URL. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.",
        "operationId": "streamReadme",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "at",
            "in": "query",
            "description": "A specific commit or ref to retrieve the guidelines at, or the default branch if not specified",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "markup",
            "in": "query",
            "description": "If present or <code>\"true\"</code>, triggers the raw content to be markup-rendered and returned as HTML; otherwise, if not specified, or any value other than <code>\"true\"</code>, the content is streamed without markup",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "htmlEscape",
            "in": "query",
            "description": "(Optional) true if HTML should be escaped in the input markup, false otherwise. If not specified, the value of the <code>markup.render.html.escape</code> property, which is <code>true</code> by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeHeadingId",
            "in": "query",
            "description": "(Optional) true if headings should contain an ID based on the heading content. If not specified, the value of the <code>markup.render.headerids</code> property, which is false by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hardwrap",
            "in": "query",
            "description": "(Optional) Whether the markup implementation should convert newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code> property, which is <code>true</code> by default, will be used",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The README for the repository.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/recreate": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Retry repository creation",
        "description": "If a create or fork operation fails, calling this method will clean up the broken repository and try again. The repository must be in an INITIALISATION_FAILED state. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "retryCreateRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepository"
                }
              }
            }
          },
          "400": {
            "description": "The repository was not created due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get ref change activity",
        "description": "Retrieve a page of repository ref change activity. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission to call this resource.",
        "operationId": "getRefChangeActivity",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "(optional) exact match for a ref ID to filter ref change activity for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of ref change activity.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepositoryRefChangeActivity"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is currently not authenticated or the user does not have REPO_ADMIN permission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities/branches": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get branches with ref change activities for repository",
        "description": "Retrieve a page of branches with ref change activities for a specific repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission to call this resource.",
        "operationId": "findBranches",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "(optional) Partial match for a ref ID to filter minimal refs for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of branches with ref change activities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestMinimalRef"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is currently not authenticated or the user does not have REPO_ADMIN permission.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/related": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get related repository",
        "description": "Retrieve repositories which are related to this one. Related repositories are from the same Repository#getHierarchyId() hierarchy as this repository. \n\nOnly repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even if more repositories are part of this repository's hierarchy.",
        "operationId": "getRelatedRepositories",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of repositories related to the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepository"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/auto-decline": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get auto decline settings",
        "description": "Retrieves the auto decline settings for the supplied repository. Project settings will be returned if no explicit settings have been set for the repository. In the case that there are no project settings, the default settings will be returned.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for this repository to call the resource.",
        "operationId": "getAutoDeclineSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The auto decline settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoDeclineSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the auto decline settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Create auto decline settings",
        "description": "Creates or updates the auto decline settings for the supplied repository.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource",
        "operationId": "setAutoDeclineSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The settings to create or update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAutoDeclineSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The auto decline settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoDeclineSettings"
                }
              }
            }
          },
          "400": {
            "description": "inactivityWeeks was not one of 1, 2, 4, 8, or, 12, or the enabled parameter was not included in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create or update the auto decline settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete auto decline settings",
        "description": "Delete auto decline settings for the supplied repository.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.",
        "operationId": "deleteAutoDeclineSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The auto decline settings have been deleted successfully."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the auto decline settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/auto-merge": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get pull request auto-merge settings",
        "description": "Retrieves the pull request auto-merge settings for the supplied repository. Project settings will be returned if no explicit settings have been set for the repository. In the case that there are no project settings, the default settings will be returned. If the repository's project has restricted its auto-merge settings, then the settings of the project will be returned.\n\nThe authenticated user must have <strong>REPO_READ</strong> permission for this repository to call the resource.",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The pull request auto-merge settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoMergeRestrictedSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the pull request auto-merge settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Create or update the pull request auto-merge settings",
        "description": "Creates or updates the pull request auto-merge settings for the supplied repository.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.",
        "operationId": "set_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The settings to create or update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAutoMergeSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The pull request auto-merge settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoMergeRestrictedSettings"
                }
              }
            }
          },
          "400": {
            "description": "The 'enabled' field was not provided correctly.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create or update the pull request auto-merge settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The pull request auto-merge settings cannot be modified due to a restriction enforced by the supplied repository's project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete pull request auto-merge settings",
        "description": "Deletes pull request auto-merge settings for the supplied repository.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The pull request auto-merge settings"
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the pull request auto-merge settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The pull request auto-merge settings cannot be modified due to a restriction enforced by the supplied repository's project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get repository hooks",
        "description": "Retrieve a page of repository hooks for this repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getRepositoryHooks_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The optional type to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "PRE_RECEIVE",
                "POST_RECEIVE"
              ]
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of repository hooks with their associated enabled state.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepositoryHook"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the hooks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get repository hook",
        "description": "Retrieve a repository hook for this repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getRepositoryHook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository hooks with their associated enabled state for the supplied hookKey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryHook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository hook does not exist for the given repository, or the repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete repository hook",
        "description": "Delete repository hook configuration for the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong>\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "deleteRepositoryHook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The hook configuration matching the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong> was deleted"
          },
          "400": {
            "description": "The settings specified are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/enabled": {
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Enable repository hook",
        "description": "Enable a repository hook for this repository and optionally apply new configuration. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource. \n\nA JSON document may be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.",
        "operationId": "enableHook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "description": "The content length.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository hooks with their associated enabled state for the supplied hookKey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryHook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to enable the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Disable repository hook",
        "description": "Disable a repository hook for this repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "disableHook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository hooks with their associated enabled state for the supplied hookKey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryHook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to disable the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/settings": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get repository hook settings",
        "description": "Retrieve the settings for a repository hook for this repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The settings for the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the hook settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Update repository hook settings",
        "description": "Modify the settings for a repository hook for this repository. \n\nThe service will reject any settings which are too large, the current limit is 32KB once serialized. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource. \n\nA JSON document can be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.",
        "operationId": "setSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The raw settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExampleSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The settings for the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleSettings"
                }
              }
            }
          },
          "400": {
            "description": "The settings specified are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to modify the hook settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/pull-requests": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get pull request settings",
        "description": "Retrieve the pull request settings for the context repository. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this resource. \n\nThis resource will call all RestFragments that are registered with the key <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a non-empty Map of errors, then no fragments will execute. \n\nThe property keys for the settings that are bundled with the application are \n\n- mergeConfig - the merge strategy configuration for pull requests\n- requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 if the merge check is disabled\n- com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - the merge check configuration for required approvers\n- requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable\n- requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable\n- requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 if the merge check is disabled\n- com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - the merge check configuration for required builds\n\n\n",
        "operationId": "getPullRequestSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository pull request settings for the context repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryPullRequestSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Update pull request settings",
        "description": "Update the pull request settings for the context repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the context repository to call this resource. \n\nThis resource will call all RestFragments that are registered with the key <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a non-empty Map of errors, then no fragments will execute. \n\nOnly the settings that should be updated need to be included in the request. \n\nThe property keys for the settings that are bundled with the application are \n\n- mergeConfig - the merge strategy configuration for pull requests\n- requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 to disable the merge check\n- com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required approvals)\n- requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable\n- requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable\n- requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 to disable the merge check\n- com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required builds)\n\n\n<strong>Merge strategy configuration deletion:</strong>\n\nAn explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty \"mergeConfig\" attribute. i.e: \n\n\n```{ \n    \"mergeConfig\": { \n    } \n} \n```\n\nUpon completion of this request, the effective configuration will be: \n\n- The configuration set for this repository's SCM type as set at the project level, if present, otherwise\n- the configuration set for this repository's SCM type as set at the instance level, if present, otherwise\n- the default configuration for this repository's SCM type\n\n\n",
        "operationId": "updatePullRequestSettings_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRepositoryPullRequestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The repository pull request settings for the context repository.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryPullRequestSettings"
                }
              }
            }
          },
          "400": {
            "description": "The repository pull request settings were not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get all reviewer groups",
        "description": "Retrieve a page of reviewer groups of a given scope.\n\nThe authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.",
        "operationId": "getReviewerGroups_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A `page` of reviewer group(s) of the provided scope and its inherited scope.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestReviewerGroup"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository scope supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Create reviewer group",
        "description": "Create a reviewer group.\n\nThe authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.",
        "operationId": "create_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the details of the reviewer group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestReviewerGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created reviewer group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestReviewerGroup"
                }
              }
            }
          },
          "400": {
            "description": "The request is missing a reviewer group name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository scope supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The new created name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get reviewer group",
        "description": "Retrieve a reviewer group.\n\nThe authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.",
        "operationId": "getReviewerGroup_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The reviewer group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestReviewerGroup"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The ID supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update reviewer group attributes",
        "description": "Update the attributes of a reviewer group.\n\nThe authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the attributes of the reviewer group to be updated. Only the attributes to be updated need to be present in this object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestReviewerGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated reviewer group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestReviewerGroup"
                }
              }
            }
          },
          "400": {
            "description": "The updated attribute does not meet the requirements. E.g. the name exceeds 50 characters, setting name to blank.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository scope supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The new updated name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Delete reviewer group",
        "description": "Deletes a reviewer group.\n\nThe authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.",
        "operationId": "delete_7",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successful"
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the reviewer group in this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied reviewer group ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}/users": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get reviewer group users",
        "description": "Retrieve a list of the users of a reviewer group.\n\nThis does not return all the users of the group, only the users who are licensed and have <b>REPO_READ</b> permission for the specified repository.\n\nThe authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of users of a reviewer group.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestApplicationUser"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrors"
                }
              }
            }
          },
          "404": {
            "description": "The ID supplied does not exist.d",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/RestErrors"
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/tags": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Find tag",
        "description": "Retrieve the tags matching the supplied <strong>filterText</strong> param. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this resource.",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterText",
            "in": "query",
            "description": "The text to match on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "The tags matching the supplied <strong>filterText</strong>.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestTag"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Create tag",
        "description": "Creates a tag using the information provided in the RestCreateTagRequest request \n\nThe authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this resource.",
        "operationId": "createTagForRepository",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request to create a tag containing a <strong>name</strong>, <strong>startPoint</strong>, and optionally a <strong>message</strong>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestCreateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestTag"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to write to the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/tags/{name}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get tag",
        "description": "Retrieve a tag in the specified repository. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this resource.",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the tag to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag which matches the supplied <strong>name</strong>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestTag"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to read the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified tag does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/watch": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Watch repository",
        "description": "Add the authenticated user as a watcher for the specified repository. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "watch_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The repository to watch.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestRepository"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The user is now watching the repository."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Stop watching repository",
        "description": "Remove the authenticated user as a watcher for the specified repository. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.",
        "operationId": "unwatch_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is no longer watching the repository."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Find webhooks",
        "description": "Find webhooks in this repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "findWebhooks_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "List of <code>com.atlassian.webhooks.WebhookEvent</code> IDs to filter for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "<code>true</code> if statistics should be provided for all found webhooks",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of webhooks.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to find webhooks in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Create webhook",
        "description": "Create a webhook for the repository specified via the URL. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "createWebhook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The webhook to be created for this repository.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A created webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhook"
                }
              }
            }
          },
          "400": {
            "description": "The webhook parameters were invalid or not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create webhooks in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/search": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Search webhooks",
        "description": "Search webhooks in this repository and parent project. This endpoint returns a superset of the results returned by the /webhooks endpoint because it allows filtering by project scope too, not just repository webhooks.\n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "searchWebhooks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeType",
            "in": "query",
            "description": "Scopes to filter by. This parameter can be specified once e.g. \"scopeType=repository\", or twice e.g. \"scopeType=repository&scopeType=project\", to filter by more than one scope level. ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "List of <code>com.atlassian.webhooks.WebhookEvent</code> ids to filter for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "<code>true</code> if statistics should be provided for all found webhooks",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of webhooks.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to find webhooks in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/test": {
      "post": {
        "tags": [
          "Repository"
        ],
        "summary": "Test webhook",
        "description": "Test connectivity to a specific endpoint. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "testWebhook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sslVerificationRequired",
            "in": "query",
            "description": "Whether SSL verification is required for the specified webhook URL. Default value is  <code>true</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The url in which to connect to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Basic authentication credentials, if required.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestWebhookCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhookRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to test a connection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get webhook",
        "description": "Get a webhook by ID. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getWebhook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "<code>true</code> if statistics should be provided for the webhook",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get a webhook in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist, or the webhook does not exist in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Repository"
        ],
        "summary": "Update webhook",
        "description": "Update an existing webhook. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "updateWebhook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of the existing webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The representation of the updated values for the webhook",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update a webhook in this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist, or the webhook does not exist in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Repository"
        ],
        "summary": "Delete webhook",
        "description": "Delete a webhook for the repository specified via the URL. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "deleteWebhook_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The ID of the webhook to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The webhook for the repository has been deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete webhooks in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist, or webhook does not exist in this repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/latest": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get last webhook invocation details",
        "description": "Get the latest invocations for a specific webhook. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getLatestInvocation_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The string ID of a specific event to retrieve the last invocation for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outcome",
            "in": "query",
            "description": "The outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all will be considered",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook invocation dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestDetailedInvocation"
                }
              }
            }
          },
          "204": {
            "description": "No webhook invocations exist."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get webhook invocations in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist, or the webhook does not exist in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get webhook statistics",
        "description": "Get the statistics for a specific webhook. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getStatistics_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The string ID of a specific event to retrieve the last invocation for. May be empty, in which case all events are considered",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook invocation dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestInvocationHistory"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get webhook statistics in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist, or the webhook does not exist in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics/summary": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Get webhook statistics summary",
        "description": "Get the statistics summary for a specific webhook. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.",
        "operationId": "getStatisticsSummary_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositorySlug",
            "in": "path",
            "description": "The repository slug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook invocation dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestInvocationHistory"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get webhook statistics summary in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The repository does not exist, or the webhook does not exist in the repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings-restriction": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get enforcing project setting",
        "description": "Get a specified project settings restriction for the given namespace, feature key and component key.\nNote that not providing the component key will **not** return restrictions for the namespace and feature key with a component key set.\n\nThe authenticated user must have **PROJECT_VIEW** permission for the target project to retrieve a settings restriction.",
        "operationId": "get_7",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "The namespace used to identify the provider of the feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentKey",
            "in": "query",
            "description": "The component key to uniquely identify individually restrictable subcomponents of a feature within the provided feature key and namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureKey",
            "in": "query",
            "description": "The feature key to uniquely identify the feature within the provided namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The settings restriction associated with the provided namespace and feature key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestProjectSettingsRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The settings restriction could not be retrieved because the provided parameters were invalid. Possible issues include:\n\n- The namespace was not provided, or longer than 255 characters\n- The featureKey was not provided, or longer than 255 characters\n- The provided componentKey was fewer than 2 characters, or longer than 255 characters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve a settings restriction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project, or settings restriction does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Enforce project restriction",
        "description": "Create a new project settings restriction for the given project.\n\nThe authenticated user must have **PROJECT_ADMIN** permission for the target project to create a settings restriction.",
        "operationId": "create_3",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The project settings restriction to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestProjectSettingsRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The settings restriction was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestProjectSettingsRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The settings restriction was not created because the request was invalid. Possible issues include:\n\n- The namespace was not provided, or longer than 255 characters\n- The featureKey was not provided, or longer than 255 characters\n- The provided componentKey was fewer than 2 characters, or longer than 255 characters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create a settings restriction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A settings restriction with the same namespace, featureKey and componentKey already exists on this project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Stop enforcing project restriction",
        "description": "Delete a specified project settings restriction.\n\nIf a restriction does not exist for the specified project, namespace, featureKey, and componentKey, the request will be ignored and a 204 response will be returned.\n\nThe authenticated user must have **PROJECT_ADMIN** permission for the target project to delete a settings restriction.",
        "operationId": "delete_9",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "A namespace used to identify the provider of the feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentKey",
            "in": "query",
            "description": "A key to uniquely identify individually restrictable subcomponents of a feature within the provided feature key and namespace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureKey",
            "in": "query",
            "description": "A key to uniquely identify the feature within the provided namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The specified settings restriction was successfully deleted or there were no existing restrictions that match the specified criteria."
          },
          "400": {
            "description": "The settings restriction was not deleted because the request was invalid. Possible issues include:\n\n- The namespace was not provided, or longer than 255 characters\n- The featureKey was not provided, or longer than 255 characters\n- The provided componentKey was fewer than 2 characters, or longer than 255 characters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete a settings restriction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings-restriction/all": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all enforcing project settings",
        "description": "Get all project settings restrictions for the given namespace and feature key, including those with a component key set.\n\nThe authenticated user must have **PROJECT_VIEW** permission for the target project to retrieve a settings restrictions.",
        "operationId": "getAll",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "A namespace used to identify the provider of the feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "featureKey",
            "in": "query",
            "description": "A key to uniquely identify the feature within the provided namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of settings restrictions associated with the provided namespace and feature key",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestProjectSettingsRestriction"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The settings restrictions could not be retrieved because the provided parameters were invalid. Possible issues include:\n\n- The namespace was not provided, or longer than 255 characters\n- The featureKey was not provided, or longer than 255 characters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve project settings restrictions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/auto-decline": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get auto decline settings",
        "description": "Retrieves the auto decline settings for the supplied project. Default settings are returned if no explicit settings have been set for the project.",
        "operationId": "getAutoDeclineSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The auto decline settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoDeclineSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the auto decline settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Create/Update auto decline settings",
        "description": "Creates or updates the auto decline settings for the supplied project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "setAutoDeclineSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The settings to create or update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAutoDeclineSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The auto decline settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoDeclineSettings"
                }
              }
            }
          },
          "400": {
            "description": "inactivityWeeks was not one of 1, 2, 4, 8, or, 12, or the enabled parameter was not included in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create or update the auto decline settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete auto decline settings",
        "description": "Delete auto decline settings for the supplied project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "deleteAutoDeclineSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The auto decline settings have been deleted successfully."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the auto decline settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/auto-merge": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get pull request auto-merge settings",
        "description": "Retrieves the pull request auto-merge settings for the supplied project. Default settings will be returned if no explicit settings have been set for the project\n\nThe authenticated user must have <strong>PROJECT_VIEW</strong> permission for this project to call the resource.",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The pull request auto-merge settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoMergeRestrictedSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the pull request auto-merge settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Create or update the pull request auto-merge settings",
        "description": "Creates or updates the pull request auto-merge settings for the supplied project, and applies the restriction action specified in the request.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "set",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The settings to create or update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestAutoMergeProjectSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The pull request auto-merge settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAutoMergeRestrictedSettings"
                }
              }
            }
          },
          "400": {
            "description": "The 'enabled' and 'restrictionAction' fields were not provided correctly.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create or update the pull request auto-merge settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete pull request auto-merge settings",
        "description": "Deletes pull request auto-merge settings for the supplied project.\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The pull request auto-merge settings"
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the pull request auto-merge settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/hooks": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository hooks",
        "description": "Retrieve a page of repository hooks for this project. \n\nThe authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.",
        "operationId": "getRepositoryHooks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The optional type to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "PRE_RECEIVE",
                "POST_RECEIVE"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of repository hooks with their associated enabled state.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepositoryHook"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the hooks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/hooks/{hookKey}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a repository hook",
        "description": "Retrieve a repository hook for this project. \n\nThe authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.",
        "operationId": "getRepositoryHook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the repository hooks with their associated enabled state for the supplied hookKey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryHook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to enable the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository hook does not exist for the given project, or the project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/hooks/{hookKey}/enabled": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Enable repository hook",
        "description": "Enable a repository hook for this project and optionally apply new configuration. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource. \n\nA JSON document may be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.",
        "operationId": "enableHook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "description": "The content length.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository hooks with their associated enabled state for the supplied hookKey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryHook"
                }
              }
            }
          },
          "400": {
            "description": "The settings specified are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to enable the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Disable repository hook",
        "description": "Disable a repository hook for this project. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "disableHook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The repository hooks with their associated enabled state for the supplied hookKey.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestRepositoryHook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to disable the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/hooks/{hookKey}/settings": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get repository hook settings",
        "description": "Retrieve the settings for a repository hook for this project. \n\nThe authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this resource.",
        "operationId": "getSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The hook key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The settings for the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to retrieve the hook settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update repository hook settings",
        "description": "Modify the settings for a repository hook for this project. \n\nThe service will reject any settings which are too large, the current limit is 32KB once serialized. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource. \n\nA JSON document can be provided to use as the settings for the hook. These structure and validity of the document is decided by the plugin providing the hook.",
        "operationId": "setSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hookKey",
            "in": "path",
            "description": "The complete module key of the hook module.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The raw settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExampleSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The settings for the hook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleSettings"
                }
              }
            }
          },
          "400": {
            "description": "The settings specified are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to modify the hook settings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project or hook does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/pull-requests/{scmId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get merge strategy",
        "description": "Retrieve the merge strategy configuration for this project and SCM. \n\nThe authenticated user must have <strong>PROJECT_READ</strong> permission for the context repository to call this resource.",
        "operationId": "getPullRequestSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scmId",
            "in": "path",
            "description": "The SCM to get strategies for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The merge configuration of the request project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestSettings"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to see the request repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The request repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update merge strategy",
        "description": "Update the pull request merge strategy configuration for this project and SCM. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context repository to call this resource. \n\nOnly the strategies provided will be enabled, the default must be set and included in the set of strategies. \n\nAn explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty \"mergeConfig\" attribute. i.e: \n<pre>{ \n    \"mergeConfig\": {} \n} \n</pre>\n\nUpon completion of this request, the effective configuration will be the configuration explicitly set for the SCM, or if no such explicit configuration is set then the default configuration will be used.",
        "operationId": "updatePullRequestSettings",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scmId",
            "in": "path",
            "description": "The SCM to get strategies for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPullRequestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The merge configuration of the request project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestPullRequestSettings"
                }
              }
            }
          },
          "400": {
            "description": "The repository pull request merge strategies were not updated due to a validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to administrate the specified repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified repository does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/reviewer-groups": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get all reviewer groups",
        "description": "Retrieve a page of reviewer groups of a given scope.\n\nThe authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.",
        "operationId": "getReviewerGroups",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of reviewer group(s) of the provided scope.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestReviewerGroup"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project scope supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Create reviewer group",
        "description": "Create a reviewer group.\n\nThe authenticated user must have <b>PROJECT_ADMIN</b> permission for the specified project to call this resource.",
        "operationId": "create_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The reviewer group to be create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestReviewerGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created reviewer group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestReviewerGroup"
                }
              }
            }
          },
          "400": {
            "description": "The request is missing a reviewer group name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project scope supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The new created name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Get reviewer group",
        "description": "Retrieve a reviewer group.\n\nThe authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.",
        "operationId": "getReviewerGroup",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The reviewer group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestReviewerGroup"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The ID supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Update reviewer group attributes",
        "description": "Update the attributes of a reviewer group.\n\nThe authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the attributes of the reviewer group to be updated. Only the attributes to be updated need to be present in this object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestReviewerGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A page of changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestReviewerGroup"
                }
              }
            }
          },
          "400": {
            "description": "The updated attribute does not meet the requirements. E.g. the name exceeds 50 characters, setting name to blank.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to view the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project scope supplied does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The new updated name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Pull Requests"
        ],
        "summary": "Delete reviewer group",
        "description": "Deletes a reviewer group.\n\nThe authenticated user must have <b>PROJECT_ADMIN</b> permission for the specified project to call this resource.",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer group to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete the reviewer group in this project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the supplied reviewer group ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/webhooks": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Find webhooks",
        "description": "Find webhooks in this project. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "findWebhooks",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "List of <code>com.atlassian.webhooks.WebhookEvent</code> IDs to filter for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "<code>true</code> if statistics should be provided for all found webhooks",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of webhooks.",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to find webhooks in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create webhook",
        "description": "Create a webhook for the project specified via the URL. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "createWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The webhook to be created for this project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A created webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhook"
                }
              }
            }
          },
          "400": {
            "description": "The webhook parameters were invalid or not supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to create webhooks in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/webhooks/test": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Test webhook",
        "description": "Test connectivity to a specific endpoint. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "testWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sslVerificationRequired",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The url in which to connect to",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Basic authentication credentials, if required.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestWebhookCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhookRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to test a connection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get webhook",
        "description": "Get a webhook by ID. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "getWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statistics",
            "in": "query",
            "description": "<code>true</code> if statistics should be provided for the webhook",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get a webhook in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist, or the webhook does not exist in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update webhook",
        "description": "Update an existing webhook. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "Id of the existing webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The representation of the updated values for the webhook",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestWebhook"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to update a webhook in this project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist, or the webhook does not exist in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete webhook",
        "description": "Delete a webhook for the project specified via the URL. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The ID of the webhook to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The webhook for the project has been deleted."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to delete webhooks in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist, or webhook does not exist in this project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/webhooks/{webhookId}/latest": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get last webhook invocation details",
        "description": "Get the latest invocations for a specific webhook. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "getLatestInvocation",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The string ID of a specific event to retrieve the last invocation for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outcome",
            "in": "query",
            "description": "The outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all will be considered",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook invocation dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestDetailedInvocation"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get webhook invocations in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist, or the webhook does not exist in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/webhooks/{webhookId}/statistics": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get webhook statistics",
        "description": "Get the statistics for a specific webhook. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "getStatistics",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The string ID of a specific event to retrieve the last invocation for. May be empty, in which case all events are considered",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook invocation dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestInvocationHistory"
                }
              }
            }
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get webhook statistics in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The specified project does not exist, or the webhook does not exist in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/projects/{projectKey}/webhooks/{webhookId}/statistics/summary": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get webhook statistics summary",
        "description": "Get the statistics summary for a specific webhook. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this resource.",
        "operationId": "getStatisticsSummary",
        "parameters": [
          {
            "name": "projectKey",
            "in": "path",
            "description": "The project key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "ID of the webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A webhook invocation dataset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestInvocationHistory"
                }
              }
            }
          },
          "204": {
            "description": "No webhook invocations exist."
          },
          "401": {
            "description": "The currently authenticated user has insufficient permissions to get webhook statistics summary in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The project does not exist, or the webhook does not exist in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/latest/repos": {
      "get": {
        "tags": [
          "Repository"
        ],
        "summary": "Search for repositories",
        "description": "Retrieve a page of repositories based on query parameters that control the search. See the documentation of the parameters for more details. \n\nThis resource is anonymously accessible. \n\n<b>Note on permissions.</b> In absence of the <code>permission</code> query parameter the implicit 'read' permission is assumed. Please note that this permission is lower than the <tt>REPO_READ</tt> permission rather than being equal to it. The implicit 'read' permission for a given repository is assigned to any user that has any of the higher permissions, such as <tt>REPO_READ</tt>, as well as to anonymous users if the repository is marked as public. The important implication of the above is that an anonymous request to this resource with a permission level <tt>REPO_READ</tt> is guaranteed to receive an empty list of repositories as a result. For anonymous requests it is therefore recommended to not specify the <tt>permission</tt> parameter at all.",
        "operationId": "getRepositories_1",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose are <tt>ACTIVE</tt>, <tt>ARCHIVED</tt> or <tt>ALL</tt> for both. The match performed is case-insensitive. This filter defaults to <tt>ACTIVE</tt> when not set. <em>Available since 8.0</em>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectname",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose project's name matches this parameter's value. The match performed is case-insensitive and any leading and/or trailing whitespace characters on the <code>projectname</code> parameter will be stripped.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectkey",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose project's key matches this parameter's value. The match performed is case-insensitive and any leading  and/or trailing whitespace characters on the <code>projectKey</code> parameter will be stripped. <em>Available since 8.0</em>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list based on the repositories visibility. Valid values are <em>public</em> or <em>private</em>.",
            "schema": {
              "type": "string",
              "enum": [
                "public",
                "private"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "(optional) if specified, this will limit the resulting repository list to ones whose name matches this parameter's value. The match performed is case-insensitive and any leading and/or trailing whitespace characters on the <code>name</code> parameter will be stripped.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "description": "(optional) if specified, it must be a valid repository permission level name and will limit the resulting repository list to ones that the requesting user has the specified permission level to. If not specified, the default implicit 'read' permission level will be assumed. The currently supported explicit permission values are <tt>REPO_READ</tt>, <tt>REPO_WRITE</tt> and <tt>REPO_ADMIN</tt>.",
            "schema": {
              "type": "string",
              "enum": [
                "REPO_READ",
                "REPO_WRITE",
                "REPO_ADMIN"
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "(optional) if specified, it must be a valid repository state name and will limit the resulting repository list to ones that are in the specified state. The currently supported explicit state values are <tt>AVAILABLE</tt>, <tt>INITIALISING</tt>, <tt>INITIALISATION_FAILED</tt> and <tt>OFFLINE</tt>.<br> <em>Available since 5.13</em>",
            "schema": {
              "type": "string",
              "enum": [
                "AVAILABLE",
                "INITIALISING",
                "INITIALISATION_FAILED",
                "OFFLINE"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start number for the page (inclusive). If not passed, first page is assumed.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 0
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return. If not passed, a page size of 25 is used.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 25
            },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A page of repositories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "values": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestRepository"
                      }
                    },
                    "size": {
                      "type": "number",
                      "example": 1
                    },
                    "isLastPage": {
                      "type": "boolean"
                    },
                    "nextPageStart": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "start": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "limit": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The <code>visibility</code> parameter contains an invalid value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RestErrorMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RestAccessToken": {
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "example": "My access token"
          },
          "id": {
            "type": "string",
            "example": "252973515069"
          }
        }
      },
      "RestAccessTokenRequest": {
        "type": "object",
        "properties": {
          "expiryDays": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "example": "My access token"
          },
          "permissions": {
            "uniqueItems": true,
            "type": "array",
            "example": [
              "REPO_ADMIN",
              "PROJECT_READ"
            ],
            "items": {
              "type": "string",
              "example": "[\"REPO_ADMIN\",\"PROJECT_READ\"]"
            }
          }
        }
      },
      "RestErrorMessage": {
        "properties": {
          "exceptionName": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "context": {
            "type": "string"
          }
        }
      },
      "RestRawAccessToken": {
        "properties": {
          "token": {
            "type": "string",
            "example": "MjUyOTczNTE1MDY5On2rDbID2EgYpH8AVOECHv0saruQ"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "example": "My access token"
          },
          "id": {
            "type": "string",
            "example": "252973515069"
          }
        }
      },
      "RefType": {},
      "RestBranch": {
        "properties": {
          "displayId": {
            "type": "string",
            "readOnly": true
          },
          "default": {
            "type": "boolean",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/RefType"
          },
          "latestCommit": {
            "type": "string",
            "readOnly": true,
            "example": "8d51122def5632836d1cb1026e879069e10a1e13"
          },
          "latestChangeset": {
            "type": "string",
            "readOnly": true,
            "example": "8d51122def5632836d1cb1026e879069e10a1e13"
          },
          "id": {
            "type": "string",
            "example": "refs/heads/master"
          }
        }
      },
      "RestBranchCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the branch to be created"
          },
          "startPoint": {
            "maxLength": 40,
            "type": "string",
            "description": "Commit ID from which the branch is created"
          }
        }
      },
      "RestBranchDeleteRequest": {
        "type": "object",
        "properties": {
          "dryRun": {
            "type": "boolean",
            "description": "Don't actually delete the ref name, just do a dry run"
          },
          "endPoint": {
            "maxLength": 40,
            "type": "string",
            "description": "Commit ID that the provided ref name is expected to point to"
          },
          "name": {
            "type": "string",
            "description": "Name of the ref to be deleted"
          }
        }
      },
      "RestMinimalRef": {
        "properties": {
          "displayId": {
            "type": "string",
            "example": "master"
          },
          "id": {
            "type": "string",
            "example": "refs/heads/master"
          },
          "type": {
            "type": "string",
            "enum": [
              "BRANCH",
              "TAG"
            ]
          }
        }
      },
      "RestApplicationUser": {
        "properties": {
          "slug": {
            "type": "string",
            "example": "jcitizen"
          },
          "emailAddress": {
            "type": "string",
            "example": "jane@example.com"
          },
          "active": {
            "type": "boolean"
          },
          "links": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          },
          "name": {
            "type": "string",
            "example": "jcitizen"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 101
          },
          "type": {
            "type": "string",
            "enum": [
              "NORMAL",
              "SERVICE"
            ]
          },
          "displayName": {
            "type": "string",
            "example": "Jane Citizen"
          },
          "avatarUrl": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "RestDefaultReviewersRequest": {
        "type": "object",
        "properties": {
          "requiredApprovals": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApplicationUser"
            }
          },
          "sourceMatcher": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "main"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/main"
              },
              "type": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "enum": [
                      "ANY_REF",
                      "BRANCH",
                      "PATTERN",
                      "MODEL_CATEGORY",
                      "MODEL_BRANCH"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "example": "Branch"
                  }
                }
              }
            }
          },
          "targetMatcher": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "main"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/main"
              },
              "type": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "enum": [
                      "ANY_REF",
                      "BRANCH",
                      "PATTERN",
                      "MODEL_CATEGORY",
                      "MODEL_BRANCH"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "example": "Branch"
                  }
                }
              }
            }
          }
        }
      },
      "RestErrors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestErrorMessage"
            }
          }
        }
      },
      "RestPullRequestCondition": {
        "properties": {
          "targetRefMatcher": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "main"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/main"
              },
              "type": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Branch"
                  },
                  "id": {
                    "type": "string",
                    "enum": [
                      "ANY_REF",
                      "BRANCH",
                      "PATTERN",
                      "MODEL_CATEGORY",
                      "MODEL_BRANCH"
                    ]
                  }
                }
              }
            }
          },
          "requiredApprovals": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "sourceRefMatcher": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "main"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/main"
              },
              "type": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Branch"
                  },
                  "id": {
                    "type": "string",
                    "enum": [
                      "ANY_REF",
                      "BRANCH",
                      "PATTERN",
                      "MODEL_CATEGORY",
                      "MODEL_BRANCH"
                    ]
                  }
                }
              }
            }
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApplicationUser"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            },
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          }
        }
      },
      "RestGitTagCreateRequest": {
        "type": "object",
        "properties": {
          "force": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "example": "A new release tag"
          },
          "name": {
            "type": "string",
            "example": "release-tag"
          },
          "startPoint": {
            "type": "string",
            "example": "refs/heads/master"
          },
          "type": {
            "type": "string",
            "enum": [
              "ANNOTATED",
              "LIGHTWEIGHT"
            ]
          }
        }
      },
      "RestPullRequestRebaseRequest": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        }
      },
      "RestPullRequestRebaseResult": {
        "properties": {
          "refChange": {
            "type": "object",
            "properties": {
              "toHash": {
                "type": "string",
                "example": "d6edcbf924697ab811a867421dab60d954ccad99"
              },
              "fromHash": {
                "type": "string",
                "example": "6053a1eaa1c009dd11092d09a72f3c41af1b59ad"
              },
              "refId": {
                "type": "string",
                "example": "refs/heads/master"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ADD",
                  "DELETE",
                  "UPDATE"
                ]
              },
              "ref": {
                "type": "object",
                "properties": {
                  "displayId": {
                    "type": "string",
                    "example": "master"
                  },
                  "id": {
                    "type": "string",
                    "example": "refs/heads/master"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "BRANCH",
                      "TAG"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "RestPullRequestRebaseability": {
        "properties": {
          "vetoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestRepositoryHookVeto"
            }
          }
        }
      },
      "RestRepositoryHookVeto": {
        "properties": {
          "detailedMessage": {
            "type": "string",
            "example": "You have insufficient permissions to rebase 'refs/heads/feature-branch'."
          },
          "summaryMessage": {
            "type": "string",
            "example": "Insufficient branch permissions"
          }
        }
      },
      "RestTag": {
        "properties": {
          "hash": {
            "type": "string",
            "example": "8d51122def5632836d1cb1026e879069e10a1e13"
          },
          "latestCommit": {
            "type": "string",
            "readOnly": true,
            "example": "8d51122def5632836d1cb1026e879069e10a1e13"
          },
          "latestChangeset": {
            "type": "string",
            "readOnly": true,
            "example": "8d51122def5632836d1cb1026e879069e10a1e13"
          },
          "displayId": {
            "type": "string",
            "example": "master"
          },
          "id": {
            "type": "string",
            "example": "refs/heads/master"
          },
          "type": {
            "type": "string",
            "enum": [
              "BRANCH",
              "TAG"
            ]
          }
        }
      },
      "RestCommit": {
        "properties": {
          "committerTimestamp": {
            "type": "integer",
            "format": "int64",
            "example": 1449075830
          },
          "committer": {
            "type": "object",
            "properties": {
              "emailAddress": {
                "type": "string",
                "example": "charlie@example.com"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "Charlie"
              }
            }
          },
          "authorTimestamp": {
            "type": "integer",
            "format": "int64",
            "example": 1359075920
          },
          "author": {
            "type": "object",
            "properties": {
              "emailAddress": {
                "type": "string",
                "example": "charlie@example.com"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "Charlie"
              }
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestMinimalCommit"
            }
          },
          "message": {
            "type": "string",
            "example": "More work on feature 1"
          },
          "displayId": {
            "type": "string",
            "example": "abcdef0"
          },
          "id": {
            "type": "string",
            "example": "abcdef0123abcdef4567abcdef8987abcdef6543"
          }
        }
      },
      "RestMinimalCommit": {
        "properties": {
          "displayId": {
            "type": "string",
            "example": "abcdef0"
          },
          "id": {
            "type": "string",
            "example": "abcdef0123abcdef4567abcdef8987abcdef6543"
          }
        }
      },
      "RestProject": {
        "properties": {
          "avatar": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "example": "The description for my cool project"
          },
          "namespace": {
            "type": "string",
            "readOnly": true,
            "deprecated": true
          },
          "scope": {
            "type": "string",
            "readOnly": true,
            "example": "PROJECT"
          },
          "name": {
            "pattern": "^[^~].*",
            "type": "string",
            "readOnly": true,
            "example": "My Cool Project"
          },
          "key": {
            "type": "string",
            "example": "PRJ"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "NORMAL",
              "PERSONAL"
            ]
          },
          "public": {
            "type": "boolean",
            "readOnly": true
          },
          "links": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          }
        }
      },
      "RestRepository": {
        "properties": {
          "hierarchyId": {
            "type": "string",
            "readOnly": true,
            "example": "e3c939f9ef4a7fae272e"
          },
          "scmId": {
            "type": "string",
            "example": "git"
          },
          "slug": {
            "type": "string",
            "example": "my-repo"
          },
          "statusMessage": {
            "type": "string",
            "readOnly": true,
            "example": "Available"
          },
          "archived": {
            "type": "boolean",
            "readOnly": true
          },
          "forkable": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultBranch": {
            "type": "string",
            "readOnly": true,
            "example": "main"
          },
          "partition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "relatedLinks": {
            "type": "object",
            "properties": {},
            "readOnly": true
          },
          "project": {
            "required": [
              "key"
            ],
            "type": "object",
            "properties": {
              "avatar": {
                "type": "string"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "The description for my cool project"
              },
              "namespace": {
                "type": "string",
                "readOnly": true,
                "deprecated": true
              },
              "scope": {
                "type": "string",
                "readOnly": true,
                "example": "PROJECT"
              },
              "name": {
                "pattern": "^[^~].*",
                "type": "string",
                "readOnly": true,
                "example": "My Cool Project"
              },
              "key": {
                "type": "string",
                "example": "PRJ"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "NORMAL",
                  "PERSONAL"
                ]
              },
              "public": {
                "type": "boolean",
                "readOnly": true
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "example": "My repo description"
          },
          "scope": {
            "type": "string",
            "readOnly": true,
            "example": "REPOSITORY"
          },
          "origin": {
            "type": "object",
            "properties": {
              "hierarchyId": {
                "type": "string",
                "readOnly": true,
                "example": "e3c939f9ef4a7fae272e"
              },
              "scmId": {
                "type": "string",
                "example": "git"
              },
              "slug": {
                "type": "string",
                "example": "my-repo"
              },
              "statusMessage": {
                "type": "string",
                "readOnly": true,
                "example": "Available"
              },
              "archived": {
                "type": "boolean",
                "readOnly": true
              },
              "forkable": {
                "type": "boolean",
                "readOnly": true
              },
              "defaultBranch": {
                "type": "string",
                "readOnly": true,
                "example": "main"
              },
              "partition": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "relatedLinks": {
                "type": "object",
                "properties": {},
                "readOnly": true
              },
              "project": {
                "required": [
                  "key"
                ],
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "The description for my cool project"
                  },
                  "namespace": {
                    "type": "string",
                    "readOnly": true,
                    "deprecated": true
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "PROJECT"
                  },
                  "name": {
                    "pattern": "^[^~].*",
                    "type": "string",
                    "readOnly": true,
                    "example": "My Cool Project"
                  },
                  "key": {
                    "type": "string",
                    "example": "PRJ"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "NORMAL",
                      "PERSONAL"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "My repo description"
              },
              "scope": {
                "type": "string",
                "readOnly": true,
                "example": "REPOSITORY"
              },
              "name": {
                "type": "string",
                "example": "My repo"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "state": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "AVAILABLE",
                  "INITIALISATION_FAILED",
                  "INITIALISING",
                  "OFFLINE"
                ]
              },
              "public": {
                "type": "boolean",
                "readOnly": true
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            },
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "My repo"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "AVAILABLE",
              "INITIALISATION_FAILED",
              "INITIALISING",
              "OFFLINE"
            ]
          },
          "public": {
            "type": "boolean",
            "readOnly": true
          },
          "links": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          }
        }
      },
      "RestRefRestriction": {
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApplicationUser"
            }
          },
          "accessKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSshAccessKey"
            }
          },
          "groups": {
            "type": "array",
            "example": [
              "group_a",
              "group_b"
            ],
            "items": {
              "type": "string",
              "example": "[\"group_a\",\"group_b\"]"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            },
            "readOnly": true
          },
          "matcher": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "main"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/main"
              },
              "type": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Branch"
                  },
                  "id": {
                    "type": "string",
                    "enum": [
                      "ANY_REF",
                      "BRANCH",
                      "PATTERN",
                      "MODEL_CATEGORY",
                      "MODEL_BRANCH"
                    ]
                  }
                }
              }
            }
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "type": {
            "type": "string",
            "example": "pull-request-only"
          }
        }
      },
      "RestRestrictionRequest": {
        "type": "object",
        "properties": {
          "accessKeyIds": {
            "type": "array",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "accessKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSshAccessKey"
            }
          },
          "groupNames": {
            "type": "array",
            "example": [
              "bitbucket-developers"
            ],
            "items": {
              "type": "string",
              "example": "[\"bitbucket-developers\"]"
            }
          },
          "groups": {
            "type": "array",
            "example": [
              "group_a",
              "group_b"
            ],
            "items": {
              "type": "string",
              "example": "[\"group_a\",\"group_b\"]"
            }
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "matcher": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "main"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/main"
              },
              "type": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "enum": [
                      "ANY_REF",
                      "BRANCH",
                      "PATTERN",
                      "MODEL_CATEGORY",
                      "MODEL_BRANCH"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "example": "Branch"
                  }
                }
              }
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            },
            "readOnly": true
          },
          "type": {
            "type": "string",
            "example": "pull-request-only"
          },
          "userSlugs": {
            "type": "array",
            "example": [
              "bman",
              "tstark",
              "hulk"
            ],
            "items": {
              "type": "string",
              "example": "[\"bman\",\"tstark\",\"hulk\"]"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestApplicationUser"
            }
          }
        }
      },
      "RestSshAccessKey": {
        "properties": {
          "project": {
            "required": [
              "key"
            ],
            "type": "object",
            "properties": {
              "avatar": {
                "type": "string"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "The description for my cool project"
              },
              "namespace": {
                "type": "string",
                "readOnly": true,
                "deprecated": true
              },
              "scope": {
                "type": "string",
                "readOnly": true,
                "example": "PROJECT"
              },
              "name": {
                "pattern": "^[^~].*",
                "type": "string",
                "readOnly": true,
                "example": "My Cool Project"
              },
              "key": {
                "type": "string",
                "example": "PRJ"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "NORMAL",
                  "PERSONAL"
                ]
              },
              "public": {
                "type": "boolean",
                "readOnly": true
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          },
          "repository": {
            "type": "object",
            "properties": {
              "hierarchyId": {
                "type": "string",
                "readOnly": true,
                "example": "e3c939f9ef4a7fae272e"
              },
              "scmId": {
                "type": "string",
                "example": "git"
              },
              "slug": {
                "type": "string",
                "example": "my-repo"
              },
              "statusMessage": {
                "type": "string",
                "readOnly": true,
                "example": "Available"
              },
              "archived": {
                "type": "boolean",
                "readOnly": true
              },
              "forkable": {
                "type": "boolean",
                "readOnly": true
              },
              "defaultBranch": {
                "type": "string",
                "readOnly": true,
                "example": "main"
              },
              "partition": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "relatedLinks": {
                "type": "object",
                "properties": {},
                "readOnly": true
              },
              "project": {
                "required": [
                  "key"
                ],
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "The description for my cool project"
                  },
                  "namespace": {
                    "type": "string",
                    "readOnly": true,
                    "deprecated": true
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "PROJECT"
                  },
                  "name": {
                    "pattern": "^[^~].*",
                    "type": "string",
                    "readOnly": true,
                    "example": "My Cool Project"
                  },
                  "key": {
                    "type": "string",
                    "example": "PRJ"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "NORMAL",
                      "PERSONAL"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "My repo description"
              },
              "scope": {
                "type": "string",
                "readOnly": true,
                "example": "REPOSITORY"
              },
              "origin": {
                "type": "object",
                "properties": {
                  "hierarchyId": {
                    "type": "string",
                    "readOnly": true,
                    "example": "e3c939f9ef4a7fae272e"
                  },
                  "scmId": {
                    "type": "string",
                    "example": "git"
                  },
                  "slug": {
                    "type": "string",
                    "example": "my-repo"
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Available"
                  },
                  "archived": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "forkable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "defaultBranch": {
                    "type": "string",
                    "readOnly": true,
                    "example": "main"
                  },
                  "partition": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "relatedLinks": {
                    "type": "object",
                    "properties": {},
                    "readOnly": true
                  },
                  "project": {
                    "required": [
                      "key"
                    ],
                    "type": "object",
                    "properties": {
                      "avatar": {
                        "type": "string"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "The description for my cool project"
                      },
                      "namespace": {
                        "type": "string",
                        "readOnly": true,
                        "deprecated": true
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "PROJECT"
                      },
                      "name": {
                        "pattern": "^[^~].*",
                        "type": "string",
                        "readOnly": true,
                        "example": "My Cool Project"
                      },
                      "key": {
                        "type": "string",
                        "example": "PRJ"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "NORMAL",
                          "PERSONAL"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "My repo description"
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "REPOSITORY"
                  },
                  "name": {
                    "type": "string",
                    "example": "My repo"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "state": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "AVAILABLE",
                      "INITIALISATION_FAILED",
                      "INITIALISING",
                      "OFFLINE"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "name": {
                "type": "string",
                "example": "My repo"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "state": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "AVAILABLE",
                  "INITIALISATION_FAILED",
                  "INITIALISING",
                  "OFFLINE"
                ]
              },
              "public": {
                "type": "boolean",
                "readOnly": true
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          },
          "key": {
            "type": "object",
            "properties": {
              "algorithmType": {
                "type": "string"
              },
              "bitLength": {
                "type": "integer",
                "format": "int32"
              },
              "createdDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "lastAuthenticated": {
                "type": "string",
                "readOnly": true,
                "example": "1630041546434"
              },
              "expiryDays": {
                "type": "integer",
                "format": "int32",
                "example": 30
              },
              "fingerprint": {
                "type": "string",
                "readOnly": true,
                "example": "Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI"
              },
              "text": {
                "type": "string",
                "example": "ssh-rsa AAAAB3... me@127.0.0.1"
              },
              "label": {
                "type": "string",
                "example": "me@127.0.0.1"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 1
              }
            }
          },
          "permission": {
            "type": "string",
            "enum": [
              "USER_ADMIN",
              "PROJECT_VIEW",
              "REPO_READ",
              "REPO_WRITE",
              "REPO_ADMIN",
              "PROJECT_READ",
              "PROJECT_WRITE",
              "REPO_CREATE",
              "PROJECT_ADMIN",
              "LICENSED_USER",
              "PROJECT_CREATE",
              "ADMIN",
              "SYS_ADMIN"
            ]
          }
        }
      },
      "RestSshKey": {
        "properties": {
          "algorithmType": {
            "type": "string"
          },
          "bitLength": {
            "type": "integer",
            "format": "int32"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastAuthenticated": {
            "type": "string",
            "readOnly": true,
            "example": "1630041546434"
          },
          "expiryDays": {
            "type": "integer",
            "format": "int32",
            "example": 30
          },
          "fingerprint": {
            "type": "string",
            "readOnly": true,
            "example": "Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI"
          },
          "text": {
            "type": "string",
            "example": "ssh-rsa AAAAB3... me@127.0.0.1"
          },
          "label": {
            "type": "string",
            "example": "me@127.0.0.1"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 1
          }
        }
      },
      "Context": {
        "type": "object",
        "properties": {
          "commitMessage": {
            "type": "string",
            "example": "Merging in latest from upstream."
          }
        }
      },
      "RestRefSyncRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "example": "MERGE",
            "enum": [
              "DISCARD",
              "MERGE",
              "REBASE"
            ]
          },
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "refId": {
            "type": "string",
            "example": "refs/heads/master"
          }
        }
      },
      "RestRefSyncStatus": {
        "properties": {
          "divergedRefs": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "boolean"
              },
              "state": {
                "type": "string",
                "enum": [
                  "AHEAD",
                  "DIVERGED",
                  "ORPHANED"
                ]
              },
              "displayId": {
                "type": "string",
                "example": "master"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/master"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BRANCH",
                  "TAG"
                ]
              }
            },
            "readOnly": true
          },
          "lastSync": {
            "type": "number",
            "readOnly": true,
            "example": 1331038800000
          },
          "orphanedRefs": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "boolean"
              },
              "state": {
                "type": "string",
                "enum": [
                  "AHEAD",
                  "DIVERGED",
                  "ORPHANED"
                ]
              },
              "displayId": {
                "type": "string",
                "example": "master"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/master"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BRANCH",
                  "TAG"
                ]
              }
            },
            "readOnly": true
          },
          "aheadRefs": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "boolean"
              },
              "state": {
                "type": "string",
                "enum": [
                  "AHEAD",
                  "DIVERGED",
                  "ORPHANED"
                ]
              },
              "displayId": {
                "type": "string",
                "example": "master"
              },
              "id": {
                "type": "string",
                "example": "refs/heads/master"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BRANCH",
                  "TAG"
                ]
              }
            },
            "readOnly": true
          },
          "available": {
            "type": "boolean",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "RestRejectedRef": {
        "properties": {
          "tag": {
            "type": "boolean"
          },
          "state": {
            "type": "string",
            "enum": [
              "AHEAD",
              "DIVERGED",
              "ORPHANED"
            ]
          },
          "displayId": {
            "type": "string",
            "example": "master"
          },
          "id": {
            "type": "string",
            "example": "refs/heads/master"
          },
          "type": {
            "type": "string",
            "enum": [
              "BRANCH",
              "TAG"
            ]
          }
        }
      },
      "RestPullRequestParticipant": {
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            }
          },
          "lastReviewedCommit": {
            "type": "string",
            "example": "7549846524f8aed2bd1c0249993ae1bf9d3c9998"
          },
          "approved": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "UNAPPROVED",
              "NEEDS_WORK",
              "APPROVED"
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "AUTHOR",
              "REVIEWER",
              "PARTICIPANT"
            ]
          }
        }
      },
      "RestPullRequest": {
        "properties": {
          "closedDate": {
            "type": "integer",
            "format": "int64",
            "example": 19990759200
          },
          "fromRef": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "feature-ABC-1233"
              },
              "latestCommit": {
                "type": "string",
                "example": "babecafebabecafebabecafebabecafebabecafe"
              },
              "repository": {
                "type": "object",
                "properties": {
                  "hierarchyId": {
                    "type": "string",
                    "readOnly": true,
                    "example": "e3c939f9ef4a7fae272e"
                  },
                  "scmId": {
                    "type": "string",
                    "example": "git"
                  },
                  "slug": {
                    "type": "string",
                    "example": "my-repo"
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Available"
                  },
                  "archived": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "forkable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "defaultBranch": {
                    "type": "string",
                    "readOnly": true,
                    "example": "main"
                  },
                  "partition": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "relatedLinks": {
                    "type": "object",
                    "properties": {},
                    "readOnly": true
                  },
                  "project": {
                    "required": [
                      "key"
                    ],
                    "type": "object",
                    "properties": {
                      "avatar": {
                        "type": "string"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "The description for my cool project"
                      },
                      "namespace": {
                        "type": "string",
                        "readOnly": true,
                        "deprecated": true
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "PROJECT"
                      },
                      "name": {
                        "pattern": "^[^~].*",
                        "type": "string",
                        "readOnly": true,
                        "example": "My Cool Project"
                      },
                      "key": {
                        "type": "string",
                        "example": "PRJ"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "NORMAL",
                          "PERSONAL"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "My repo description"
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "REPOSITORY"
                  },
                  "origin": {
                    "type": "object",
                    "properties": {
                      "hierarchyId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "e3c939f9ef4a7fae272e"
                      },
                      "scmId": {
                        "type": "string",
                        "example": "git"
                      },
                      "slug": {
                        "type": "string",
                        "example": "my-repo"
                      },
                      "statusMessage": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Available"
                      },
                      "archived": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "forkable": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "defaultBranch": {
                        "type": "string",
                        "readOnly": true,
                        "example": "main"
                      },
                      "partition": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "relatedLinks": {
                        "type": "object",
                        "properties": {},
                        "readOnly": true
                      },
                      "project": {
                        "required": [
                          "key"
                        ],
                        "type": "object",
                        "properties": {
                          "avatar": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "writeOnly": true
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "The description for my cool project"
                          },
                          "namespace": {
                            "type": "string",
                            "readOnly": true,
                            "deprecated": true
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "PROJECT"
                          },
                          "name": {
                            "pattern": "^[^~].*",
                            "type": "string",
                            "readOnly": true,
                            "example": "My Cool Project"
                          },
                          "key": {
                            "type": "string",
                            "example": "PRJ"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "NORMAL",
                              "PERSONAL"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "My repo description"
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "REPOSITORY"
                      },
                      "name": {
                        "type": "string",
                        "example": "My repo"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "state": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "AVAILABLE",
                          "INITIALISATION_FAILED",
                          "INITIALISING",
                          "OFFLINE"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "My repo"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "state": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "AVAILABLE",
                      "INITIALISATION_FAILED",
                      "INITIALISING",
                      "OFFLINE"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "id": {
                "type": "string",
                "example": "refs/heads/feature-ABC-123"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BRANCH",
                  "TAG"
                ]
              }
            }
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestPullRequestParticipant"
            }
          },
          "reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestPullRequestParticipant"
            }
          },
          "createdDate": {
            "type": "integer",
            "format": "int64",
            "example": 13590759200
          },
          "toRef": {
            "type": "object",
            "properties": {
              "displayId": {
                "type": "string",
                "example": "feature-ABC-1233"
              },
              "latestCommit": {
                "type": "string",
                "example": "babecafebabecafebabecafebabecafebabecafe"
              },
              "repository": {
                "type": "object",
                "properties": {
                  "hierarchyId": {
                    "type": "string",
                    "readOnly": true,
                    "example": "e3c939f9ef4a7fae272e"
                  },
                  "scmId": {
                    "type": "string",
                    "example": "git"
                  },
                  "slug": {
                    "type": "string",
                    "example": "my-repo"
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Available"
                  },
                  "archived": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "forkable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "defaultBranch": {
                    "type": "string",
                    "readOnly": true,
                    "example": "main"
                  },
                  "partition": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "relatedLinks": {
                    "type": "object",
                    "properties": {},
                    "readOnly": true
                  },
                  "project": {
                    "required": [
                      "key"
                    ],
                    "type": "object",
                    "properties": {
                      "avatar": {
                        "type": "string"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "The description for my cool project"
                      },
                      "namespace": {
                        "type": "string",
                        "readOnly": true,
                        "deprecated": true
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "PROJECT"
                      },
                      "name": {
                        "pattern": "^[^~].*",
                        "type": "string",
                        "readOnly": true,
                        "example": "My Cool Project"
                      },
                      "key": {
                        "type": "string",
                        "example": "PRJ"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "NORMAL",
                          "PERSONAL"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "My repo description"
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "REPOSITORY"
                  },
                  "origin": {
                    "type": "object",
                    "properties": {
                      "hierarchyId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "e3c939f9ef4a7fae272e"
                      },
                      "scmId": {
                        "type": "string",
                        "example": "git"
                      },
                      "slug": {
                        "type": "string",
                        "example": "my-repo"
                      },
                      "statusMessage": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Available"
                      },
                      "archived": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "forkable": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "defaultBranch": {
                        "type": "string",
                        "readOnly": true,
                        "example": "main"
                      },
                      "partition": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "relatedLinks": {
                        "type": "object",
                        "properties": {},
                        "readOnly": true
                      },
                      "project": {
                        "required": [
                          "key"
                        ],
                        "type": "object",
                        "properties": {
                          "avatar": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "writeOnly": true
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "The description for my cool project"
                          },
                          "namespace": {
                            "type": "string",
                            "readOnly": true,
                            "deprecated": true
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "PROJECT"
                          },
                          "name": {
                            "pattern": "^[^~].*",
                            "type": "string",
                            "readOnly": true,
                            "example": "My Cool Project"
                          },
                          "key": {
                            "type": "string",
                            "example": "PRJ"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "NORMAL",
                              "PERSONAL"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "My repo description"
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "REPOSITORY"
                      },
                      "name": {
                        "type": "string",
                        "example": "My repo"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "state": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "AVAILABLE",
                          "INITIALISATION_FAILED",
                          "INITIALISING",
                          "OFFLINE"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "My repo"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "state": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "AVAILABLE",
                      "INITIALISATION_FAILED",
                      "INITIALISING",
                      "OFFLINE"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "id": {
                "type": "string",
                "example": "refs/heads/feature-ABC-123"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BRANCH",
                  "TAG"
                ]
              }
            }
          },
          "draft": {
            "type": "boolean"
          },
          "updatedDate": {
            "type": "integer",
            "format": "int64",
            "example": 14490759200
          },
          "htmlDescription": {
            "type": "string",
            "writeOnly": true
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "locked": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "example": "It is a kludge, but put the tuple from the database in the cache."
          },
          "closed": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "example": "Talking Nerdy"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "state": {
            "type": "string",
            "enum": [
              "DECLINED",
              "MERGED",
              "OPEN"
            ]
          },
          "open": {
            "type": "boolean"
          },
          "links": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          }
        }
      },
      "RestUserReaction": {
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            }
          },
          "emoticon": {
            "type": "object",
            "properties": {
              "shortcut": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "comment": {
            "type": "object",
            "properties": {
              "anchor": {
                "type": "object",
                "properties": {
                  "pullRequest": {
                    "type": "object",
                    "properties": {
                      "closedDate": {
                        "type": "integer",
                        "format": "int64",
                        "example": 19990759200
                      },
                      "fromRef": {
                        "type": "object",
                        "properties": {
                          "displayId": {
                            "type": "string",
                            "example": "feature-ABC-1233"
                          },
                          "latestCommit": {
                            "type": "string",
                            "example": "babecafebabecafebabecafebabecafebabecafe"
                          },
                          "repository": {
                            "type": "object",
                            "properties": {
                              "hierarchyId": {
                                "type": "string",
                                "readOnly": true,
                                "example": "e3c939f9ef4a7fae272e"
                              },
                              "scmId": {
                                "type": "string",
                                "example": "git"
                              },
                              "slug": {
                                "type": "string",
                                "example": "my-repo"
                              },
                              "statusMessage": {
                                "type": "string",
                                "readOnly": true,
                                "example": "Available"
                              },
                              "archived": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "forkable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "defaultBranch": {
                                "type": "string",
                                "readOnly": true,
                                "example": "main"
                              },
                              "partition": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "relatedLinks": {
                                "type": "object",
                                "properties": {},
                                "readOnly": true
                              },
                              "project": {
                                "required": [
                                  "key"
                                ],
                                "type": "object",
                                "properties": {
                                  "avatar": {
                                    "type": "string"
                                  },
                                  "avatarUrl": {
                                    "type": "string",
                                    "writeOnly": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "The description for my cool project"
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "readOnly": true,
                                    "deprecated": true
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "PROJECT"
                                  },
                                  "name": {
                                    "pattern": "^[^~].*",
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My Cool Project"
                                  },
                                  "key": {
                                    "type": "string",
                                    "example": "PRJ"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "type": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "NORMAL",
                                      "PERSONAL"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "My repo description"
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "REPOSITORY"
                              },
                              "origin": {
                                "type": "object",
                                "properties": {
                                  "hierarchyId": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "e3c939f9ef4a7fae272e"
                                  },
                                  "scmId": {
                                    "type": "string",
                                    "example": "git"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "example": "my-repo"
                                  },
                                  "statusMessage": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "Available"
                                  },
                                  "archived": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "forkable": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "defaultBranch": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "main"
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "relatedLinks": {
                                    "type": "object",
                                    "properties": {},
                                    "readOnly": true
                                  },
                                  "project": {
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "avatar": {
                                        "type": "string"
                                      },
                                      "avatarUrl": {
                                        "type": "string",
                                        "writeOnly": true
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "The description for my cool project"
                                      },
                                      "namespace": {
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "PROJECT"
                                      },
                                      "name": {
                                        "pattern": "^[^~].*",
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My Cool Project"
                                      },
                                      "key": {
                                        "type": "string",
                                        "example": "PRJ"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "type": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "NORMAL",
                                          "PERSONAL"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My repo description"
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "REPOSITORY"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "My repo"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "AVAILABLE",
                                      "INITIALISATION_FAILED",
                                      "INITIALISING",
                                      "OFFLINE"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                },
                                "readOnly": true
                              },
                              "name": {
                                "type": "string",
                                "example": "My repo"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "state": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "AVAILABLE",
                                  "INITIALISATION_FAILED",
                                  "INITIALISING",
                                  "OFFLINE"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "id": {
                            "type": "string",
                            "example": "refs/heads/feature-ABC-123"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "BRANCH",
                              "TAG"
                            ]
                          }
                        }
                      },
                      "participants": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RestPullRequestParticipant"
                        }
                      },
                      "reviewers": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RestPullRequestParticipant"
                        }
                      },
                      "createdDate": {
                        "type": "integer",
                        "format": "int64",
                        "example": 13590759200
                      },
                      "toRef": {
                        "type": "object",
                        "properties": {
                          "displayId": {
                            "type": "string",
                            "example": "feature-ABC-1233"
                          },
                          "latestCommit": {
                            "type": "string",
                            "example": "babecafebabecafebabecafebabecafebabecafe"
                          },
                          "repository": {
                            "type": "object",
                            "properties": {
                              "hierarchyId": {
                                "type": "string",
                                "readOnly": true,
                                "example": "e3c939f9ef4a7fae272e"
                              },
                              "scmId": {
                                "type": "string",
                                "example": "git"
                              },
                              "slug": {
                                "type": "string",
                                "example": "my-repo"
                              },
                              "statusMessage": {
                                "type": "string",
                                "readOnly": true,
                                "example": "Available"
                              },
                              "archived": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "forkable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "defaultBranch": {
                                "type": "string",
                                "readOnly": true,
                                "example": "main"
                              },
                              "partition": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "relatedLinks": {
                                "type": "object",
                                "properties": {},
                                "readOnly": true
                              },
                              "project": {
                                "required": [
                                  "key"
                                ],
                                "type": "object",
                                "properties": {
                                  "avatar": {
                                    "type": "string"
                                  },
                                  "avatarUrl": {
                                    "type": "string",
                                    "writeOnly": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "The description for my cool project"
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "readOnly": true,
                                    "deprecated": true
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "PROJECT"
                                  },
                                  "name": {
                                    "pattern": "^[^~].*",
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My Cool Project"
                                  },
                                  "key": {
                                    "type": "string",
                                    "example": "PRJ"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "type": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "NORMAL",
                                      "PERSONAL"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "My repo description"
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "REPOSITORY"
                              },
                              "origin": {
                                "type": "object",
                                "properties": {
                                  "hierarchyId": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "e3c939f9ef4a7fae272e"
                                  },
                                  "scmId": {
                                    "type": "string",
                                    "example": "git"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "example": "my-repo"
                                  },
                                  "statusMessage": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "Available"
                                  },
                                  "archived": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "forkable": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "defaultBranch": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "main"
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "relatedLinks": {
                                    "type": "object",
                                    "properties": {},
                                    "readOnly": true
                                  },
                                  "project": {
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "avatar": {
                                        "type": "string"
                                      },
                                      "avatarUrl": {
                                        "type": "string",
                                        "writeOnly": true
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "The description for my cool project"
                                      },
                                      "namespace": {
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "PROJECT"
                                      },
                                      "name": {
                                        "pattern": "^[^~].*",
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My Cool Project"
                                      },
                                      "key": {
                                        "type": "string",
                                        "example": "PRJ"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "type": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "NORMAL",
                                          "PERSONAL"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My repo description"
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "REPOSITORY"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "My repo"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "AVAILABLE",
                                      "INITIALISATION_FAILED",
                                      "INITIALISING",
                                      "OFFLINE"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                },
                                "readOnly": true
                              },
                              "name": {
                                "type": "string",
                                "example": "My repo"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "state": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "AVAILABLE",
                                  "INITIALISATION_FAILED",
                                  "INITIALISING",
                                  "OFFLINE"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "id": {
                            "type": "string",
                            "example": "refs/heads/feature-ABC-123"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "BRANCH",
                              "TAG"
                            ]
                          }
                        }
                      },
                      "draft": {
                        "type": "boolean"
                      },
                      "updatedDate": {
                        "type": "integer",
                        "format": "int64",
                        "example": 14490759200
                      },
                      "htmlDescription": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "version": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "locked": {
                        "type": "boolean"
                      },
                      "description": {
                        "type": "string",
                        "example": "It is a kludge, but put the tuple from the database in the cache."
                      },
                      "closed": {
                        "type": "boolean"
                      },
                      "title": {
                        "type": "string",
                        "example": "Talking Nerdy"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "DECLINED",
                          "MERGED",
                          "OPEN"
                        ]
                      },
                      "open": {
                        "type": "boolean"
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "srcPath": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  },
                  "toHash": {
                    "type": "string",
                    "example": "3cdd5d19178a54d2e51b5098d43b57571241d0ab"
                  },
                  "lineComment": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "diffType": {
                    "type": "string",
                    "enum": [
                      "COMMIT",
                      "EFFECTIVE",
                      "RANGE"
                    ]
                  },
                  "fileType": {
                    "type": "string",
                    "enum": [
                      "FROM",
                      "TO"
                    ]
                  },
                  "fromHash": {
                    "type": "string",
                    "example": "62a0505e8204115b8b9c8a95bfa264a8c0896a93"
                  },
                  "lineType": {
                    "type": "string",
                    "enum": [
                      "ADDED",
                      "CONTEXT",
                      "REMOVED"
                    ]
                  },
                  "line": {
                    "type": "integer",
                    "format": "int32",
                    "example": 98
                  },
                  "path": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  }
                },
                "readOnly": true
              },
              "createdDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1359075920
              },
              "html": {
                "type": "string",
                "readOnly": true
              },
              "threadResolvedDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1569075920
              },
              "threadResolver": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "emailAddress": {
                    "type": "string",
                    "example": "jane@example.com"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 101
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "NORMAL",
                      "SERVICE"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Jane Citizen"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "anchored": {
                "type": "boolean",
                "readOnly": true
              },
              "pending": {
                "type": "boolean",
                "readOnly": true
              },
              "reply": {
                "type": "boolean",
                "readOnly": true
              },
              "threadResolved": {
                "type": "boolean",
                "description": "Indicates if this comment thread has been marked as resolved or not"
              },
              "author": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "emailAddress": {
                    "type": "string",
                    "example": "jane@example.com"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 101
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "NORMAL",
                      "SERVICE"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Jane Citizen"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "resolvedDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1239075920
              },
              "updatedDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1449075920
              },
              "version": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "text": {
                "type": "string",
                "example": "An insightful comment."
              },
              "severity": {
                "type": "string",
                "example": "NORMAL"
              },
              "comments": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/RestComment"
                }
              },
              "resolver": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "emailAddress": {
                    "type": "string",
                    "example": "jane@example.com"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 101
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "NORMAL",
                      "SERVICE"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Jane Citizen"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "parent": {
                "type": "object",
                "properties": {
                  "anchor": {
                    "type": "object",
                    "properties": {
                      "pullRequest": {
                        "type": "object",
                        "properties": {
                          "closedDate": {
                            "type": "integer",
                            "format": "int64",
                            "example": 19990759200
                          },
                          "fromRef": {
                            "type": "object",
                            "properties": {
                              "displayId": {
                                "type": "string",
                                "example": "feature-ABC-1233"
                              },
                              "latestCommit": {
                                "type": "string",
                                "example": "babecafebabecafebabecafebabecafebabecafe"
                              },
                              "repository": {
                                "type": "object",
                                "properties": {
                                  "hierarchyId": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "e3c939f9ef4a7fae272e"
                                  },
                                  "scmId": {
                                    "type": "string",
                                    "example": "git"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "example": "my-repo"
                                  },
                                  "statusMessage": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "Available"
                                  },
                                  "archived": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "forkable": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "defaultBranch": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "main"
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "relatedLinks": {
                                    "type": "object",
                                    "properties": {},
                                    "readOnly": true
                                  },
                                  "project": {
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "avatar": {
                                        "type": "string"
                                      },
                                      "avatarUrl": {
                                        "type": "string",
                                        "writeOnly": true
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "The description for my cool project"
                                      },
                                      "namespace": {
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "PROJECT"
                                      },
                                      "name": {
                                        "pattern": "^[^~].*",
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My Cool Project"
                                      },
                                      "key": {
                                        "type": "string",
                                        "example": "PRJ"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "type": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "NORMAL",
                                          "PERSONAL"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My repo description"
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "REPOSITORY"
                                  },
                                  "origin": {
                                    "type": "object",
                                    "properties": {
                                      "hierarchyId": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "e3c939f9ef4a7fae272e"
                                      },
                                      "scmId": {
                                        "type": "string",
                                        "example": "git"
                                      },
                                      "slug": {
                                        "type": "string",
                                        "example": "my-repo"
                                      },
                                      "statusMessage": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "Available"
                                      },
                                      "archived": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "forkable": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "defaultBranch": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "main"
                                      },
                                      "partition": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "relatedLinks": {
                                        "type": "object",
                                        "properties": {},
                                        "readOnly": true
                                      },
                                      "project": {
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "avatar": {
                                            "type": "string"
                                          },
                                          "avatarUrl": {
                                            "type": "string",
                                            "writeOnly": true
                                          },
                                          "description": {
                                            "type": "string",
                                            "readOnly": true,
                                            "example": "The description for my cool project"
                                          },
                                          "namespace": {
                                            "type": "string",
                                            "readOnly": true,
                                            "deprecated": true
                                          },
                                          "scope": {
                                            "type": "string",
                                            "readOnly": true,
                                            "example": "PROJECT"
                                          },
                                          "name": {
                                            "pattern": "^[^~].*",
                                            "type": "string",
                                            "readOnly": true,
                                            "example": "My Cool Project"
                                          },
                                          "key": {
                                            "type": "string",
                                            "example": "PRJ"
                                          },
                                          "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "readOnly": true
                                          },
                                          "type": {
                                            "type": "string",
                                            "readOnly": true,
                                            "enum": [
                                              "NORMAL",
                                              "PERSONAL"
                                            ]
                                          },
                                          "public": {
                                            "type": "boolean",
                                            "readOnly": true
                                          },
                                          "links": {
                                            "type": "object",
                                            "properties": {},
                                            "writeOnly": true
                                          }
                                        }
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My repo description"
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "REPOSITORY"
                                      },
                                      "name": {
                                        "type": "string",
                                        "example": "My repo"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "state": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "AVAILABLE",
                                          "INITIALISATION_FAILED",
                                          "INITIALISING",
                                          "OFFLINE"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    },
                                    "readOnly": true
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "My repo"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "AVAILABLE",
                                      "INITIALISATION_FAILED",
                                      "INITIALISING",
                                      "OFFLINE"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "id": {
                                "type": "string",
                                "example": "refs/heads/feature-ABC-123"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "BRANCH",
                                  "TAG"
                                ]
                              }
                            }
                          },
                          "participants": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/RestPullRequestParticipant"
                            }
                          },
                          "reviewers": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/RestPullRequestParticipant"
                            }
                          },
                          "createdDate": {
                            "type": "integer",
                            "format": "int64",
                            "example": 13590759200
                          },
                          "toRef": {
                            "type": "object",
                            "properties": {
                              "displayId": {
                                "type": "string",
                                "example": "feature-ABC-1233"
                              },
                              "latestCommit": {
                                "type": "string",
                                "example": "babecafebabecafebabecafebabecafebabecafe"
                              },
                              "repository": {
                                "type": "object",
                                "properties": {
                                  "hierarchyId": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "e3c939f9ef4a7fae272e"
                                  },
                                  "scmId": {
                                    "type": "string",
                                    "example": "git"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "example": "my-repo"
                                  },
                                  "statusMessage": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "Available"
                                  },
                                  "archived": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "forkable": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "defaultBranch": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "main"
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "relatedLinks": {
                                    "type": "object",
                                    "properties": {},
                                    "readOnly": true
                                  },
                                  "project": {
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "avatar": {
                                        "type": "string"
                                      },
                                      "avatarUrl": {
                                        "type": "string",
                                        "writeOnly": true
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "The description for my cool project"
                                      },
                                      "namespace": {
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "PROJECT"
                                      },
                                      "name": {
                                        "pattern": "^[^~].*",
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My Cool Project"
                                      },
                                      "key": {
                                        "type": "string",
                                        "example": "PRJ"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "type": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "NORMAL",
                                          "PERSONAL"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My repo description"
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "REPOSITORY"
                                  },
                                  "origin": {
                                    "type": "object",
                                    "properties": {
                                      "hierarchyId": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "e3c939f9ef4a7fae272e"
                                      },
                                      "scmId": {
                                        "type": "string",
                                        "example": "git"
                                      },
                                      "slug": {
                                        "type": "string",
                                        "example": "my-repo"
                                      },
                                      "statusMessage": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "Available"
                                      },
                                      "archived": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "forkable": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "defaultBranch": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "main"
                                      },
                                      "partition": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "relatedLinks": {
                                        "type": "object",
                                        "properties": {},
                                        "readOnly": true
                                      },
                                      "project": {
                                        "required": [
                                          "key"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "avatar": {
                                            "type": "string"
                                          },
                                          "avatarUrl": {
                                            "type": "string",
                                            "writeOnly": true
                                          },
                                          "description": {
                                            "type": "string",
                                            "readOnly": true,
                                            "example": "The description for my cool project"
                                          },
                                          "namespace": {
                                            "type": "string",
                                            "readOnly": true,
                                            "deprecated": true
                                          },
                                          "scope": {
                                            "type": "string",
                                            "readOnly": true,
                                            "example": "PROJECT"
                                          },
                                          "name": {
                                            "pattern": "^[^~].*",
                                            "type": "string",
                                            "readOnly": true,
                                            "example": "My Cool Project"
                                          },
                                          "key": {
                                            "type": "string",
                                            "example": "PRJ"
                                          },
                                          "id": {
                                            "type": "integer",
                                            "format": "int32",
                                            "readOnly": true
                                          },
                                          "type": {
                                            "type": "string",
                                            "readOnly": true,
                                            "enum": [
                                              "NORMAL",
                                              "PERSONAL"
                                            ]
                                          },
                                          "public": {
                                            "type": "boolean",
                                            "readOnly": true
                                          },
                                          "links": {
                                            "type": "object",
                                            "properties": {},
                                            "writeOnly": true
                                          }
                                        }
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My repo description"
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "REPOSITORY"
                                      },
                                      "name": {
                                        "type": "string",
                                        "example": "My repo"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "state": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "AVAILABLE",
                                          "INITIALISATION_FAILED",
                                          "INITIALISING",
                                          "OFFLINE"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    },
                                    "readOnly": true
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "My repo"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "AVAILABLE",
                                      "INITIALISATION_FAILED",
                                      "INITIALISING",
                                      "OFFLINE"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "id": {
                                "type": "string",
                                "example": "refs/heads/feature-ABC-123"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "BRANCH",
                                  "TAG"
                                ]
                              }
                            }
                          },
                          "draft": {
                            "type": "boolean"
                          },
                          "updatedDate": {
                            "type": "integer",
                            "format": "int64",
                            "example": 14490759200
                          },
                          "htmlDescription": {
                            "type": "string",
                            "writeOnly": true
                          },
                          "version": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "locked": {
                            "type": "boolean"
                          },
                          "description": {
                            "type": "string",
                            "example": "It is a kludge, but put the tuple from the database in the cache."
                          },
                          "closed": {
                            "type": "boolean"
                          },
                          "title": {
                            "type": "string",
                            "example": "Talking Nerdy"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                          },
                          "state": {
                            "type": "string",
                            "enum": [
                              "DECLINED",
                              "MERGED",
                              "OPEN"
                            ]
                          },
                          "open": {
                            "type": "boolean"
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        },
                        "readOnly": true
                      },
                      "srcPath": {
                        "type": "object",
                        "properties": {
                          "components": {
                            "type": "array",
                            "example": [
                              "path",
                              "to",
                              "file.txt"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "name": {
                            "type": "string",
                            "example": "file.txt"
                          },
                          "parent": {
                            "type": "string",
                            "example": "path/to"
                          },
                          "extension": {
                            "type": "string",
                            "example": "txt"
                          }
                        }
                      },
                      "toHash": {
                        "type": "string",
                        "example": "3cdd5d19178a54d2e51b5098d43b57571241d0ab"
                      },
                      "lineComment": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "diffType": {
                        "type": "string",
                        "enum": [
                          "COMMIT",
                          "EFFECTIVE",
                          "RANGE"
                        ]
                      },
                      "fileType": {
                        "type": "string",
                        "enum": [
                          "FROM",
                          "TO"
                        ]
                      },
                      "fromHash": {
                        "type": "string",
                        "example": "62a0505e8204115b8b9c8a95bfa264a8c0896a93"
                      },
                      "lineType": {
                        "type": "string",
                        "enum": [
                          "ADDED",
                          "CONTEXT",
                          "REMOVED"
                        ]
                      },
                      "line": {
                        "type": "integer",
                        "format": "int32",
                        "example": 98
                      },
                      "path": {
                        "type": "object",
                        "properties": {
                          "components": {
                            "type": "array",
                            "example": [
                              "path",
                              "to",
                              "file.txt"
                            ],
                            "items": {
                              "type": "string"
                            }
                          },
                          "name": {
                            "type": "string",
                            "example": "file.txt"
                          },
                          "parent": {
                            "type": "string",
                            "example": "path/to"
                          },
                          "extension": {
                            "type": "string",
                            "example": "txt"
                          }
                        }
                      }
                    },
                    "readOnly": true
                  },
                  "createdDate": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true,
                    "example": 1359075920
                  },
                  "html": {
                    "type": "string",
                    "readOnly": true
                  },
                  "threadResolvedDate": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true,
                    "example": 1569075920
                  },
                  "threadResolver": {
                    "type": "object",
                    "properties": {
                      "slug": {
                        "type": "string",
                        "example": "jcitizen"
                      },
                      "emailAddress": {
                        "type": "string",
                        "example": "jane@example.com"
                      },
                      "active": {
                        "type": "boolean"
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      },
                      "name": {
                        "type": "string",
                        "example": "jcitizen"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 101
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "NORMAL",
                          "SERVICE"
                        ]
                      },
                      "displayName": {
                        "type": "string",
                        "example": "Jane Citizen"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "anchored": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "pending": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "reply": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "threadResolved": {
                    "type": "boolean",
                    "description": "Indicates if this comment thread has been marked as resolved or not"
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "slug": {
                        "type": "string",
                        "example": "jcitizen"
                      },
                      "emailAddress": {
                        "type": "string",
                        "example": "jane@example.com"
                      },
                      "active": {
                        "type": "boolean"
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      },
                      "name": {
                        "type": "string",
                        "example": "jcitizen"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 101
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "NORMAL",
                          "SERVICE"
                        ]
                      },
                      "displayName": {
                        "type": "string",
                        "example": "Jane Citizen"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "resolvedDate": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true,
                    "example": 1239075920
                  },
                  "updatedDate": {
                    "type": "integer",
                    "format": "int64",
                    "readOnly": true,
                    "example": 1449075920
                  },
                  "version": {
                    "type": "integer",
                    "format": "int32",
                    "example": 1
                  },
                  "text": {
                    "type": "string",
                    "example": "An insightful comment."
                  },
                  "severity": {
                    "type": "string",
                    "example": "NORMAL"
                  },
                  "resolver": {
                    "type": "object",
                    "properties": {
                      "slug": {
                        "type": "string",
                        "example": "jcitizen"
                      },
                      "emailAddress": {
                        "type": "string",
                        "example": "jane@example.com"
                      },
                      "active": {
                        "type": "boolean"
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      },
                      "name": {
                        "type": "string",
                        "example": "jcitizen"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "example": 101
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "NORMAL",
                          "SERVICE"
                        ]
                      },
                      "displayName": {
                        "type": "string",
                        "example": "Jane Citizen"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                  },
                  "state": {
                    "type": "string",
                    "example": "OPEN"
                  },
                  "properties": {
                    "type": "object"
                  }
                },
                "readOnly": true
              },
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "state": {
                "type": "string",
                "example": "OPEN"
              },
              "properties": {
                "type": "object"
              }
            }
          }
        }
      },
      "RestComment": {
        "properties": {
          "anchor": {
            "type": "object",
            "properties": {
              "pullRequest": {
                "type": "object",
                "properties": {
                  "closedDate": {
                    "type": "integer",
                    "format": "int64",
                    "example": 19990759200
                  },
                  "fromRef": {
                    "type": "object",
                    "properties": {
                      "displayId": {
                        "type": "string",
                        "example": "feature-ABC-1233"
                      },
                      "latestCommit": {
                        "type": "string",
                        "example": "babecafebabecafebabecafebabecafebabecafe"
                      },
                      "repository": {
                        "type": "object",
                        "properties": {
                          "hierarchyId": {
                            "type": "string",
                            "readOnly": true,
                            "example": "e3c939f9ef4a7fae272e"
                          },
                          "scmId": {
                            "type": "string",
                            "example": "git"
                          },
                          "slug": {
                            "type": "string",
                            "example": "my-repo"
                          },
                          "statusMessage": {
                            "type": "string",
                            "readOnly": true,
                            "example": "Available"
                          },
                          "archived": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "forkable": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "defaultBranch": {
                            "type": "string",
                            "readOnly": true,
                            "example": "main"
                          },
                          "partition": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "relatedLinks": {
                            "type": "object",
                            "properties": {},
                            "readOnly": true
                          },
                          "project": {
                            "required": [
                              "key"
                            ],
                            "type": "object",
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "avatarUrl": {
                                "type": "string",
                                "writeOnly": true
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "The description for my cool project"
                              },
                              "namespace": {
                                "type": "string",
                                "readOnly": true,
                                "deprecated": true
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "PROJECT"
                              },
                              "name": {
                                "pattern": "^[^~].*",
                                "type": "string",
                                "readOnly": true,
                                "example": "My Cool Project"
                              },
                              "key": {
                                "type": "string",
                                "example": "PRJ"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "type": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "NORMAL",
                                  "PERSONAL"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "My repo description"
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "REPOSITORY"
                          },
                          "origin": {
                            "type": "object",
                            "properties": {
                              "hierarchyId": {
                                "type": "string",
                                "readOnly": true,
                                "example": "e3c939f9ef4a7fae272e"
                              },
                              "scmId": {
                                "type": "string",
                                "example": "git"
                              },
                              "slug": {
                                "type": "string",
                                "example": "my-repo"
                              },
                              "statusMessage": {
                                "type": "string",
                                "readOnly": true,
                                "example": "Available"
                              },
                              "archived": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "forkable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "defaultBranch": {
                                "type": "string",
                                "readOnly": true,
                                "example": "main"
                              },
                              "partition": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "relatedLinks": {
                                "type": "object",
                                "properties": {},
                                "readOnly": true
                              },
                              "project": {
                                "required": [
                                  "key"
                                ],
                                "type": "object",
                                "properties": {
                                  "avatar": {
                                    "type": "string"
                                  },
                                  "avatarUrl": {
                                    "type": "string",
                                    "writeOnly": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "The description for my cool project"
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "readOnly": true,
                                    "deprecated": true
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "PROJECT"
                                  },
                                  "name": {
                                    "pattern": "^[^~].*",
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My Cool Project"
                                  },
                                  "key": {
                                    "type": "string",
                                    "example": "PRJ"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "type": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "NORMAL",
                                      "PERSONAL"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "My repo description"
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "REPOSITORY"
                              },
                              "name": {
                                "type": "string",
                                "example": "My repo"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "state": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "AVAILABLE",
                                  "INITIALISATION_FAILED",
                                  "INITIALISING",
                                  "OFFLINE"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            },
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "My repo"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "state": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "AVAILABLE",
                              "INITIALISATION_FAILED",
                              "INITIALISING",
                              "OFFLINE"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        }
                      },
                      "id": {
                        "type": "string",
                        "example": "refs/heads/feature-ABC-123"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "BRANCH",
                          "TAG"
                        ]
                      }
                    }
                  },
                  "participants": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RestPullRequestParticipant"
                    }
                  },
                  "reviewers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RestPullRequestParticipant"
                    }
                  },
                  "createdDate": {
                    "type": "integer",
                    "format": "int64",
                    "example": 13590759200
                  },
                  "toRef": {
                    "type": "object",
                    "properties": {
                      "displayId": {
                        "type": "string",
                        "example": "feature-ABC-1233"
                      },
                      "latestCommit": {
                        "type": "string",
                        "example": "babecafebabecafebabecafebabecafebabecafe"
                      },
                      "repository": {
                        "type": "object",
                        "properties": {
                          "hierarchyId": {
                            "type": "string",
                            "readOnly": true,
                            "example": "e3c939f9ef4a7fae272e"
                          },
                          "scmId": {
                            "type": "string",
                            "example": "git"
                          },
                          "slug": {
                            "type": "string",
                            "example": "my-repo"
                          },
                          "statusMessage": {
                            "type": "string",
                            "readOnly": true,
                            "example": "Available"
                          },
                          "archived": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "forkable": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "defaultBranch": {
                            "type": "string",
                            "readOnly": true,
                            "example": "main"
                          },
                          "partition": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "relatedLinks": {
                            "type": "object",
                            "properties": {},
                            "readOnly": true
                          },
                          "project": {
                            "required": [
                              "key"
                            ],
                            "type": "object",
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "avatarUrl": {
                                "type": "string",
                                "writeOnly": true
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "The description for my cool project"
                              },
                              "namespace": {
                                "type": "string",
                                "readOnly": true,
                                "deprecated": true
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "PROJECT"
                              },
                              "name": {
                                "pattern": "^[^~].*",
                                "type": "string",
                                "readOnly": true,
                                "example": "My Cool Project"
                              },
                              "key": {
                                "type": "string",
                                "example": "PRJ"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "type": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "NORMAL",
                                  "PERSONAL"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "My repo description"
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "REPOSITORY"
                          },
                          "origin": {
                            "type": "object",
                            "properties": {
                              "hierarchyId": {
                                "type": "string",
                                "readOnly": true,
                                "example": "e3c939f9ef4a7fae272e"
                              },
                              "scmId": {
                                "type": "string",
                                "example": "git"
                              },
                              "slug": {
                                "type": "string",
                                "example": "my-repo"
                              },
                              "statusMessage": {
                                "type": "string",
                                "readOnly": true,
                                "example": "Available"
                              },
                              "archived": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "forkable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "defaultBranch": {
                                "type": "string",
                                "readOnly": true,
                                "example": "main"
                              },
                              "partition": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "relatedLinks": {
                                "type": "object",
                                "properties": {},
                                "readOnly": true
                              },
                              "project": {
                                "required": [
                                  "key"
                                ],
                                "type": "object",
                                "properties": {
                                  "avatar": {
                                    "type": "string"
                                  },
                                  "avatarUrl": {
                                    "type": "string",
                                    "writeOnly": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "The description for my cool project"
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "readOnly": true,
                                    "deprecated": true
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "PROJECT"
                                  },
                                  "name": {
                                    "pattern": "^[^~].*",
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My Cool Project"
                                  },
                                  "key": {
                                    "type": "string",
                                    "example": "PRJ"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "type": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "NORMAL",
                                      "PERSONAL"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "My repo description"
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "REPOSITORY"
                              },
                              "name": {
                                "type": "string",
                                "example": "My repo"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "state": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "AVAILABLE",
                                  "INITIALISATION_FAILED",
                                  "INITIALISING",
                                  "OFFLINE"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            },
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "My repo"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "state": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "AVAILABLE",
                              "INITIALISATION_FAILED",
                              "INITIALISING",
                              "OFFLINE"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        }
                      },
                      "id": {
                        "type": "string",
                        "example": "refs/heads/feature-ABC-123"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "BRANCH",
                          "TAG"
                        ]
                      }
                    }
                  },
                  "draft": {
                    "type": "boolean"
                  },
                  "updatedDate": {
                    "type": "integer",
                    "format": "int64",
                    "example": 14490759200
                  },
                  "htmlDescription": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "version": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string",
                    "example": "It is a kludge, but put the tuple from the database in the cache."
                  },
                  "closed": {
                    "type": "boolean"
                  },
                  "title": {
                    "type": "string",
                    "example": "Talking Nerdy"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "DECLINED",
                      "MERGED",
                      "OPEN"
                    ]
                  },
                  "open": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "srcPath": {
                "type": "object",
                "properties": {
                  "components": {
                    "type": "array",
                    "example": [
                      "path",
                      "to",
                      "file.txt"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": "string",
                    "example": "file.txt"
                  },
                  "parent": {
                    "type": "string",
                    "example": "path/to"
                  },
                  "extension": {
                    "type": "string",
                    "example": "txt"
                  }
                }
              },
              "toHash": {
                "type": "string",
                "example": "3cdd5d19178a54d2e51b5098d43b57571241d0ab"
              },
              "lineComment": {
                "type": "boolean",
                "readOnly": true
              },
              "diffType": {
                "type": "string",
                "enum": [
                  "COMMIT",
                  "EFFECTIVE",
                  "RANGE"
                ]
              },
              "fileType": {
                "type": "string",
                "enum": [
                  "FROM",
                  "TO"
                ]
              },
              "fromHash": {
                "type": "string",
                "example": "62a0505e8204115b8b9c8a95bfa264a8c0896a93"
              },
              "lineType": {
                "type": "string",
                "enum": [
                  "ADDED",
                  "CONTEXT",
                  "REMOVED"
                ]
              },
              "line": {
                "type": "integer",
                "format": "int32",
                "example": 98
              },
              "path": {
                "type": "object",
                "properties": {
                  "components": {
                    "type": "array",
                    "example": [
                      "path",
                      "to",
                      "file.txt"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": "string",
                    "example": "file.txt"
                  },
                  "parent": {
                    "type": "string",
                    "example": "path/to"
                  },
                  "extension": {
                    "type": "string",
                    "example": "txt"
                  }
                }
              }
            },
            "readOnly": true
          },
          "createdDate": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1359075920
          },
          "html": {
            "type": "string",
            "readOnly": true
          },
          "threadResolvedDate": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1569075920
          },
          "threadResolver": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            },
            "readOnly": true
          },
          "anchored": {
            "type": "boolean",
            "readOnly": true
          },
          "pending": {
            "type": "boolean",
            "readOnly": true
          },
          "reply": {
            "type": "boolean",
            "readOnly": true
          },
          "threadResolved": {
            "type": "boolean",
            "description": "Indicates if this comment thread has been marked as resolved or not"
          },
          "author": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            },
            "readOnly": true
          },
          "resolvedDate": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1239075920
          },
          "updatedDate": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1449075920
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "text": {
            "type": "string",
            "example": "An insightful comment."
          },
          "severity": {
            "type": "string",
            "example": "NORMAL"
          },
          "comments": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/RestComment"
            }
          },
          "resolver": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            },
            "readOnly": true
          },
          "parent": {
            "type": "object",
            "properties": {
              "anchor": {
                "type": "object",
                "properties": {
                  "pullRequest": {
                    "type": "object",
                    "properties": {
                      "closedDate": {
                        "type": "integer",
                        "format": "int64",
                        "example": 19990759200
                      },
                      "fromRef": {
                        "type": "object",
                        "properties": {
                          "displayId": {
                            "type": "string",
                            "example": "feature-ABC-1233"
                          },
                          "latestCommit": {
                            "type": "string",
                            "example": "babecafebabecafebabecafebabecafebabecafe"
                          },
                          "repository": {
                            "type": "object",
                            "properties": {
                              "hierarchyId": {
                                "type": "string",
                                "readOnly": true,
                                "example": "e3c939f9ef4a7fae272e"
                              },
                              "scmId": {
                                "type": "string",
                                "example": "git"
                              },
                              "slug": {
                                "type": "string",
                                "example": "my-repo"
                              },
                              "statusMessage": {
                                "type": "string",
                                "readOnly": true,
                                "example": "Available"
                              },
                              "archived": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "forkable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "defaultBranch": {
                                "type": "string",
                                "readOnly": true,
                                "example": "main"
                              },
                              "partition": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "relatedLinks": {
                                "type": "object",
                                "properties": {},
                                "readOnly": true
                              },
                              "project": {
                                "required": [
                                  "key"
                                ],
                                "type": "object",
                                "properties": {
                                  "avatar": {
                                    "type": "string"
                                  },
                                  "avatarUrl": {
                                    "type": "string",
                                    "writeOnly": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "The description for my cool project"
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "readOnly": true,
                                    "deprecated": true
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "PROJECT"
                                  },
                                  "name": {
                                    "pattern": "^[^~].*",
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My Cool Project"
                                  },
                                  "key": {
                                    "type": "string",
                                    "example": "PRJ"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "type": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "NORMAL",
                                      "PERSONAL"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "My repo description"
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "REPOSITORY"
                              },
                              "origin": {
                                "type": "object",
                                "properties": {
                                  "hierarchyId": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "e3c939f9ef4a7fae272e"
                                  },
                                  "scmId": {
                                    "type": "string",
                                    "example": "git"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "example": "my-repo"
                                  },
                                  "statusMessage": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "Available"
                                  },
                                  "archived": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "forkable": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "defaultBranch": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "main"
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "relatedLinks": {
                                    "type": "object",
                                    "properties": {},
                                    "readOnly": true
                                  },
                                  "project": {
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "avatar": {
                                        "type": "string"
                                      },
                                      "avatarUrl": {
                                        "type": "string",
                                        "writeOnly": true
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "The description for my cool project"
                                      },
                                      "namespace": {
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "PROJECT"
                                      },
                                      "name": {
                                        "pattern": "^[^~].*",
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My Cool Project"
                                      },
                                      "key": {
                                        "type": "string",
                                        "example": "PRJ"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "type": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "NORMAL",
                                          "PERSONAL"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My repo description"
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "REPOSITORY"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "My repo"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "AVAILABLE",
                                      "INITIALISATION_FAILED",
                                      "INITIALISING",
                                      "OFFLINE"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                },
                                "readOnly": true
                              },
                              "name": {
                                "type": "string",
                                "example": "My repo"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "state": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "AVAILABLE",
                                  "INITIALISATION_FAILED",
                                  "INITIALISING",
                                  "OFFLINE"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "id": {
                            "type": "string",
                            "example": "refs/heads/feature-ABC-123"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "BRANCH",
                              "TAG"
                            ]
                          }
                        }
                      },
                      "participants": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RestPullRequestParticipant"
                        }
                      },
                      "reviewers": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RestPullRequestParticipant"
                        }
                      },
                      "createdDate": {
                        "type": "integer",
                        "format": "int64",
                        "example": 13590759200
                      },
                      "toRef": {
                        "type": "object",
                        "properties": {
                          "displayId": {
                            "type": "string",
                            "example": "feature-ABC-1233"
                          },
                          "latestCommit": {
                            "type": "string",
                            "example": "babecafebabecafebabecafebabecafebabecafe"
                          },
                          "repository": {
                            "type": "object",
                            "properties": {
                              "hierarchyId": {
                                "type": "string",
                                "readOnly": true,
                                "example": "e3c939f9ef4a7fae272e"
                              },
                              "scmId": {
                                "type": "string",
                                "example": "git"
                              },
                              "slug": {
                                "type": "string",
                                "example": "my-repo"
                              },
                              "statusMessage": {
                                "type": "string",
                                "readOnly": true,
                                "example": "Available"
                              },
                              "archived": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "forkable": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "defaultBranch": {
                                "type": "string",
                                "readOnly": true,
                                "example": "main"
                              },
                              "partition": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "relatedLinks": {
                                "type": "object",
                                "properties": {},
                                "readOnly": true
                              },
                              "project": {
                                "required": [
                                  "key"
                                ],
                                "type": "object",
                                "properties": {
                                  "avatar": {
                                    "type": "string"
                                  },
                                  "avatarUrl": {
                                    "type": "string",
                                    "writeOnly": true
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "The description for my cool project"
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "readOnly": true,
                                    "deprecated": true
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "PROJECT"
                                  },
                                  "name": {
                                    "pattern": "^[^~].*",
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My Cool Project"
                                  },
                                  "key": {
                                    "type": "string",
                                    "example": "PRJ"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "type": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "NORMAL",
                                      "PERSONAL"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                }
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "My repo description"
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "REPOSITORY"
                              },
                              "origin": {
                                "type": "object",
                                "properties": {
                                  "hierarchyId": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "e3c939f9ef4a7fae272e"
                                  },
                                  "scmId": {
                                    "type": "string",
                                    "example": "git"
                                  },
                                  "slug": {
                                    "type": "string",
                                    "example": "my-repo"
                                  },
                                  "statusMessage": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "Available"
                                  },
                                  "archived": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "forkable": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "defaultBranch": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "main"
                                  },
                                  "partition": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "relatedLinks": {
                                    "type": "object",
                                    "properties": {},
                                    "readOnly": true
                                  },
                                  "project": {
                                    "required": [
                                      "key"
                                    ],
                                    "type": "object",
                                    "properties": {
                                      "avatar": {
                                        "type": "string"
                                      },
                                      "avatarUrl": {
                                        "type": "string",
                                        "writeOnly": true
                                      },
                                      "description": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "The description for my cool project"
                                      },
                                      "namespace": {
                                        "type": "string",
                                        "readOnly": true,
                                        "deprecated": true
                                      },
                                      "scope": {
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "PROJECT"
                                      },
                                      "name": {
                                        "pattern": "^[^~].*",
                                        "type": "string",
                                        "readOnly": true,
                                        "example": "My Cool Project"
                                      },
                                      "key": {
                                        "type": "string",
                                        "example": "PRJ"
                                      },
                                      "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "readOnly": true
                                      },
                                      "type": {
                                        "type": "string",
                                        "readOnly": true,
                                        "enum": [
                                          "NORMAL",
                                          "PERSONAL"
                                        ]
                                      },
                                      "public": {
                                        "type": "boolean",
                                        "readOnly": true
                                      },
                                      "links": {
                                        "type": "object",
                                        "properties": {},
                                        "writeOnly": true
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "My repo description"
                                  },
                                  "scope": {
                                    "type": "string",
                                    "readOnly": true,
                                    "example": "REPOSITORY"
                                  },
                                  "name": {
                                    "type": "string",
                                    "example": "My repo"
                                  },
                                  "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "readOnly": true
                                  },
                                  "state": {
                                    "type": "string",
                                    "readOnly": true,
                                    "enum": [
                                      "AVAILABLE",
                                      "INITIALISATION_FAILED",
                                      "INITIALISING",
                                      "OFFLINE"
                                    ]
                                  },
                                  "public": {
                                    "type": "boolean",
                                    "readOnly": true
                                  },
                                  "links": {
                                    "type": "object",
                                    "properties": {},
                                    "writeOnly": true
                                  }
                                },
                                "readOnly": true
                              },
                              "name": {
                                "type": "string",
                                "example": "My repo"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "state": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "AVAILABLE",
                                  "INITIALISATION_FAILED",
                                  "INITIALISING",
                                  "OFFLINE"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "id": {
                            "type": "string",
                            "example": "refs/heads/feature-ABC-123"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "BRANCH",
                              "TAG"
                            ]
                          }
                        }
                      },
                      "draft": {
                        "type": "boolean"
                      },
                      "updatedDate": {
                        "type": "integer",
                        "format": "int64",
                        "example": 14490759200
                      },
                      "htmlDescription": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "version": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "locked": {
                        "type": "boolean"
                      },
                      "description": {
                        "type": "string",
                        "example": "It is a kludge, but put the tuple from the database in the cache."
                      },
                      "closed": {
                        "type": "boolean"
                      },
                      "title": {
                        "type": "string",
                        "example": "Talking Nerdy"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "DECLINED",
                          "MERGED",
                          "OPEN"
                        ]
                      },
                      "open": {
                        "type": "boolean"
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    },
                    "readOnly": true
                  },
                  "srcPath": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  },
                  "toHash": {
                    "type": "string",
                    "example": "3cdd5d19178a54d2e51b5098d43b57571241d0ab"
                  },
                  "lineComment": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "diffType": {
                    "type": "string",
                    "enum": [
                      "COMMIT",
                      "EFFECTIVE",
                      "RANGE"
                    ]
                  },
                  "fileType": {
                    "type": "string",
                    "enum": [
                      "FROM",
                      "TO"
                    ]
                  },
                  "fromHash": {
                    "type": "string",
                    "example": "62a0505e8204115b8b9c8a95bfa264a8c0896a93"
                  },
                  "lineType": {
                    "type": "string",
                    "enum": [
                      "ADDED",
                      "CONTEXT",
                      "REMOVED"
                    ]
                  },
                  "line": {
                    "type": "integer",
                    "format": "int32",
                    "example": 98
                  },
                  "path": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  }
                },
                "readOnly": true
              },
              "createdDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1359075920
              },
              "html": {
                "type": "string",
                "readOnly": true
              },
              "threadResolvedDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1569075920
              },
              "threadResolver": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "emailAddress": {
                    "type": "string",
                    "example": "jane@example.com"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 101
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "NORMAL",
                      "SERVICE"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Jane Citizen"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "anchored": {
                "type": "boolean",
                "readOnly": true
              },
              "pending": {
                "type": "boolean",
                "readOnly": true
              },
              "reply": {
                "type": "boolean",
                "readOnly": true
              },
              "threadResolved": {
                "type": "boolean",
                "description": "Indicates if this comment thread has been marked as resolved or not"
              },
              "author": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "emailAddress": {
                    "type": "string",
                    "example": "jane@example.com"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 101
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "NORMAL",
                      "SERVICE"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Jane Citizen"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "resolvedDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1239075920
              },
              "updatedDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "example": 1449075920
              },
              "version": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "text": {
                "type": "string",
                "example": "An insightful comment."
              },
              "severity": {
                "type": "string",
                "example": "NORMAL"
              },
              "resolver": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "emailAddress": {
                    "type": "string",
                    "example": "jane@example.com"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "jcitizen"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "example": 101
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "NORMAL",
                      "SERVICE"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "example": "Jane Citizen"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "state": {
                "type": "string",
                "example": "OPEN"
              },
              "properties": {
                "type": "object"
              }
            },
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "state": {
            "type": "string",
            "example": "OPEN"
          },
          "properties": {
            "type": "object"
          }
        }
      },
      "RestSshSettings": {
        "properties": {
          "accessKeysEnabled": {
            "type": "boolean"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/SimpleSshKeyFingerprint"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "baseUrl": {
            "type": "string",
            "example": "ssh://example.com"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "example": 7999
          }
        }
      },
      "SimpleSshKeyFingerprint": {
        "properties": {
          "algorithm": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ApplicationUser": {
        "properties": {
          "slug": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "NORMAL",
              "SERVICE"
            ]
          },
          "displayName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ExampleAvatarMultipartFormData": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "description": "The avatar file to upload.",
            "format": "binary"
          }
        }
      },
      "ExampleFiles": {
        "properties": {
          "files": {
            "$ref": "#/components/schemas/ExampleJsonLastModifiedCallback"
          }
        }
      },
      "ExampleJsonLastModifiedCallback": {
        "properties": {
          "readmeMd": {
            "type": "object",
            "properties": {
              "committerTimestamp": {
                "type": "integer",
                "format": "int64",
                "example": 1449075830
              },
              "committer": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "example": "charlie@example.com"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Charlie"
                  }
                }
              },
              "authorTimestamp": {
                "type": "integer",
                "format": "int64",
                "example": 1359075920
              },
              "author": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "example": "charlie@example.com"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Charlie"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestMinimalCommit"
                }
              },
              "message": {
                "type": "string",
                "example": "More work on feature 1"
              },
              "displayId": {
                "type": "string",
                "example": "abcdef0"
              },
              "id": {
                "type": "string",
                "example": "abcdef0123abcdef4567abcdef8987abcdef6543"
              }
            }
          },
          "pomXml": {
            "type": "object",
            "properties": {
              "committerTimestamp": {
                "type": "integer",
                "format": "int64",
                "example": 1449075830
              },
              "committer": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "example": "charlie@example.com"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Charlie"
                  }
                }
              },
              "authorTimestamp": {
                "type": "integer",
                "format": "int64",
                "example": 1359075920
              },
              "author": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "example": "charlie@example.com"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Charlie"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestMinimalCommit"
                }
              },
              "message": {
                "type": "string",
                "example": "More work on feature 1"
              },
              "displayId": {
                "type": "string",
                "example": "abcdef0"
              },
              "id": {
                "type": "string",
                "example": "abcdef0123abcdef4567abcdef8987abcdef6543"
              }
            }
          },
          "latestCommit": {
            "type": "object",
            "properties": {
              "committerTimestamp": {
                "type": "integer",
                "format": "int64",
                "example": 1449075830
              },
              "committer": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "example": "charlie@example.com"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Charlie"
                  }
                }
              },
              "authorTimestamp": {
                "type": "integer",
                "format": "int64",
                "example": 1359075920
              },
              "author": {
                "type": "object",
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "example": "charlie@example.com"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "name": {
                    "type": "string",
                    "example": "Charlie"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestMinimalCommit"
                }
              },
              "message": {
                "type": "string",
                "example": "More work on feature 1"
              },
              "displayId": {
                "type": "string",
                "example": "abcdef0"
              },
              "id": {
                "type": "string",
                "example": "abcdef0123abcdef4567abcdef8987abcdef6543"
              }
            }
          }
        }
      },
      "ExampleMultipartFormData": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "The branch on which the <code>path</code> should be modified or created."
          },
          "content": {
            "type": "string",
            "description": "The full content of the file at <code>path</code>."
          },
          "message": {
            "type": "string",
            "description": "The message associated with this change, to be used as the commit message. Or null if the default message should be used."
          },
          "sourceBranch": {
            "type": "string",
            "description": "The starting point for <code>branch</code>. If provided and different from <code>branch</code>, <code>branch</code> will be created as a new branch, branching off from <code>sourceBranch</code>."
          },
          "sourceCommitId": {
            "type": "string",
            "description": "The commit ID of the file before it was edited, used to identify if content has changed. Or null if this is a new file"
          }
        }
      },
      "ExampleSettings": {
        "properties": {
          "stringValue": {
            "type": "string",
            "example": "This is an arbitrary string"
          },
          "booleanValue": {
            "type": "boolean",
            "example": true
          },
          "doubleValue": {
            "type": "number",
            "format": "double",
            "example": 1.1
          },
          "integerValue": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "longValue": {
            "type": "integer",
            "format": "int64",
            "example": -2147483648
          }
        }
      },
      "FileListResource": {},
      "RepositoryHookDetails": {
        "properties": {
          "configFormKey": {
            "type": "string"
          },
          "supportedScopes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "PROJECT",
                "REPOSITORY"
              ]
            }
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRE_RECEIVE",
              "PRE_PULL_REQUEST_MERGE",
              "POST_RECEIVE"
            ]
          }
        }
      },
      "RestApplySuggestionRequest": {
        "type": "object",
        "properties": {
          "commentVersion": {
            "type": "object",
            "properties": {
              "asInt": {
                "type": "integer",
                "format": "int32"
              },
              "present": {
                "type": "boolean"
              }
            },
            "example": 0
          },
          "commitMessage": {
            "type": "string",
            "example": "A commit message"
          },
          "pullRequestVersion": {
            "type": "object",
            "properties": {
              "asInt": {
                "type": "integer",
                "format": "int32"
              },
              "present": {
                "type": "boolean"
              }
            },
            "example": 1
          },
          "suggestionIndex": {
            "type": "object",
            "properties": {
              "asInt": {
                "type": "integer",
                "format": "int32"
              },
              "present": {
                "type": "boolean"
              }
            },
            "example": 2
          }
        }
      },
      "RestAttachmentMetadata": {
        "properties": {
          "url": {
            "type": "string",
            "example": "test.com/test"
          },
          "metadata": {
            "type": "string",
            "example": "{\\\"A\\\":\\\"B\\\"}"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "RestAutoDeclineSettings": {
        "properties": {
          "inactivityWeeks": {
            "type": "integer",
            "format": "int32",
            "example": 4
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            }
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "RestAutoDeclineSettingsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "inactivityWeeks": {
            "type": "integer",
            "format": "int32",
            "example": 4
          }
        }
      },
      "RestAutoMergeProcessingResult": {
        "properties": {
          "autoMergeProcessingStatus": {
            "type": "string",
            "example": "CANCELLED",
            "enum": [
              "CANCELLED",
              "VETOED",
              "STALE",
              "MERGED",
              "LOCK_FAILURE",
              "UNKNOWN"
            ]
          },
          "pullRequest": {
            "type": "object",
            "properties": {
              "closedDate": {
                "type": "integer",
                "format": "int64",
                "example": 19990759200
              },
              "fromRef": {
                "type": "object",
                "properties": {
                  "displayId": {
                    "type": "string",
                    "example": "feature-ABC-1233"
                  },
                  "latestCommit": {
                    "type": "string",
                    "example": "babecafebabecafebabecafebabecafebabecafe"
                  },
                  "repository": {
                    "type": "object",
                    "properties": {
                      "hierarchyId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "e3c939f9ef4a7fae272e"
                      },
                      "scmId": {
                        "type": "string",
                        "example": "git"
                      },
                      "slug": {
                        "type": "string",
                        "example": "my-repo"
                      },
                      "statusMessage": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Available"
                      },
                      "archived": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "forkable": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "defaultBranch": {
                        "type": "string",
                        "readOnly": true,
                        "example": "main"
                      },
                      "partition": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "relatedLinks": {
                        "type": "object",
                        "properties": {},
                        "readOnly": true
                      },
                      "project": {
                        "required": [
                          "key"
                        ],
                        "type": "object",
                        "properties": {
                          "avatar": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "writeOnly": true
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "The description for my cool project"
                          },
                          "namespace": {
                            "type": "string",
                            "readOnly": true,
                            "deprecated": true
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "PROJECT"
                          },
                          "name": {
                            "pattern": "^[^~].*",
                            "type": "string",
                            "readOnly": true,
                            "example": "My Cool Project"
                          },
                          "key": {
                            "type": "string",
                            "example": "PRJ"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "NORMAL",
                              "PERSONAL"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "My repo description"
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "REPOSITORY"
                      },
                      "origin": {
                        "type": "object",
                        "properties": {
                          "hierarchyId": {
                            "type": "string",
                            "readOnly": true,
                            "example": "e3c939f9ef4a7fae272e"
                          },
                          "scmId": {
                            "type": "string",
                            "example": "git"
                          },
                          "slug": {
                            "type": "string",
                            "example": "my-repo"
                          },
                          "statusMessage": {
                            "type": "string",
                            "readOnly": true,
                            "example": "Available"
                          },
                          "archived": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "forkable": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "defaultBranch": {
                            "type": "string",
                            "readOnly": true,
                            "example": "main"
                          },
                          "partition": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "relatedLinks": {
                            "type": "object",
                            "properties": {},
                            "readOnly": true
                          },
                          "project": {
                            "required": [
                              "key"
                            ],
                            "type": "object",
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "avatarUrl": {
                                "type": "string",
                                "writeOnly": true
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "The description for my cool project"
                              },
                              "namespace": {
                                "type": "string",
                                "readOnly": true,
                                "deprecated": true
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "PROJECT"
                              },
                              "name": {
                                "pattern": "^[^~].*",
                                "type": "string",
                                "readOnly": true,
                                "example": "My Cool Project"
                              },
                              "key": {
                                "type": "string",
                                "example": "PRJ"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "type": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "NORMAL",
                                  "PERSONAL"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "My repo description"
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "REPOSITORY"
                          },
                          "name": {
                            "type": "string",
                            "example": "My repo"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "state": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "AVAILABLE",
                              "INITIALISATION_FAILED",
                              "INITIALISING",
                              "OFFLINE"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        },
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "example": "My repo"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "state": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "AVAILABLE",
                          "INITIALISATION_FAILED",
                          "INITIALISING",
                          "OFFLINE"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    }
                  },
                  "id": {
                    "type": "string",
                    "example": "refs/heads/feature-ABC-123"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "BRANCH",
                      "TAG"
                    ]
                  }
                }
              },
              "participants": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestPullRequestParticipant"
                }
              },
              "reviewers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestPullRequestParticipant"
                }
              },
              "createdDate": {
                "type": "integer",
                "format": "int64",
                "example": 13590759200
              },
              "toRef": {
                "type": "object",
                "properties": {
                  "displayId": {
                    "type": "string",
                    "example": "feature-ABC-1233"
                  },
                  "latestCommit": {
                    "type": "string",
                    "example": "babecafebabecafebabecafebabecafebabecafe"
                  },
                  "repository": {
                    "type": "object",
                    "properties": {
                      "hierarchyId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "e3c939f9ef4a7fae272e"
                      },
                      "scmId": {
                        "type": "string",
                        "example": "git"
                      },
                      "slug": {
                        "type": "string",
                        "example": "my-repo"
                      },
                      "statusMessage": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Available"
                      },
                      "archived": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "forkable": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "defaultBranch": {
                        "type": "string",
                        "readOnly": true,
                        "example": "main"
                      },
                      "partition": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "relatedLinks": {
                        "type": "object",
                        "properties": {},
                        "readOnly": true
                      },
                      "project": {
                        "required": [
                          "key"
                        ],
                        "type": "object",
                        "properties": {
                          "avatar": {
                            "type": "string"
                          },
                          "avatarUrl": {
                            "type": "string",
                            "writeOnly": true
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "The description for my cool project"
                          },
                          "namespace": {
                            "type": "string",
                            "readOnly": true,
                            "deprecated": true
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "PROJECT"
                          },
                          "name": {
                            "pattern": "^[^~].*",
                            "type": "string",
                            "readOnly": true,
                            "example": "My Cool Project"
                          },
                          "key": {
                            "type": "string",
                            "example": "PRJ"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "NORMAL",
                              "PERSONAL"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        }
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "My repo description"
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "REPOSITORY"
                      },
                      "origin": {
                        "type": "object",
                        "properties": {
                          "hierarchyId": {
                            "type": "string",
                            "readOnly": true,
                            "example": "e3c939f9ef4a7fae272e"
                          },
                          "scmId": {
                            "type": "string",
                            "example": "git"
                          },
                          "slug": {
                            "type": "string",
                            "example": "my-repo"
                          },
                          "statusMessage": {
                            "type": "string",
                            "readOnly": true,
                            "example": "Available"
                          },
                          "archived": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "forkable": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "defaultBranch": {
                            "type": "string",
                            "readOnly": true,
                            "example": "main"
                          },
                          "partition": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "relatedLinks": {
                            "type": "object",
                            "properties": {},
                            "readOnly": true
                          },
                          "project": {
                            "required": [
                              "key"
                            ],
                            "type": "object",
                            "properties": {
                              "avatar": {
                                "type": "string"
                              },
                              "avatarUrl": {
                                "type": "string",
                                "writeOnly": true
                              },
                              "description": {
                                "type": "string",
                                "readOnly": true,
                                "example": "The description for my cool project"
                              },
                              "namespace": {
                                "type": "string",
                                "readOnly": true,
                                "deprecated": true
                              },
                              "scope": {
                                "type": "string",
                                "readOnly": true,
                                "example": "PROJECT"
                              },
                              "name": {
                                "pattern": "^[^~].*",
                                "type": "string",
                                "readOnly": true,
                                "example": "My Cool Project"
                              },
                              "key": {
                                "type": "string",
                                "example": "PRJ"
                              },
                              "id": {
                                "type": "integer",
                                "format": "int32",
                                "readOnly": true
                              },
                              "type": {
                                "type": "string",
                                "readOnly": true,
                                "enum": [
                                  "NORMAL",
                                  "PERSONAL"
                                ]
                              },
                              "public": {
                                "type": "boolean",
                                "readOnly": true
                              },
                              "links": {
                                "type": "object",
                                "properties": {},
                                "writeOnly": true
                              }
                            }
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "example": "My repo description"
                          },
                          "scope": {
                            "type": "string",
                            "readOnly": true,
                            "example": "REPOSITORY"
                          },
                          "name": {
                            "type": "string",
                            "example": "My repo"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int32",
                            "readOnly": true
                          },
                          "state": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "AVAILABLE",
                              "INITIALISATION_FAILED",
                              "INITIALISING",
                              "OFFLINE"
                            ]
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": true
                          },
                          "links": {
                            "type": "object",
                            "properties": {},
                            "writeOnly": true
                          }
                        },
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "example": "My repo"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "state": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "AVAILABLE",
                          "INITIALISATION_FAILED",
                          "INITIALISING",
                          "OFFLINE"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    }
                  },
                  "id": {
                    "type": "string",
                    "example": "refs/heads/feature-ABC-123"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "BRANCH",
                      "TAG"
                    ]
                  }
                }
              },
              "draft": {
                "type": "boolean"
              },
              "updatedDate": {
                "type": "integer",
                "format": "int64",
                "example": 14490759200
              },
              "htmlDescription": {
                "type": "string",
                "writeOnly": true
              },
              "version": {
                "type": "integer",
                "format": "int32"
              },
              "locked": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "example": "It is a kludge, but put the tuple from the database in the cache."
              },
              "closed": {
                "type": "boolean"
              },
              "title": {
                "type": "string",
                "example": "Talking Nerdy"
              },
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "state": {
                "type": "string",
                "enum": [
                  "DECLINED",
                  "MERGED",
                  "OPEN"
                ]
              },
              "open": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          }
        }
      },
      "RestAutoMergeProjectSettingsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": false
          },
          "restrictionAction": {
            "type": "string",
            "example": "CREATE",
            "enum": [
              "CREATE",
              "DELETE",
              "NONE"
            ]
          }
        }
      },
      "RestAutoMergeRequest": {
        "properties": {
          "toRefId": {
            "type": "string",
            "example": "refs/heads/feature-ABC-123"
          },
          "strategyId": {
            "type": "string",
            "example": "(Optional) squash"
          },
          "autoSubject": {
            "type": "boolean",
            "example": true
          },
          "createdDate": {
            "type": "integer",
            "format": "int64",
            "example": 13590759200
          },
          "fromHash": {
            "type": "string",
            "example": "babecafebabecafebabecafebabecafebabecafe"
          },
          "message": {
            "type": "string",
            "example": "(Optional) A descriptive message for the merge commit"
          }
        }
      },
      "RestAutoMergeRestrictedSettings": {
        "properties": {
          "restrictionState": {
            "type": "string",
            "description": "The restriction state of this scope's project.",
            "enum": [
              "NONE",
              "RESTRICTED_UNMODIFIABLE",
              "RESTRICTED_MODIFIABLE"
            ]
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            },
            "description": "The scope that these settings apply to."
          },
          "enabled": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "RestAutoMergeSettingsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "RestChange": {
        "properties": {
          "conflict": {
            "type": "object",
            "properties": {
              "ourChange": {
                "type": "object",
                "properties": {
                  "srcPath": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "ADD",
                      "COPY",
                      "DELETE",
                      "MODIFY",
                      "MOVE",
                      "UNKNOWN"
                    ]
                  },
                  "path": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  }
                }
              },
              "theirChange": {
                "type": "object",
                "properties": {
                  "srcPath": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "ADD",
                      "COPY",
                      "DELETE",
                      "MODIFY",
                      "MOVE",
                      "UNKNOWN"
                    ]
                  },
                  "path": {
                    "type": "object",
                    "properties": {
                      "components": {
                        "type": "array",
                        "example": [
                          "path",
                          "to",
                          "file.txt"
                        ],
                        "items": {
                          "type": "string"
                        }
                      },
                      "name": {
                        "type": "string",
                        "example": "file.txt"
                      },
                      "parent": {
                        "type": "string",
                        "example": "path/to"
                      },
                      "extension": {
                        "type": "string",
                        "example": "txt"
                      }
                    }
                  }
                }
              }
            }
          },
          "contentId": {
            "type": "string",
            "example": "abcdef0123abcdef4567abcdef8987abcdef6543"
          },
          "fromContentId": {
            "type": "string",
            "example": "bcdef0123abcdef4567abcdef8987abcdef6543a"
          },
          "srcExecutable": {
            "type": "boolean"
          },
          "percentUnchanged": {
            "type": "integer",
            "format": "int32",
            "example": 98
          },
          "srcPath": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "example": [
                  "path",
                  "to",
                  "file.txt"
                ],
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "example": "file.txt"
              },
              "parent": {
                "type": "string",
                "example": "path/to"
              },
              "extension": {
                "type": "string",
                "example": "txt"
              }
            }
          },
          "nodeType": {
            "type": "string",
            "enum": [
              "DIRECTORY",
              "FILE",
              "SUBMODULE"
            ]
          },
          "executable": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ADD",
              "COPY",
              "DELETE",
              "MODIFY",
              "MOVE",
              "UNKNOWN"
            ]
          },
          "path": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "example": [
                  "path",
                  "to",
                  "file.txt"
                ],
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "example": "file.txt"
              },
              "parent": {
                "type": "string",
                "example": "path/to"
              },
              "extension": {
                "type": "string",
                "example": "txt"
              }
            }
          },
          "links": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          }
        }
      },
      "RestCommitMessageSuggestion": {
        "properties": {
          "title": {
            "type": "string",
            "example": "Pull request #2: add new feature"
          },
          "body": {
            "type": "string",
            "example": "Merge in PROJECT_1/repo_1 from feature/feature-2 to main"
          }
        }
      },
      "RestCreateBranchRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "This is my branch or tag"
          },
          "name": {
            "type": "string",
            "example": "my-branch-or-tag"
          },
          "startPoint": {
            "type": "string",
            "example": "8d351a10fb428c0c1239530256e21cf24f136e73"
          }
        }
      },
      "RestCreateTagRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "This is my branch or tag"
          },
          "name": {
            "type": "string",
            "example": "my-branch-or-tag"
          },
          "startPoint": {
            "type": "string",
            "example": "8d351a10fb428c0c1239530256e21cf24f136e73"
          }
        }
      },
      "RestDetailedGroup": {
        "properties": {
          "deletable": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "example": "group-a"
          }
        }
      },
      "RestDetailedInvocation": {
        "properties": {
          "eventScope": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "finish": {
            "type": "integer",
            "format": "int32"
          },
          "event": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "request": {
            "type": "object",
            "properties": {}
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "RestDiff": {
        "properties": {
          "lineComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestComment"
            }
          },
          "truncated": {
            "type": "boolean"
          },
          "hunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestDiffHunk"
            }
          },
          "source": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "example": [
                  "path",
                  "to",
                  "file.txt"
                ],
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "example": "file.txt"
              },
              "parent": {
                "type": "string",
                "example": "path/to"
              },
              "extension": {
                "type": "string",
                "example": "txt"
              }
            }
          },
          "binary": {
            "type": "boolean"
          },
          "destination": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "example": [
                  "path",
                  "to",
                  "file.txt"
                ],
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string",
                "example": "file.txt"
              },
              "parent": {
                "type": "string",
                "example": "path/to"
              },
              "extension": {
                "type": "string",
                "example": "txt"
              }
            }
          },
          "properties": {
            "type": "object"
          }
        }
      },
      "RestDiffHunk": {
        "properties": {
          "sourceSpan": {
            "type": "integer",
            "format": "int32"
          },
          "destinationLine": {
            "type": "integer",
            "format": "int32"
          },
          "destinationSpan": {
            "type": "integer",
            "format": "int32"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestDiffSegment"
            }
          },
          "truncated": {
            "type": "boolean"
          },
          "sourceLine": {
            "type": "integer",
            "format": "int32"
          },
          "context": {
            "type": "string"
          }
        }
      },
      "RestDiffLine": {
        "properties": {
          "conflictMarker": {
            "type": "string",
            "enum": [
              "MARKER",
              "OURS",
              "THEIRS"
            ]
          },
          "commentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "truncated": {
            "type": "boolean"
          },
          "source": {
            "type": "integer",
            "format": "int32"
          },
          "line": {
            "type": "string"
          },
          "destination": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestDiffSegment": {
        "properties": {
          "truncated": {
            "type": "boolean"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestDiffLine"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ADDED",
              "CONTEXT",
              "REMOVED"
            ]
          }
        }
      },
      "RestHookScriptConfig": {
        "properties": {
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            }
          },
          "script": {
            "type": "object",
            "properties": {
              "createdDate": {
                "type": "string",
                "format": "date-time"
              },
              "updatedDate": {
                "type": "string",
                "format": "date-time"
              },
              "version": {
                "type": "integer",
                "format": "int32"
              },
              "description": {
                "type": "string"
              },
              "pluginKey": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "type": {
                "type": "string",
                "enum": [
                  "POST",
                  "PRE"
                ]
              }
            }
          },
          "triggerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestHookScriptTriggers": {
        "type": "object",
        "properties": {
          "triggerIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestInvocationHistory": {
        "properties": {}
      },
      "RestLabel": {
        "properties": {
          "name": {
            "type": "string",
            "example": "labelName"
          }
        }
      },
      "RestPermitted": {
        "properties": {
          "permitted": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "RestPermittedGroup": {
        "properties": {
          "group": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "group_a"
              }
            }
          },
          "permission": {
            "type": "string",
            "example": "ADMIN"
          }
        }
      },
      "RestPermittedUser": {
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            }
          },
          "permission": {
            "type": "string",
            "enum": [
              "USER_ADMIN",
              "PROJECT_VIEW",
              "REPO_READ",
              "REPO_WRITE",
              "REPO_ADMIN",
              "PROJECT_READ",
              "PROJECT_WRITE",
              "REPO_CREATE",
              "PROJECT_ADMIN",
              "LICENSED_USER",
              "PROJECT_CREATE",
              "ADMIN",
              "SYS_ADMIN"
            ]
          }
        }
      },
      "RestProjectSettingsRestriction": {
        "properties": {
          "componentKey": {
            "type": "string",
            "example": "my-admin-component"
          },
          "processedState": {
            "type": "string",
            "example": "PROCESSED",
            "enum": [
              "UNPROCESSED",
              "PROCESSED",
              "FAILED",
              "IN_PROGRESS"
            ]
          },
          "project": {
            "required": [
              "key"
            ],
            "type": "object",
            "properties": {
              "avatar": {
                "type": "string"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "The description for my cool project"
              },
              "namespace": {
                "type": "string",
                "readOnly": true,
                "deprecated": true
              },
              "scope": {
                "type": "string",
                "readOnly": true,
                "example": "PROJECT"
              },
              "name": {
                "pattern": "^[^~].*",
                "type": "string",
                "readOnly": true,
                "example": "My Cool Project"
              },
              "key": {
                "type": "string",
                "example": "PRJ"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "NORMAL",
                  "PERSONAL"
                ]
              },
              "public": {
                "type": "boolean",
                "readOnly": true
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          },
          "namespace": {
            "type": "string",
            "example": "org.featuredeveloper"
          },
          "featureKey": {
            "type": "string",
            "example": "my-admin-feature"
          }
        }
      },
      "RestProjectSettingsRestrictionRequest": {
        "required": [
          "featureKey",
          "namespace"
        ],
        "type": "object",
        "properties": {
          "componentKey": {
            "type": "string",
            "example": "my-admin-component"
          },
          "featureKey": {
            "type": "string",
            "example": "my-admin-feature"
          },
          "namespace": {
            "type": "string",
            "example": "org.featuredeveloper"
          }
        }
      },
      "RestPullRequestActivity": {
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "APPROVED",
              "AUTO_MERGE_CANCELLED",
              "AUTO_MERGE_REQUESTED",
              "COMMENTED",
              "DECLINED",
              "DELETED",
              "MERGED",
              "OPENED",
              "REOPENED",
              "RESCOPED",
              "REVIEW_COMMENTED",
              "REVIEW_DISCARDED",
              "REVIEW_FINISHED",
              "REVIEWED",
              "UNAPPROVED",
              "UPDATED"
            ]
          },
          "createdDate": {
            "type": "integer",
            "format": "int64",
            "example": 19990759200
          },
          "user": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "RestPullRequestAssignParticipantRoleRequest": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "AUTHOR",
              "REVIEWER",
              "PARTICIPANT"
            ]
          },
          "user": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              }
            }
          }
        }
      },
      "RestPullRequestAssignStatusRequest": {
        "type": "object",
        "properties": {
          "lastReviewedCommit": {
            "type": "string",
            "example": "685cac2c4499ff1f308851e35d2b4357844d8927"
          },
          "status": {
            "type": "string",
            "enum": [
              "UNAPPROVED",
              "NEEDS_WORK",
              "APPROVED"
            ]
          }
        }
      },
      "RestPullRequestDeclineRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "An optional comment explaining why the pull request is being declined"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestPullRequestDeleteRequest": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestPullRequestFinishReviewRequest": {
        "type": "object",
        "properties": {
          "commentText": {
            "type": "string",
            "example": "General comment text"
          },
          "lastReviewedCommit": {
            "type": "string",
            "example": "685cac2c4499ff1f308851e35d2b4357844d8927"
          },
          "participantStatus": {
            "type": "string",
            "example": "approved"
          }
        }
      },
      "RestPullRequestMergeConfig": {
        "properties": {
          "commitMessageTemplate": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Pull request #${id}: ${title}"
              },
              "body": {
                "type": "string",
                "example": "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName}"
              }
            }
          },
          "commitSummaries": {
            "type": "integer",
            "format": "int32"
          },
          "defaultStrategy": {
            "type": "object",
            "properties": {
              "flag": {
                "type": "string",
                "readOnly": true,
                "example": "--no-ff"
              },
              "enabled": {
                "type": "boolean",
                "readOnly": true
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "Always create a merge commit"
              },
              "name": {
                "type": "string",
                "readOnly": true,
                "example": "Merge commit"
              },
              "id": {
                "type": "string",
                "example": "no-ff"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestPullRequestMergeStrategy"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "repository"
          }
        }
      },
      "RestPullRequestMergeRequest": {
        "type": "object",
        "properties": {
          "autoMerge": {
            "type": "boolean",
            "example": false
          },
          "autoSubject": {
            "type": "string",
            "example": "(Optional, 5.7+) true to prepend an auto-generated subject to the message (default), or false to use the message as-is"
          },
          "message": {
            "type": "string",
            "example": "(Optional) A descriptive message for the merge commit"
          },
          "strategyId": {
            "type": "string",
            "example": "(Optional) squash"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestPullRequestMergeStrategy": {
        "properties": {
          "flag": {
            "type": "string",
            "readOnly": true,
            "example": "--no-ff"
          },
          "enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "example": "Always create a merge commit"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "Merge commit"
          },
          "id": {
            "type": "string",
            "example": "no-ff"
          },
          "links": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          }
        }
      },
      "RestPullRequestMergeability": {
        "properties": {
          "outcome": {
            "type": "string",
            "enum": [
              "CLEAN",
              "CONFLICTED",
              "UNKNOWN"
            ]
          },
          "vetoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestRepositoryHookVeto"
            }
          },
          "conflicted": {
            "type": "boolean"
          }
        }
      },
      "RestPullRequestReopenRequest": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestPullRequestSettings": {
        "properties": {
          "mergeConfig": {
            "type": "object",
            "properties": {
              "commitMessageTemplate": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Pull request #${id}: ${title}"
                  },
                  "body": {
                    "type": "string",
                    "example": "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName}"
                  }
                }
              },
              "commitSummaries": {
                "type": "integer",
                "format": "int32"
              },
              "defaultStrategy": {
                "type": "object",
                "properties": {
                  "flag": {
                    "type": "string",
                    "readOnly": true,
                    "example": "--no-ff"
                  },
                  "enabled": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Always create a merge commit"
                  },
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Merge commit"
                  },
                  "id": {
                    "type": "string",
                    "example": "no-ff"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "strategies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestPullRequestMergeStrategy"
                }
              },
              "type": {
                "type": "string",
                "readOnly": true,
                "example": "repository"
              }
            }
          }
        }
      },
      "RestRepositoryHook": {
        "properties": {
          "configured": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            }
          },
          "details": {
            "$ref": "#/components/schemas/RepositoryHookDetails"
          }
        }
      },
      "RestRepositoryPullRequestSettings": {
        "properties": {
          "requiredAllApprovers": {
            "type": "boolean"
          },
          "requiredAllTasksComplete": {
            "type": "boolean"
          },
          "requiredApprovers": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "example": true
              },
              "count": {
                "type": "string",
                "example": "3"
              }
            }
          },
          "requiredApproversDeprecated": {
            "type": "integer",
            "format": "int32"
          },
          "requiredSuccessfulBuilds": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "example": true
              },
              "count": {
                "type": "string",
                "example": "3"
              }
            }
          },
          "requiredSuccessfulBuildsDeprecated": {
            "type": "integer",
            "format": "int32"
          },
          "mergeConfig": {
            "type": "object",
            "properties": {
              "commitMessageTemplate": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Pull request #${id}: ${title}"
                  },
                  "body": {
                    "type": "string",
                    "example": "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName} to ${toRefName}"
                  }
                }
              },
              "commitSummaries": {
                "type": "integer",
                "format": "int32"
              },
              "defaultStrategy": {
                "type": "object",
                "properties": {
                  "flag": {
                    "type": "string",
                    "readOnly": true,
                    "example": "--no-ff"
                  },
                  "enabled": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Always create a merge commit"
                  },
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Merge commit"
                  },
                  "id": {
                    "type": "string",
                    "example": "no-ff"
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "strategies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestPullRequestMergeStrategy"
                }
              },
              "type": {
                "type": "string",
                "readOnly": true,
                "example": "repository"
              }
            }
          }
        }
      },
      "RestRepositoryRefChangeActivity": {
        "properties": {
          "refChange": {
            "type": "object",
            "properties": {
              "updatedType": {
                "type": "string",
                "enum": [
                  "UNKNOWN",
                  "UNRESOLVED",
                  "NOT_FORCED",
                  "FORCED"
                ]
              },
              "toHash": {
                "type": "string",
                "example": "d6edcbf924697ab811a867421dab60d954ccad99"
              },
              "fromHash": {
                "type": "string",
                "example": "6053a1eaa1c009dd11092d09a72f3c41af1b59ad"
              },
              "refId": {
                "type": "string",
                "example": "refs/heads/master"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ADD",
                  "DELETE",
                  "UPDATE"
                ]
              },
              "ref": {
                "type": "object",
                "properties": {
                  "displayId": {
                    "type": "string",
                    "example": "master"
                  },
                  "id": {
                    "type": "string",
                    "example": "refs/heads/master"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "BRANCH",
                      "TAG"
                    ]
                  }
                }
              }
            }
          },
          "trigger": {
            "type": "string",
            "example": "push"
          },
          "repository": {
            "type": "object",
            "properties": {
              "hierarchyId": {
                "type": "string",
                "readOnly": true,
                "example": "e3c939f9ef4a7fae272e"
              },
              "scmId": {
                "type": "string",
                "example": "git"
              },
              "slug": {
                "type": "string",
                "example": "my-repo"
              },
              "statusMessage": {
                "type": "string",
                "readOnly": true,
                "example": "Available"
              },
              "archived": {
                "type": "boolean",
                "readOnly": true
              },
              "forkable": {
                "type": "boolean",
                "readOnly": true
              },
              "defaultBranch": {
                "type": "string",
                "readOnly": true,
                "example": "main"
              },
              "partition": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "relatedLinks": {
                "type": "object",
                "properties": {},
                "readOnly": true
              },
              "project": {
                "required": [
                  "key"
                ],
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "The description for my cool project"
                  },
                  "namespace": {
                    "type": "string",
                    "readOnly": true,
                    "deprecated": true
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "PROJECT"
                  },
                  "name": {
                    "pattern": "^[^~].*",
                    "type": "string",
                    "readOnly": true,
                    "example": "My Cool Project"
                  },
                  "key": {
                    "type": "string",
                    "example": "PRJ"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "NORMAL",
                      "PERSONAL"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                }
              },
              "description": {
                "type": "string",
                "readOnly": true,
                "example": "My repo description"
              },
              "scope": {
                "type": "string",
                "readOnly": true,
                "example": "REPOSITORY"
              },
              "origin": {
                "type": "object",
                "properties": {
                  "hierarchyId": {
                    "type": "string",
                    "readOnly": true,
                    "example": "e3c939f9ef4a7fae272e"
                  },
                  "scmId": {
                    "type": "string",
                    "example": "git"
                  },
                  "slug": {
                    "type": "string",
                    "example": "my-repo"
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "example": "Available"
                  },
                  "archived": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "forkable": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "defaultBranch": {
                    "type": "string",
                    "readOnly": true,
                    "example": "main"
                  },
                  "partition": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "relatedLinks": {
                    "type": "object",
                    "properties": {},
                    "readOnly": true
                  },
                  "project": {
                    "required": [
                      "key"
                    ],
                    "type": "object",
                    "properties": {
                      "avatar": {
                        "type": "string"
                      },
                      "avatarUrl": {
                        "type": "string",
                        "writeOnly": true
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "The description for my cool project"
                      },
                      "namespace": {
                        "type": "string",
                        "readOnly": true,
                        "deprecated": true
                      },
                      "scope": {
                        "type": "string",
                        "readOnly": true,
                        "example": "PROJECT"
                      },
                      "name": {
                        "pattern": "^[^~].*",
                        "type": "string",
                        "readOnly": true,
                        "example": "My Cool Project"
                      },
                      "key": {
                        "type": "string",
                        "example": "PRJ"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "NORMAL",
                          "PERSONAL"
                        ]
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": true
                      },
                      "links": {
                        "type": "object",
                        "properties": {},
                        "writeOnly": true
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "readOnly": true,
                    "example": "My repo description"
                  },
                  "scope": {
                    "type": "string",
                    "readOnly": true,
                    "example": "REPOSITORY"
                  },
                  "name": {
                    "type": "string",
                    "example": "My repo"
                  },
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "state": {
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                      "AVAILABLE",
                      "INITIALISATION_FAILED",
                      "INITIALISING",
                      "OFFLINE"
                    ]
                  },
                  "public": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "links": {
                    "type": "object",
                    "properties": {},
                    "writeOnly": true
                  }
                },
                "readOnly": true
              },
              "name": {
                "type": "string",
                "example": "My repo"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true
              },
              "state": {
                "type": "string",
                "readOnly": true,
                "enum": [
                  "AVAILABLE",
                  "INITIALISATION_FAILED",
                  "INITIALISING",
                  "OFFLINE"
                ]
              },
              "public": {
                "type": "boolean",
                "readOnly": true
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              }
            }
          },
          "createdDate": {
            "type": "integer",
            "format": "int64",
            "example": 19990759200
          },
          "user": {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string",
                "example": "jcitizen"
              },
              "emailAddress": {
                "type": "string",
                "example": "jane@example.com"
              },
              "active": {
                "type": "boolean"
              },
              "links": {
                "type": "object",
                "properties": {},
                "writeOnly": true
              },
              "name": {
                "type": "string",
                "example": "jcitizen"
              },
              "id": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "example": 101
              },
              "type": {
                "type": "string",
                "enum": [
                  "NORMAL",
                  "SERVICE"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "Jane Citizen"
              },
              "avatarUrl": {
                "type": "string",
                "writeOnly": true
              }
            }
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "RestReviewerGroup": {
        "properties": {
          "avatarUrl": {
            "type": "string",
            "writeOnly": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationUser"
            }
          },
          "description": {
            "type": "string",
            "example": "null"
          },
          "scope": {
            "type": "object",
            "properties": {
              "resourceId": {
                "type": "integer",
                "format": "int32",
                "example": 2
              },
              "type": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "PROJECT",
                  "REPOSITORY"
                ]
              }
            }
          },
          "name": {
            "type": "string",
            "example": "name"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestWebhook": {
        "properties": {
          "sslVerificationRequired": {
            "type": "boolean"
          },
          "scopeType": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "statistics": {
            "type": "object",
            "properties": {},
            "writeOnly": true
          },
          "events": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "configuration": {
            "type": "object"
          },
          "url": {
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/RestWebhookCredentials"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RestWebhookCredentials": {
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RestWebhookRequestResponse": {
        "properties": {}
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "description": "In order to use basic authorization, provide username:password Base64 encoded in the 'Authorization' header.",
        "scheme": "basic"
      }
    }
  }
}